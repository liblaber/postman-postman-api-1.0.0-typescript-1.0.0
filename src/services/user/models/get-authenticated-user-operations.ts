// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getAuthenticatedUserOperations = z.lazy(() => {
  return z.object({
    limit: z.number().optional(),
    name: z.string().optional(),
    overage: z.number().optional(),
    usage: z.number().optional(),
  });
});

/**
 *
 * @typedef  {GetAuthenticatedUserOperations} getAuthenticatedUserOperations
 * @property {number} - The operation's limit value.
 * @property {string} - The operation's name.
 * @property {number} - The operation's overage value.
 * @property {number} - The operation's current usage value.
 */
export type GetAuthenticatedUserOperations = z.infer<typeof getAuthenticatedUserOperations>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getAuthenticatedUserOperationsResponse = z.lazy(() => {
  return z
    .object({
      limit: z.number().optional(),
      name: z.string().optional(),
      overage: z.number().optional(),
      usage: z.number().optional(),
    })
    .transform((data) => ({
      limit: data['limit'],
      name: data['name'],
      overage: data['overage'],
      usage: data['usage'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getAuthenticatedUserOperationsRequest = z.lazy(() => {
  return z
    .object({
      limit: z.number().nullish(),
      name: z.string().nullish(),
      overage: z.number().nullish(),
      usage: z.number().nullish(),
    })
    .transform((data) => ({
      limit: data['limit'],
      name: data['name'],
      overage: data['overage'],
      usage: data['usage'],
    }));
});
