// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  getAuthenticatedUserUser,
  getAuthenticatedUserUserRequest,
  getAuthenticatedUserUserResponse,
} from './get-authenticated-user-user';
import {
  getAuthenticatedUserOperations,
  getAuthenticatedUserOperationsRequest,
  getAuthenticatedUserOperationsResponse,
} from './get-authenticated-user-operations';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getAuthenticatedUser = z.object({
  user: getAuthenticatedUserUser.optional(),
  operations: z.array(getAuthenticatedUserOperations).optional(),
});

/**
 *
 * @typedef  {GetAuthenticatedUser} getAuthenticatedUser
 * @property {GetAuthenticatedUserUser} - Information about the authenticated user.
 * @property {GetAuthenticatedUserOperations[]} - Information about operations and their usage limits. This object does not return for users with the [Guest role](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).
 */
export type GetAuthenticatedUser = z.infer<typeof getAuthenticatedUser>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getAuthenticatedUserResponse = z
  .object({
    user: getAuthenticatedUserUserResponse.optional(),
    operations: z.array(getAuthenticatedUserOperationsResponse).optional(),
  })
  .transform((data) => ({
    user: data['user'],
    operations: data['operations'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getAuthenticatedUserRequest = z
  .object({
    user: getAuthenticatedUserUserRequest.nullish(),
    operations: z.array(getAuthenticatedUserOperationsRequest).nullish(),
  })
  .transform((data) => ({
    user: data['user'],
    operations: data['operations'],
  }));
