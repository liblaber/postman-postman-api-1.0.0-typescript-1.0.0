// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { Request } from '../../http/transport/request';
import {
  DetectedSecretsQueriesRequest,
  detectedSecretsQueriesRequestRequest,
} from './models/detected-secrets-queries-request';
import {
  DetectedSecretsQueriesOkResponse,
  detectedSecretsQueriesOkResponseResponse,
} from './models/detected-secrets-queries-ok-response';
import { DetectedSecretsQueriesParams, GetDetectedSecretsLocationsParams } from './request-params';
import {
  UpdateDetectedSecretResolutionsRequest,
  updateDetectedSecretResolutionsRequestRequest,
} from './models/update-detected-secret-resolutions-request';
import {
  UpdateDetectedSecretResolutionsOkResponse,
  updateDetectedSecretResolutionsOkResponseResponse,
} from './models/update-detected-secret-resolutions-ok-response';
import { GetSecretsLocations, getSecretsLocationsResponse } from './models/get-secrets-locations';
import { GetSecretTypes, getSecretTypesResponse } from './models/get-secret-types';

export class SecretScannerService extends BaseService {
  /**
   * Returns all secrets detected by Postman's [Secret Scanner](https://learning.postman.com/docs/administration/secret-scanner/), grouped by workspace. If you pass an empty request body, this endpoint returns all results.
   * @param {number} [limit] - The maximum number of rows to return in the response.
   * @param {string} [cursor] - The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.
   * @param {string} [include] - The additional fields to be included as a part of the request.
   * @returns {Promise<HttpResponse<DetectedSecretsQueriesOkResponse>>} Successful Response
   */
  async detectedSecretsQueries(
    body: DetectedSecretsQueriesRequest,
    params?: DetectedSecretsQueriesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<DetectedSecretsQueriesOkResponse>> {
    const request = new Request({
      method: 'POST',
      body,
      path: '/detected-secrets-queries',
      config: this.config,
      responseSchema: detectedSecretsQueriesOkResponseResponse,
      requestSchema: detectedSecretsQueriesRequestRequest,
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addQueryParam('limit', params?.limit);
    request.addQueryParam('cursor', params?.cursor);
    request.addQueryParam('include', params?.include);
    request.addHeaderParam('Content-Type', 'application/json');
    return this.client.call<DetectedSecretsQueriesOkResponse>(request);
  }

  /**
   * Updates the resolution status of a secret detected in a workspace.
   * @param {string} secretId - The secret's ID.
   * @returns {Promise<HttpResponse<UpdateDetectedSecretResolutionsOkResponse>>} Successful Response
   */
  async updateDetectedSecretResolutions(
    secretId: string,
    body: UpdateDetectedSecretResolutionsRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<UpdateDetectedSecretResolutionsOkResponse>> {
    const request = new Request({
      method: 'PUT',
      body,
      path: '/detected-secrets/{secretId}',
      config: this.config,
      responseSchema: updateDetectedSecretResolutionsOkResponseResponse,
      requestSchema: updateDetectedSecretResolutionsRequestRequest,
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('secretId', secretId);
    request.addHeaderParam('Content-Type', 'application/json');
    return this.client.call<UpdateDetectedSecretResolutionsOkResponse>(request);
  }

  /**
   * Gets the locations of secrets detected by Postman's [Secret Scanner](https://learning.postman.com/docs/administration/secret-scanner/).
   * @param {string} secretId - The secret's ID.
   * @param {string} workspaceId - The workspace's ID.
   * @param {number} [limit] - The maximum number of rows to return in the response.
   * @param {string} [cursor] - The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.
   * @returns {Promise<HttpResponse<GetSecretsLocations>>} Successful Response
   */
  async getDetectedSecretsLocations(
    secretId: string,
    params: GetDetectedSecretsLocationsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetSecretsLocations>> {
    const request = new Request({
      method: 'GET',
      path: '/detected-secrets/{secretId}/locations',
      config: this.config,
      responseSchema: getSecretsLocationsResponse,
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('secretId', secretId);
    request.addQueryParam('limit', params?.limit);
    request.addQueryParam('cursor', params?.cursor);
    request.addQueryParam('workspaceId', params?.workspaceId);
    return this.client.call<GetSecretsLocations>(request);
  }

  /**
   * Gets the metadata of the secret types supported by Postman's [Secret Scanner](https://learning.postman.com/docs/administration/secret-scanner/). You can use a secret type's ID in the response to query data with the POST `/detected-secrets/{secretId}` endpoint.
   * @returns {Promise<HttpResponse<GetSecretTypes>>} Successful Response
   */
  async getSecretTypes(requestConfig?: RequestConfig): Promise<HttpResponse<GetSecretTypes>> {
    const request = new Request({
      method: 'GET',
      path: '/secret-types',
      config: this.config,
      responseSchema: getSecretTypesResponse,
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    return this.client.call<GetSecretTypes>(request);
  }
}
