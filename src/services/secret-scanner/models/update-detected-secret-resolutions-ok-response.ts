// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { history, historyRequest, historyResponse } from './history';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateDetectedSecretResolutionsOkResponse: any = z.lazy(() => {
  return z.object({
    history: z.array(history).optional(),
    resolution: z.string().optional(),
    secretHash: z.string().optional(),
    workspaceId: z.string().optional(),
  });
});

/**
 * 
 * @typedef  {UpdateDetectedSecretResolutionsOkResponse} updateDetectedSecretResolutionsOkResponse   
 * @property {History[]} - The history of the secret's resolution status changes.
 * @property {UpdateSecretResolutionsResolution2} - The secret's current resolution status:
- `ACTIVE` — The secret is active.
- `FALSE_POSITIVE` — The discovered secret is not an actual secret.
- `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
- `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.

 * @property {string} - The SHA-256 hash of the detected secret.
 * @property {string} - The ID of the workspace that contains the secret.
 */
export type UpdateDetectedSecretResolutionsOkResponse = z.infer<typeof updateDetectedSecretResolutionsOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateDetectedSecretResolutionsOkResponseResponse: any = z.lazy(() => {
  return z
    .object({
      history: z.array(historyResponse).optional(),
      resolution: z.string().optional(),
      secretHash: z.string().optional(),
      workspaceId: z.string().optional(),
    })
    .transform((data) => ({
      history: data['history'],
      resolution: data['resolution'],
      secretHash: data['secretHash'],
      workspaceId: data['workspaceId'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateDetectedSecretResolutionsOkResponseRequest: any = z.lazy(() => {
  return z
    .object({
      history: z.array(historyRequest).nullish(),
      resolution: z.string().nullish(),
      secretHash: z.string().nullish(),
      workspaceId: z.string().nullish(),
    })
    .transform((data) => ({
      history: data['history'],
      resolution: data['resolution'],
      secretHash: data['secretHash'],
      workspaceId: data['workspaceId'],
    }));
});
