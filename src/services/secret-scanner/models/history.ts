// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const history = z.lazy(() => {
  return z.object({
    actor: z.number().optional(),
    createdAt: z.string().optional(),
    resolution: z.string().optional(),
  });
});

/**
 * 
 * @typedef  {History} history   
 * @property {number} - The ID of the user that updated the secret's resolution status.
 * @property {string} - The date and time at which the resolution status was updated.
 * @property {HistoryResolution} - The secret's updated resolution status:
- `ACTIVE` — The secret is active.
- `FALSE_POSITIVE` — The discovered secret is not an actual secret.
- `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
- `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.

 */
export type History = z.infer<typeof history>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const historyResponse = z.lazy(() => {
  return z
    .object({
      actor: z.number().optional(),
      createdAt: z.string().optional(),
      resolution: z.string().optional(),
    })
    .transform((data) => ({
      actor: data['actor'],
      createdAt: data['createdAt'],
      resolution: data['resolution'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const historyRequest = z.lazy(() => {
  return z
    .object({ actor: z.number().nullish(), createdAt: z.string().nullish(), resolution: z.string().nullish() })
    .transform((data) => ({
      actor: data['actor'],
      createdAt: data['createdAt'],
      resolution: data['resolution'],
    }));
});
