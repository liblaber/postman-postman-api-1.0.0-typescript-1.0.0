// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const detectedSecretsQueriesMeta: any = z.lazy(() => {
  return z.object({
    limit: z.number().optional(),
    nextCursor: z.string().optional().nullable(),
    total: z.number().optional(),
  });
});

/**
 * The response's meta information for paginated results.
 * @typedef  {DetectedSecretsQueriesMeta} detectedSecretsQueriesMeta - The response's meta information for paginated results. - The response's meta information for paginated results.
 * @property {number} - The maximum number of records in the paginated response.
 * @property {string} - The pagination cursor that points to the next record in the results set.
 * @property {number} - The number of records that match the defined criteria. This will only be present if the `include` query parameter is specified with the `meta.total` value.
 */
export type DetectedSecretsQueriesMeta = z.infer<typeof detectedSecretsQueriesMeta>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const detectedSecretsQueriesMetaResponse: any = z.lazy(() => {
  return z
    .object({
      limit: z.number().optional(),
      nextCursor: z.string().optional().nullable(),
      total: z.number().optional(),
    })
    .transform((data) => ({
      limit: data['limit'],
      nextCursor: data['nextCursor'],
      total: data['total'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const detectedSecretsQueriesMetaRequest: any = z.lazy(() => {
  return z
    .object({ limit: z.number().nullish(), nextCursor: z.string().nullish(), total: z.number().nullish() })
    .transform((data) => ({
      limit: data['limit'],
      nextCursor: data['nextCursor'],
      total: data['total'],
    }));
});
