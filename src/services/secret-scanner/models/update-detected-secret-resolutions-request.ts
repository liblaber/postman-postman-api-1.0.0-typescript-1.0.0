// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateDetectedSecretResolutionsRequest = z.lazy(() => {
  return z.object({
    resolution: z.string(),
    workspaceId: z.string(),
  });
});

/**
 * 
 * @typedef  {UpdateDetectedSecretResolutionsRequest} updateDetectedSecretResolutionsRequest   
 * @property {UpdateSecretResolutionsResolution1} - The secret's updated resolution status:
- `FALSE_POSITIVE` — The discovered secret is not an actual secret.
- `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
- `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.

 * @property {string} - The ID of the workspace that contains the secret.
 */
export type UpdateDetectedSecretResolutionsRequest = z.infer<typeof updateDetectedSecretResolutionsRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateDetectedSecretResolutionsRequestResponse = z.lazy(() => {
  return z
    .object({
      resolution: z.string(),
      workspaceId: z.string(),
    })
    .transform((data) => ({
      resolution: data['resolution'],
      workspaceId: data['workspaceId'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateDetectedSecretResolutionsRequestRequest = z.lazy(() => {
  return z.object({ resolution: z.string().nullish(), workspaceId: z.string().nullish() }).transform((data) => ({
    resolution: data['resolution'],
    workspaceId: data['workspaceId'],
  }));
});
