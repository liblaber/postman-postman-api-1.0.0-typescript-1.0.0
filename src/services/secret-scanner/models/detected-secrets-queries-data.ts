// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { dataResolution } from './data-resolution';
import { dataWorkspaceVisibility } from './data-workspace-visibility';

/**
 * The shape of the model inside the application code - what the users use
 */
export const detectedSecretsQueriesData = z.object({
  obfuscatedSecret: z.string().optional(),
  occurrences: z.number().optional(),
  resolution: dataResolution.optional(),
  secretHash: z.string().optional(),
  secretId: z.string().optional(),
  secretType: z.string().optional(),
  detectedAt: z.string().optional(),
  workspaceId: z.string().optional(),
  workspaceVisibility: dataWorkspaceVisibility.optional(),
});

/**
 * Information about the secret finding.
 * @typedef  {DetectedSecretsQueriesData} detectedSecretsQueriesData - Information about the secret finding. - Information about the secret finding.
 * @property {string} - The secret's obfuscated value.
 * @property {number} - The number of times the secret was found in the workspace.
 * @property {DataResolution} - The secret's current status:
- `ACTIVE` — The secret is active.
- `FALSE_POSITIVE` — The discovered secret is not an actual secret.
- `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
- `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.

 * @property {string} - The SHA-256 hash of the detected secret.
 * @property {string} - The detected secret's ID.
 * @property {string} - The type of the secret.
 * @property {string} - The date and time at which the secret was first detected.
 * @property {string} - The ID of the workspace that contains the secret.
 * @property {DataWorkspaceVisibility} - The workspace's [visibility setting](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility).
 */
export type DetectedSecretsQueriesData = z.infer<typeof detectedSecretsQueriesData>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const detectedSecretsQueriesDataResponse = z
  .object({
    obfuscatedSecret: z.string().optional(),
    occurrences: z.number().optional(),
    resolution: dataResolution.optional(),
    secretHash: z.string().optional(),
    secretId: z.string().optional(),
    secretType: z.string().optional(),
    detectedAt: z.string().optional(),
    workspaceId: z.string().optional(),
    workspaceVisibility: dataWorkspaceVisibility.optional(),
  })
  .transform((data) => ({
    obfuscatedSecret: data['obfuscatedSecret'],
    occurrences: data['occurrences'],
    resolution: data['resolution'],
    secretHash: data['secretHash'],
    secretId: data['secretId'],
    secretType: data['secretType'],
    detectedAt: data['detectedAt'],
    workspaceId: data['workspaceId'],
    workspaceVisibility: data['workspaceVisibility'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const detectedSecretsQueriesDataRequest = z
  .object({
    obfuscatedSecret: z.string().nullish(),
    occurrences: z.number().nullish(),
    resolution: dataResolution.nullish(),
    secretHash: z.string().nullish(),
    secretId: z.string().nullish(),
    secretType: z.string().nullish(),
    detectedAt: z.string().nullish(),
    workspaceId: z.string().nullish(),
    workspaceVisibility: dataWorkspaceVisibility.nullish(),
  })
  .transform((data) => ({
    obfuscatedSecret: data['obfuscatedSecret'],
    occurrences: data['occurrences'],
    resolution: data['resolution'],
    secretHash: data['secretHash'],
    secretId: data['secretId'],
    secretType: data['secretType'],
    detectedAt: data['detectedAt'],
    workspaceId: data['workspaceId'],
    workspaceVisibility: data['workspaceVisibility'],
  }));
