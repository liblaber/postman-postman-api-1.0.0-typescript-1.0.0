// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { dataType } from './data-type';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getSecretTypesData = z.object({
  name: z.string().optional(),
  id: z.string().optional(),
  type_: dataType.optional(),
});

/**
 * Information about the secret type.
 * @typedef  {GetSecretTypesData} getSecretTypesData - Information about the secret type. - Information about the secret type.
 * @property {string} - The name of the secret type.
 * @property {string} - The ID of the secret type.
 * @property {DataType} - The origin of the secret type:
- `DEFAULT` — Supported by default in Postman.
- `TEAM_REGEX` — A custom regex added by an Admin or Super Admin user in the **Configure Alerts** section of the [**Team Settings**](https://learning.postman.com/docs/administration/team-settings/) interface.

 */
export type GetSecretTypesData = z.infer<typeof getSecretTypesData>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getSecretTypesDataResponse = z
  .object({
    name: z.string().optional(),
    id: z.string().optional(),
    type: dataType.optional(),
  })
  .transform((data) => ({
    name: data['name'],
    id: data['id'],
    type_: data['type'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getSecretTypesDataRequest = z
  .object({ name: z.string().nullish(), id: z.string().nullish(), type_: dataType.nullish() })
  .transform((data) => ({
    name: data['name'],
    id: data['id'],
    type: data['type_'],
  }));
