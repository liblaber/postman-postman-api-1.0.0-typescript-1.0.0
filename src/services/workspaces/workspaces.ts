// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import {
  CreateWorkspaceOkResponse,
  CreateWorkspaceRequest,
  DeleteWorkspace,
  GetWorkspace,
  GetWorkspaceGlobalVariables,
  GetWorkspaceRoles,
  GetWorkspaces,
  UpdateWorkspaceGlobalVariablesOkResponse,
  UpdateWorkspaceGlobalVariablesRequest,
  UpdateWorkspaceOkResponse,
  UpdateWorkspaceRequest,
  UpdateWorkspaceRolesOkResponse,
  UpdateWorkspaceRolesRequest,
  createWorkspaceOkResponseResponse,
  createWorkspaceRequestRequest,
  deleteWorkspaceResponse,
  getWorkspaceGlobalVariablesResponse,
  getWorkspaceResponse,
  getWorkspaceRolesResponse,
  getWorkspacesResponse,
  updateWorkspaceGlobalVariablesOkResponseResponse,
  updateWorkspaceGlobalVariablesRequestRequest,
  updateWorkspaceOkResponseResponse,
  updateWorkspaceRequestRequest,
  updateWorkspaceRolesOkResponseResponse,
  updateWorkspaceRolesRequestRequest,
} from './models';
import { GetWorkspacesParams } from './request-params';

export class WorkspacesService extends BaseService {
  /**
 * Gets all [workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/). The response includes your workspaces and any workspaces that you have access to.
**Note:**

This endpoint's response contains the visibility field. Visibility determines who can access the workspace:
- `personal` — Only you can access the workspace.
- `team` — All team members can access the workspace.
- `private` — Only invited team members can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).
- `public` — Everyone can access the workspace.
- `partner` — Only invited team members and [partners](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/partner-workspaces/) can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).

 * @param {GetWorkspacesType} [type_] - The type of workspace to filter the response by.
 * @param {number} [createdBy] - Return only workspaces created by a specific user ID. For multiple users, pass this value as a comma-separated list of user IDs. The response only returns workspaces that you have access to.
 * @param {GetWorkspacesInclude} [include] - Include the following information in the endpoint's response:
- `mocks:deactivated` — Include all deactivated mock servers in the response.

 * @returns {Promise<HttpResponse<GetWorkspaces>>} Successful Response
 */
  async getWorkspaces(
    params?: GetWorkspacesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetWorkspaces>> {
    const path = '/workspaces';
    const options: any = {
      responseSchema: getWorkspacesResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.type_) {
      options.queryParams['type'] = params?.type_;
    }
    if (params?.createdBy) {
      options.queryParams['createdBy'] = params?.createdBy;
    }
    if (params?.include) {
      options.queryParams['include'] = params?.include;
    }
    return this.client.get(path, options);
  }

  /**
 * Creates a new [workspace](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/).
**Note:**

This endpoint returns a 403 `Forbidden` response if the user does not have permission to create workspaces. [Admins and Super Admins](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles) can configure workspace permissions to restrict users and/or user groups from creating workspaces or require approvals for the creation of team workspaces.

### Important

We deprecated linking collections or environments between workspaces. We do not recommend that you do this.

If you have a linked collection or environment, note the following:
- The endpoint does not create a clone of a collection or environment.
- Any changes you make to a linked collection or environment changes them in all workspaces.
- If you delete a collection or environment linked between workspaces, the system deletes it in all the workspaces.

 * @returns {Promise<HttpResponse<CreateWorkspaceOkResponse>>} Successful Response
 */
  async createWorkspace(
    body: CreateWorkspaceRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateWorkspaceOkResponse>> {
    const path = '/workspaces';
    const options: any = {
      responseSchema: createWorkspaceOkResponseResponse,
      requestSchema: createWorkspaceRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   * Gets information about all roles in a workspace, based on the team's [plan](https://www.postman.com/pricing/).
   * @returns {Promise<HttpResponse<GetWorkspaceRoles>>} Successful Response
   */
  async getWorkspaceRoles(requestConfig?: RequestConfig): Promise<HttpResponse<GetWorkspaceRoles>> {
    const path = '/workspaces-roles';
    const options: any = {
      responseSchema: getWorkspaceRolesResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
 * Gets information about a workspace.
**Note:**

This endpoint's response contains the `visibility` field. [Visibility](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility) determines who can access the workspace:
- `personal` — Only you can access the workspace.
- `team` — All team members can access the workspace.
- `private` — Only invited team members can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).
- `public` — Everyone can access the workspace.
- `partner` — Only invited team members and [partners](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/partner-workspaces/) can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).

### Important

We have deprecated the `name` and `uid` responses in the following array of objects:
- `collections`
- `environments`
- `mocks`
- `monitors`
- `apis`

 * @param {string} workspaceId - The workspace's ID.
 * @returns {Promise<HttpResponse<GetWorkspace>>} Successful Response
 */
  async getWorkspace(workspaceId: string, requestConfig?: RequestConfig): Promise<HttpResponse<GetWorkspace>> {
    const path = this.client.buildPath('/workspaces/{workspaceId}', { workspaceId: workspaceId });
    const options: any = {
      responseSchema: getWorkspaceResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
 * Updates a workspace.
### Important

We deprecated linking collections or environments between workspaces. We do not recommend that you do this.

If you have a linked collection or environment, note the following:
- The endpoint does not create a clone of a collection or environment.
- Any changes you make to a linked collection or environment changes them in all workspaces.
- If you delete a collection or environment linked between workspaces, the system deletes it in all the workspaces.

 * @param {string} workspaceId - The workspace's ID.
 * @returns {Promise<HttpResponse<UpdateWorkspaceOkResponse>>} Successful Response
 */
  async updateWorkspace(
    workspaceId: string,
    body: UpdateWorkspaceRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<UpdateWorkspaceOkResponse>> {
    const path = this.client.buildPath('/workspaces/{workspaceId}', { workspaceId: workspaceId });
    const options: any = {
      responseSchema: updateWorkspaceOkResponseResponse,
      requestSchema: updateWorkspaceRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
 * Deletes an existing workspace.
### Important

If you delete a workspace that has a linked collection or environment with another workspace, this will delete the collection and environment in all workspaces.

 * @param {string} workspaceId - The workspace's ID.
 * @returns {Promise<HttpResponse<DeleteWorkspace>>} Successful Response
 */
  async deleteWorkspace(workspaceId: string, requestConfig?: RequestConfig): Promise<HttpResponse<DeleteWorkspace>> {
    const path = this.client.buildPath('/workspaces/{workspaceId}', { workspaceId: workspaceId });
    const options: any = {
      responseSchema: deleteWorkspaceResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.delete(path, options);
  }

  /**
   * Gets a workspace's global [variables](https://learning.postman.com/docs/sending-requests/variables/#variable-scopes).
   * @param {string} workspaceId - The workspace's ID.
   * @returns {Promise<HttpResponse<GetWorkspaceGlobalVariables>>} Successful Response
   */
  async getWorkspaceGlobalVariables(
    workspaceId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetWorkspaceGlobalVariables>> {
    const path = this.client.buildPath('/workspaces/{workspaceId}/global-variables', { workspaceId: workspaceId });
    const options: any = {
      responseSchema: getWorkspaceGlobalVariablesResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Updates and replaces a workspace's global [variables](https://learning.postman.com/docs/sending-requests/variables/#variable-scopes). This endpoint replaces all existing global variables with the variables you pass in the request body.
   * @param {string} workspaceId - The workspace's ID.
   * @returns {Promise<HttpResponse<UpdateWorkspaceGlobalVariablesOkResponse>>} Successful Response
   */
  async updateWorkspaceGlobalVariables(
    workspaceId: string,
    body: UpdateWorkspaceGlobalVariablesRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<UpdateWorkspaceGlobalVariablesOkResponse>> {
    const path = this.client.buildPath('/workspaces/{workspaceId}/global-variables', { workspaceId: workspaceId });
    const options: any = {
      responseSchema: updateWorkspaceGlobalVariablesOkResponseResponse,
      requestSchema: updateWorkspaceGlobalVariablesRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
 * Updates the roles of [users](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles) or [user groups](https://learning.postman.com/docs/collaborating-in-postman/user-groups/) in a workspace. To get a list of roles, use the `GET /workspace-roles` endpoint.
**Note:**

- This endpoint does not support the external [Partner or Guest roles](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).
- This endpoint is restricted to 50 operations per call.
- The request body must contain one unique action per user or user group. For example, you cannot add and remove multiple roles for a user in the same request body.

 * @param {string} workspaceId - The workspace's ID.
 * @returns {Promise<HttpResponse<UpdateWorkspaceRolesOkResponse>>} Successful Response
 */
  async updateWorkspaceRoles(
    workspaceId: string,
    body: UpdateWorkspaceRolesRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<UpdateWorkspaceRolesOkResponse>> {
    const path = this.client.buildPath('/workspaces/{workspaceId}/roles', { workspaceId: workspaceId });
    const options: any = {
      responseSchema: updateWorkspaceRolesOkResponseResponse,
      requestSchema: updateWorkspaceRolesRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json-patch+json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.patch(path, options);
  }
}
