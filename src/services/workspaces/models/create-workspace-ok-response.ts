// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  createWorkspaceWorkspace2,
  createWorkspaceWorkspace2Request,
  createWorkspaceWorkspace2Response,
} from './create-workspace-workspace-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createWorkspaceOkResponse: any = z.lazy(() => {
  return z.object({
    workspace: createWorkspaceWorkspace2.optional(),
  });
});

/**
 *
 * @typedef  {CreateWorkspaceOkResponse} createWorkspaceOkResponse
 * @property {CreateWorkspaceWorkspace2} - Information about the created workspace.
 */
export type CreateWorkspaceOkResponse = z.infer<typeof createWorkspaceOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createWorkspaceOkResponseResponse: any = z.lazy(() => {
  return z
    .object({
      workspace: createWorkspaceWorkspace2Response.optional(),
    })
    .transform((data) => ({
      workspace: data['workspace'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createWorkspaceOkResponseRequest: any = z.lazy(() => {
  return z.object({ workspace: createWorkspaceWorkspace2Request.nullish() }).transform((data) => ({
    workspace: data['workspace'],
  }));
});
