// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { rolesUser, rolesUserRequest, rolesUserResponse } from './roles-user';
import { usergroup, usergroupRequest, usergroupResponse } from './usergroup';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getWorkspaceRolesRoles: any = z.lazy(() => {
  return z.object({
    user: z.array(rolesUser).optional(),
    usergroup: z.array(usergroup).optional(),
  });
});

/**
 * Information about the workspace's [user roles](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).
 * @typedef  {GetWorkspaceRolesRoles} getWorkspaceRolesRoles - Information about the workspace's [user roles](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles). - Information about the workspace's [user roles](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).
 * @property {RolesUser[]} - The list of user roles in the workspace.
 * @property {Usergroup[]} - Information about the workspace's [user group roles](https://learning.postman.com/docs/collaborating-in-postman/user-groups/).
 */
export type GetWorkspaceRolesRoles = z.infer<typeof getWorkspaceRolesRoles>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getWorkspaceRolesRolesResponse: any = z.lazy(() => {
  return z
    .object({
      user: z.array(rolesUserResponse).optional(),
      usergroup: z.array(usergroupResponse).optional(),
    })
    .transform((data) => ({
      user: data['user'],
      usergroup: data['usergroup'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getWorkspaceRolesRolesRequest: any = z.lazy(() => {
  return z
    .object({ user: z.array(rolesUserRequest).nullish(), usergroup: z.array(usergroupRequest).nullish() })
    .transform((data) => ({
      user: data['user'],
      usergroup: data['usergroup'],
    }));
});
