// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const usergroup = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    description: z.string().optional(),
    displayName: z.string().optional(),
  });
});

/**
 * Information about the user group in the workspace.
 * @typedef  {Usergroup} usergroup - Information about the user group in the workspace. - Information about the user group in the workspace.
 * @property {number} - The role's ID.
 * @property {string} - The role's description.
 * @property {string} - The role's display name.
 */
export type Usergroup = z.infer<typeof usergroup>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const usergroupResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      description: z.string().optional(),
      displayName: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      description: data['description'],
      displayName: data['displayName'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const usergroupRequest = z.lazy(() => {
  return z
    .object({ id: z.number().nullish(), description: z.string().nullish(), displayName: z.string().nullish() })
    .transform((data) => ({
      id: data['id'],
      description: data['description'],
      displayName: data['displayName'],
    }));
});
