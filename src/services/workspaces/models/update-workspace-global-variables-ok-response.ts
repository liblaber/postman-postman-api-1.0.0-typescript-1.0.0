// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { globalVariable, globalVariableRequest, globalVariableResponse } from './global-variable';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateWorkspaceGlobalVariablesOkResponse: any = z.lazy(() => {
  return z.object({
    values: z.array(globalVariable).optional(),
  });
});

/**
 * Information about the workspace's updated global variables.
 * @typedef  {UpdateWorkspaceGlobalVariablesOkResponse} updateWorkspaceGlobalVariablesOkResponse - Information about the workspace's updated global variables. - Information about the workspace's updated global variables.
 * @property {GlobalVariable[]} - A list of the workspace's global variables.
 */
export type UpdateWorkspaceGlobalVariablesOkResponse = z.infer<typeof updateWorkspaceGlobalVariablesOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateWorkspaceGlobalVariablesOkResponseResponse: any = z.lazy(() => {
  return z
    .object({
      values: z.array(globalVariableResponse).optional(),
    })
    .transform((data) => ({
      values: data['values'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateWorkspaceGlobalVariablesOkResponseRequest: any = z.lazy(() => {
  return z.object({ values: z.array(globalVariableRequest).nullish() }).transform((data) => ({
    values: data['values'],
  }));
});
