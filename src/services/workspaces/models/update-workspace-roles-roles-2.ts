// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { displayName } from './display-name';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateWorkspaceRolesRoles2 = z.object({
  id: z.number().optional(),
  user: z.array(z.number()).optional(),
  usergroup: z.array(z.number()).optional(),
  displayName: displayName.optional(),
});

/**
 *
 * @typedef  {UpdateWorkspaceRolesRoles2} updateWorkspaceRolesRoles2
 * @property {number} - The role's ID.
 * @property {number[]} - A list of user IDs assigned to the role.
 * @property {number[]} - A list of user group IDs assigned to the role.
 * @property {DisplayName} - The role's display name.
 */
export type UpdateWorkspaceRolesRoles2 = z.infer<typeof updateWorkspaceRolesRoles2>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateWorkspaceRolesRoles2Response = z
  .object({
    id: z.number().optional(),
    user: z.array(z.number()).optional(),
    usergroup: z.array(z.number()).optional(),
    displayName: displayName.optional(),
  })
  .transform((data) => ({
    id: data['id'],
    user: data['user'],
    usergroup: data['usergroup'],
    displayName: data['displayName'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateWorkspaceRolesRoles2Request = z
  .object({
    id: z.number().nullish(),
    user: z.array(z.number()).nullish(),
    usergroup: z.array(z.number()).nullish(),
    displayName: displayName.nullish(),
  })
  .transform((data) => ({
    id: data['id'],
    user: data['user'],
    usergroup: data['usergroup'],
    displayName: data['displayName'],
  }));
