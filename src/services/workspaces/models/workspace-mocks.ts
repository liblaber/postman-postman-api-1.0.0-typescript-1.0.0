// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const workspaceMocks = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uid: z.string().optional(),
    deactivated: z.boolean().optional(),
  });
});

/**
 * Information about the mock server.
 * @typedef  {WorkspaceMocks} workspaceMocks - Information about the mock server. - Information about the mock server.
 * @property {string} - The mock server's ID.
 * @property {string} - The mock server's name.
 * @property {string} - The mock server's unique ID.
 * @property {boolean} - If true, the mock server is not active. Mock servers deactivate when a linked collection or environment is deleted.
 */
export type WorkspaceMocks = z.infer<typeof workspaceMocks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const workspaceMocksResponse = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      name: z.string().optional(),
      uid: z.string().optional(),
      deactivated: z.boolean().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      uid: data['uid'],
      deactivated: data['deactivated'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const workspaceMocksRequest = z.lazy(() => {
  return z
    .object({
      id: z.string().nullish(),
      name: z.string().nullish(),
      uid: z.string().nullish(),
      deactivated: z.boolean().nullish(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      uid: data['uid'],
      deactivated: data['deactivated'],
    }));
});
