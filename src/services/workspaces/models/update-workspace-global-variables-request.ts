// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { globalVariable, globalVariableRequest, globalVariableResponse } from '../../common/global-variable';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateWorkspaceGlobalVariablesRequest = z.object({
  values: z.array(globalVariable).optional(),
});

/**
 *
 * @typedef  {UpdateWorkspaceGlobalVariablesRequest} updateWorkspaceGlobalVariablesRequest
 * @property {GlobalVariable[]} - A list of the workspace's global variables.
 */
export type UpdateWorkspaceGlobalVariablesRequest = z.infer<typeof updateWorkspaceGlobalVariablesRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateWorkspaceGlobalVariablesRequestResponse = z
  .object({
    values: z.array(globalVariableResponse).optional(),
  })
  .transform((data) => ({
    values: data['values'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateWorkspaceGlobalVariablesRequestRequest = z
  .object({ values: z.array(globalVariableRequest).nullish() })
  .transform((data) => ({
    values: data['values'],
  }));
