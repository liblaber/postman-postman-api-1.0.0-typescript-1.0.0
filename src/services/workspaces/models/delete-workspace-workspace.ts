// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const deleteWorkspaceWorkspace = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
  });
});

/**
 * Information about the deleted workspace.
 * @typedef  {DeleteWorkspaceWorkspace} deleteWorkspaceWorkspace - Information about the deleted workspace. - Information about the deleted workspace.
 * @property {string} - The workspace's ID.
 */
export type DeleteWorkspaceWorkspace = z.infer<typeof deleteWorkspaceWorkspace>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const deleteWorkspaceWorkspaceResponse = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const deleteWorkspaceWorkspaceRequest = z.lazy(() => {
  return z.object({ id: z.string().nullish() }).transform((data) => ({
    id: data['id'],
  }));
});
