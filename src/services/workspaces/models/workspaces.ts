// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { workspacesType } from './workspaces-type';
import { workspacesVisibility } from './workspaces-visibility';

/**
 * The shape of the model inside the application code - what the users use
 */
export const workspaces = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  createdBy: z.number().optional(),
  type_: workspacesType.optional(),
  visibility: workspacesVisibility.optional(),
});

/**
 * Information about the workspace.
 * @typedef  {Workspaces} workspaces - Information about the workspace. - Information about the workspace.
 * @property {string} - The workspace's ID.
 * @property {string} - The workspace's name.
 * @property {number} - The user who created the workspace. The response only returns workspaces that you have access to.
 * @property {WorkspacesType} - The type of workspace.
 * @property {WorkspacesVisibility} - The workspace's visibility. [Visibility](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility) determines who can access the workspace:
- `personal` — Only you can access the workspace.
- `team` — All team members can access the workspace.
- `private` — Only invited team members can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).
- `public` — Everyone can access the workspace.
- `partner` — Only invited team members and [partners](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/partner-workspaces/) can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).

 */
export type Workspaces = z.infer<typeof workspaces>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const workspacesResponse = z
  .object({
    id: z.string().optional(),
    name: z.string().optional(),
    createdBy: z.number().optional(),
    type: workspacesType.optional(),
    visibility: workspacesVisibility.optional(),
  })
  .transform((data) => ({
    id: data['id'],
    name: data['name'],
    createdBy: data['createdBy'],
    type_: data['type'],
    visibility: data['visibility'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const workspacesRequest = z
  .object({
    id: z.string().nullish(),
    name: z.string().nullish(),
    createdBy: z.number().nullish(),
    type_: workspacesType.nullish(),
    visibility: workspacesVisibility.nullish(),
  })
  .transform((data) => ({
    id: data['id'],
    name: data['name'],
    createdBy: data['createdBy'],
    type: data['type_'],
    visibility: data['visibility'],
  }));
