// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  updateWorkspaceRolesRoles2,
  updateWorkspaceRolesRoles2Request,
  updateWorkspaceRolesRoles2Response,
} from './update-workspace-roles-roles-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateWorkspaceRolesOkResponse = z.lazy(() => {
  return z.object({
    roles: z.array(updateWorkspaceRolesRoles2).optional(),
  });
});

/**
 *
 * @typedef  {UpdateWorkspaceRolesOkResponse} updateWorkspaceRolesOkResponse
 * @property {UpdateWorkspaceRolesRoles2[]}
 */
export type UpdateWorkspaceRolesOkResponse = z.infer<typeof updateWorkspaceRolesOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateWorkspaceRolesOkResponseResponse = z.lazy(() => {
  return z
    .object({
      roles: z.array(updateWorkspaceRolesRoles2Response).optional(),
    })
    .transform((data) => ({
      roles: data['roles'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateWorkspaceRolesOkResponseRequest = z.lazy(() => {
  return z.object({ roles: z.array(updateWorkspaceRolesRoles2Request).nullish() }).transform((data) => ({
    roles: data['roles'],
  }));
});
