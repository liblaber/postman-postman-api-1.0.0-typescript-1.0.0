// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const schemaSecurityValidationSchema: any = z.lazy(() => {
  return z.object({
    language: z.string(),
    schema: z.string(),
    type: z.string(),
  });
});

/**
 *
 * @typedef  {SchemaSecurityValidationSchema} schemaSecurityValidationSchema
 * @property {SchemaLanguage} - The definition format.
 * @property {string} - The stringified API definition.
 * @property {SchemaType} - The definition type.
 */
export type SchemaSecurityValidationSchema = z.infer<typeof schemaSecurityValidationSchema>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaSecurityValidationSchemaResponse: any = z.lazy(() => {
  return z
    .object({
      language: z.string(),
      schema: z.string(),
      type: z.string(),
    })
    .transform((data) => ({
      language: data['language'],
      schema: data['schema'],
      type: data['type'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaSecurityValidationSchemaRequest: any = z.lazy(() => {
  return z
    .object({ language: z.string().nullish(), schema: z.string().nullish(), type: z.string().nullish() })
    .transform((data) => ({
      language: data['language'],
      schema: data['schema'],
      type: data['type'],
    }));
});
