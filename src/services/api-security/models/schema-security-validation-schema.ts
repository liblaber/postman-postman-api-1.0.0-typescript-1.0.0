// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { schemaLanguage } from './schema-language';
import { schemaType } from './schema-type';

/**
 * The shape of the model inside the application code - what the users use
 */
export const schemaSecurityValidationSchema = z.object({
  language: schemaLanguage,
  schema: z.string(),
  type_: schemaType,
});

/**
 *
 * @typedef  {SchemaSecurityValidationSchema} schemaSecurityValidationSchema
 * @property {SchemaLanguage} - The definition format.
 * @property {string} - The stringified API definition.
 * @property {SchemaType} - The definition type.
 */
export type SchemaSecurityValidationSchema = z.infer<typeof schemaSecurityValidationSchema>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaSecurityValidationSchemaResponse = z
  .object({
    language: schemaLanguage,
    schema: z.string(),
    type: schemaType,
  })
  .transform((data) => ({
    language: data['language'],
    schema: data['schema'],
    type_: data['type'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaSecurityValidationSchemaRequest = z
  .object({ language: schemaLanguage.nullish(), schema: z.string().nullish(), type_: schemaType.nullish() })
  .transform((data) => ({
    language: data['language'],
    schema: data['schema'],
    type: data['type_'],
  }));
