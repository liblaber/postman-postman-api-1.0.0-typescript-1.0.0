// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const schemaSecurityValidationOkResponse = z.lazy(() => {
  return z.object({
    warnings: z.array(z.any()).optional(),
  });
});

/**
 * 
 * @typedef  {SchemaSecurityValidationOkResponse} schemaSecurityValidationOkResponse   
 * @property {any[]} - Information about each issue discovered in the analysis. Each object includes the violation's severity and category, the location of the issue, data paths, and other information. This returns an empty object if there are no issues present in the schema.

If there are issues, this returns the `possibleFixUrl` response in each warning object. This provides a link to documentation you can use to resolve the warning.

 */
export type SchemaSecurityValidationOkResponse = z.infer<typeof schemaSecurityValidationOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaSecurityValidationOkResponseResponse = z.lazy(() => {
  return z
    .object({
      warnings: z.array(z.any()).optional(),
    })
    .transform((data) => ({
      warnings: data['warnings'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaSecurityValidationOkResponseRequest = z.lazy(() => {
  return z.object({ warnings: z.array(z.any()).nullish() }).transform((data) => ({
    warnings: data['warnings'],
  }));
});
