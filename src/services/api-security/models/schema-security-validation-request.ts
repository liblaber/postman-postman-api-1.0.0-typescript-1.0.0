// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  schemaSecurityValidationSchema,
  schemaSecurityValidationSchemaRequest,
  schemaSecurityValidationSchemaResponse,
} from './schema-security-validation-schema';

/**
 * The shape of the model inside the application code - what the users use
 */
export const schemaSecurityValidationRequest = z.lazy(() => {
  return z.object({
    schema: schemaSecurityValidationSchema.optional(),
  });
});

/**
 *
 * @typedef  {SchemaSecurityValidationRequest} schemaSecurityValidationRequest
 * @property {SchemaSecurityValidationSchema}
 */
export type SchemaSecurityValidationRequest = z.infer<typeof schemaSecurityValidationRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaSecurityValidationRequestResponse = z.lazy(() => {
  return z
    .object({
      schema: schemaSecurityValidationSchemaResponse.optional(),
    })
    .transform((data) => ({
      schema: data['schema'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaSecurityValidationRequestRequest = z.lazy(() => {
  return z.object({ schema: schemaSecurityValidationSchemaRequest.nullish() }).transform((data) => ({
    schema: data['schema'],
  }));
});
