// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import {
  DeletePanElementOrFolder,
  GetAllPanAddElementRequests,
  GetPanElementsAndFolders,
  PostPanElementOrFolderCreatedResponse,
  PostPanElementOrFolderRequest,
  PrivateApiNetworkRespondPanElementAddRequestRequest1,
  RespondPanElementAddRequestOkResponse,
  UpdatePanElementOrFolderOkResponse,
  UpdatePanElementOrFolderRequest,
  deletePanElementOrFolderResponse,
  getAllPanAddElementRequestsResponse,
  getPanElementsAndFoldersResponse,
  postPanElementOrFolderCreatedResponseResponse,
  postPanElementOrFolderRequestRequest,
  privateApiNetworkRespondPanElementAddRequestRequest1Request,
  respondPanElementAddRequestOkResponseResponse,
  updatePanElementOrFolderOkResponseResponse,
  updatePanElementOrFolderRequestRequest,
} from './models';
import { GetAllElementsAndFoldersParams, GetAllPanAddElementRequestsParams } from './request-params';
import { UpdatePanElementOrFolderElementType } from '../common';

export class PrivateApiNetworkService extends BaseService {
  /**
 * Gets information about the folders and their elements added to your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
**Note:**

The `limit` and `offset` parameters are separately applied to elements and folders. For example, if you query a `limit` value of `10` and an `offset` value `0`, the endpoint returns 10 elements and 10 folders for a total of 20 items. The `totalCount` property in the `meta` response is the total count of both elements and folders.

 * @param {string} [since] - Return only results created since the given time, in [ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) format. This value cannot be later than the `until` value.
 * @param {string} [until] - Return only results created until this given time, in [ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) format. This value cannot be earlier than the `since` value.
 * @param {number} [addedBy] - Return only elements published by the given user ID.
 * @param {string} [name] - Return only elements whose name includes the given value. Matching is not case-sensitive.
 * @param {string} [summary] - Return only elements whose summary includes the given value. Matching is not case-sensitive.
 * @param {string} [description] - Return only elements whose description includes the given value. Matching is not case-sensitive.
 * @param {GetAllElementsAndFoldersSort} [sort] - Sort the results by the given value. If you use this query parameter, you must also use the `direction` parameter.
 * @param {AscDesc} [direction] - Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive. If you use this query parameter, you must also use the `sort` parameter.
 * @param {number} [createdBy] - Return only results created by the given user ID.
 * @param {number} [offset] - The zero-based offset of the first item to return.
 * @param {number} [limit] - The maximum number of elements to return. If the value exceeds the maximum value of `1000`, then the system uses the `1000` value.
 * @param {number} [parentFolderId] - Return the folders and elements in a specific folder. If this value is `0`, then the endpoint only returns the root folder's elements.
 * @param {GetAllElementsAndFoldersType} [type_] - Filter by the element type.
 * @returns {Promise<HttpResponse<GetPanElementsAndFolders>>} Successful Response
 */
  async getAllElementsAndFolders(
    params?: GetAllElementsAndFoldersParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetPanElementsAndFolders>> {
    const path = '/network/private';
    const options: any = {
      responseSchema: getPanElementsAndFoldersResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.since) {
      options.queryParams['since'] = params?.since;
    }
    if (params?.until) {
      options.queryParams['until'] = params?.until;
    }
    if (params?.addedBy) {
      options.queryParams['addedBy'] = params?.addedBy;
    }
    if (params?.name) {
      options.queryParams['name'] = params?.name;
    }
    if (params?.summary) {
      options.queryParams['summary'] = params?.summary;
    }
    if (params?.description) {
      options.queryParams['description'] = params?.description;
    }
    if (params?.sort) {
      options.queryParams['sort'] = params?.sort;
    }
    if (params?.direction) {
      options.queryParams['direction'] = params?.direction;
    }
    if (params?.createdBy) {
      options.queryParams['createdBy'] = params?.createdBy;
    }
    if (params?.offset) {
      options.queryParams['offset'] = params?.offset;
    }
    if (params?.limit) {
      options.queryParams['limit'] = params?.limit;
    }
    if (params?.parentFolderId) {
      options.queryParams['parentFolderId'] = params?.parentFolderId;
    }
    if (params?.type_) {
      options.queryParams['type'] = params?.type_;
    }
    return this.client.get(path, options);
  }

  /**
 * Publishes a element or creates a folder in your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/). An element is a Postman API, collection, or workspace.
**Note:**

You can only pass one element object type per call. For example, you cannot pass both `api` and `collection` in a single request.

 * @returns {Promise<HttpResponse<PostPanElementOrFolderCreatedResponse>>} Created
 */
  async postPanElementOrFolder(
    body: PostPanElementOrFolderRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PostPanElementOrFolderCreatedResponse>> {
    const path = '/network/private';
    const options: any = {
      responseSchema: postPanElementOrFolderCreatedResponseResponse,
      requestSchema: postPanElementOrFolderRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
 * Updates an element or folder in your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
**Note:**

You can only pass one element object type per call. For example, you cannot pass both `api` and `collection` in a single request.

 * @param {string} elementId - The element's ID or UUID. For Postman Collections you must pass the collection's UID (`userId`-`collectionId`) value.
 * @param {UpdatePanElementOrFolderElementType} elementType - The element type.
 * @returns {Promise<HttpResponse<UpdatePanElementOrFolderOkResponse>>} Successful Response
 */
  async updatePanElementOrFolder(
    elementId: string,
    elementType: UpdatePanElementOrFolderElementType,
    body: UpdatePanElementOrFolderRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<UpdatePanElementOrFolderOkResponse>> {
    const path = this.client.buildPath('/network/private/{elementType}/{elementId}', {
      elementId: elementId,
      elementType: elementType,
    });
    const options: any = {
      responseSchema: updatePanElementOrFolderOkResponseResponse,
      requestSchema: updatePanElementOrFolderRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
 * Removes an element or delete a folder from your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).**Note:**
Removing an API, collection, or workspace element does not delete it. It only removes it from the Private API Network folder.

 * @param {string} elementId - The element's ID or UUID. For Postman Collections you must pass the collection's UID (`userId`-`collectionId`) value.
 * @param {UpdatePanElementOrFolderElementType} elementType - The element type.
 * @returns {Promise<HttpResponse<DeletePanElementOrFolder>>} Successful Response
 */
  async deletePanElementOrFolder(
    elementId: string,
    elementType: UpdatePanElementOrFolderElementType,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<DeletePanElementOrFolder>> {
    const path = this.client.buildPath('/network/private/{elementType}/{elementId}', {
      elementId: elementId,
      elementType: elementType,
    });
    const options: any = {
      responseSchema: deletePanElementOrFolderResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.delete(path, options);
  }

  /**
   * Gets a list requests to add elements to the [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
   * @param {string} [since] - Return only results created since the given time, in [ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) format. This value cannot be later than the `until` value.
   * @param {string} [until] - Return only results created until this given time, in [ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) format. This value cannot be earlier than the `since` value.
   * @param {number} [requestedBy] - Return a user's element requests by their user ID.
   * @param {GetAllElementsAndFoldersType} [type_] - Filter by the element type.
   * @param {GetAllPanAddElementRequestsStatus} [status] - Filter by the request status.
   * @param {string} [name] - Return only elements whose name includes the given value. Matching is not case-sensitive.
   * @param {GetAllElementsAndFoldersSort} [sort] - Sort the results by the given value. If you use this query parameter, you must also use the `direction` parameter.
   * @param {AscDesc} [direction] - Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive. If you use this query parameter, you must also use the `sort` parameter.
   * @param {number} [offset] - The zero-based offset of the first item to return.
   * @param {number} [limit] - The maximum number of elements to return. If the value exceeds the maximum value of `1000`, then the system uses the `1000` value.
   * @returns {Promise<HttpResponse<GetAllPanAddElementRequests>>} Successful Response
   */
  async getAllPanAddElementRequests(
    params?: GetAllPanAddElementRequestsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetAllPanAddElementRequests>> {
    const path = '/network/private/network-entity/request/all';
    const options: any = {
      responseSchema: getAllPanAddElementRequestsResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.since) {
      options.queryParams['since'] = params?.since;
    }
    if (params?.until) {
      options.queryParams['until'] = params?.until;
    }
    if (params?.requestedBy) {
      options.queryParams['requestedBy'] = params?.requestedBy;
    }
    if (params?.type_) {
      options.queryParams['type'] = params?.type_;
    }
    if (params?.status) {
      options.queryParams['status'] = params?.status;
    }
    if (params?.name) {
      options.queryParams['name'] = params?.name;
    }
    if (params?.sort) {
      options.queryParams['sort'] = params?.sort;
    }
    if (params?.direction) {
      options.queryParams['direction'] = params?.direction;
    }
    if (params?.offset) {
      options.queryParams['offset'] = params?.offset;
    }
    if (params?.limit) {
      options.queryParams['limit'] = params?.limit;
    }
    return this.client.get(path, options);
  }

  /**
   * Responds to a request to add an element to the [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/). Only managers can approve or deny a request. Once approved, the element will appear in the team's Private API Network.
   * @param {number} requestId - The element request's ID.
   * @returns {Promise<HttpResponse<RespondPanElementAddRequestOkResponse>>} Successful Response
   */
  async respondPanElementAddRequest(
    requestId: number,
    body: PrivateApiNetworkRespondPanElementAddRequestRequest1,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<RespondPanElementAddRequestOkResponse>> {
    const path = this.client.buildPath('/network/private/network-entity/request/{requestId}', { requestId: requestId });
    const options: any = {
      responseSchema: respondPanElementAddRequestOkResponseResponse,
      requestSchema: privateApiNetworkRespondPanElementAddRequestRequest1Request,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }
}
