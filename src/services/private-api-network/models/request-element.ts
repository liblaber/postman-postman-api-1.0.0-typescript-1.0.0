// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { elementType2 } from './element-type-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const requestElement = z.object({
  id: z.string().optional(),
  createdAt: z.string().optional(),
  createdBy: z.number().optional(),
  type_: elementType2.optional(),
  name: z.string().optional(),
  summary: z.string().optional(),
});

/**
 * Information about the requested element.
 * @typedef  {RequestElement} requestElement - Information about the requested element. - Information about the requested element.
 * @property {string} - The element's ID.
 * @property {string} - The date and time at which the element was approved and added to the Private API Network.
 * @property {number} - The user ID of the user who requested to add the element to the Private API Network.
 * @property {ElementType2} - The element type.
 * @property {string} - The element's name.
 * @property {string} - If applicable, the element's short summary.
 */
export type RequestElement = z.infer<typeof requestElement>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const requestElementResponse = z
  .object({
    id: z.string().optional(),
    createdAt: z.string().optional(),
    createdBy: z.number().optional(),
    type: elementType2.optional(),
    name: z.string().optional(),
    summary: z.string().optional(),
  })
  .transform((data) => ({
    id: data['id'],
    createdAt: data['createdAt'],
    createdBy: data['createdBy'],
    type_: data['type'],
    name: data['name'],
    summary: data['summary'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const requestElementRequest = z
  .object({
    id: z.string().nullish(),
    createdAt: z.string().nullish(),
    createdBy: z.number().nullish(),
    type_: elementType2.nullish(),
    name: z.string().nullish(),
    summary: z.string().nullish(),
  })
  .transform((data) => ({
    id: data['id'],
    createdAt: data['createdAt'],
    createdBy: data['createdBy'],
    type: data['type_'],
    name: data['name'],
    summary: data['summary'],
  }));
