// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  panCreateCollectionCollection,
  panCreateCollectionCollectionRequest,
  panCreateCollectionCollectionResponse,
} from './pan-create-collection-collection';

/**
 * The shape of the model inside the application code - what the users use
 */
export const panCreateCollection: any = z.lazy(() => {
  return z.object({
    collection: panCreateCollectionCollection.optional(),
  });
});

/**
 *
 * @typedef  {PanCreateCollection} panCreateCollection
 * @property {PanCreateCollectionCollection}
 */
export type PanCreateCollection = z.infer<typeof panCreateCollection>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const panCreateCollectionResponse: any = z.lazy(() => {
  return z
    .object({
      collection: panCreateCollectionCollectionResponse.optional(),
    })
    .transform((data) => ({
      collection: data['collection'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const panCreateCollectionRequest: any = z.lazy(() => {
  return z.object({ collection: panCreateCollectionCollectionRequest.nullish() }).transform((data) => ({
    collection: data['collection'],
  }));
});
