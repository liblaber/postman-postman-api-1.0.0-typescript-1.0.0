// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  getAllPanAddElementRequestsRequests,
  getAllPanAddElementRequestsRequestsRequest,
  getAllPanAddElementRequestsRequestsResponse,
} from './get-all-pan-add-element-requests-requests';
import {
  getAllPanAddElementRequestsMeta,
  getAllPanAddElementRequestsMetaRequest,
  getAllPanAddElementRequestsMetaResponse,
} from './get-all-pan-add-element-requests-meta';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getAllPanAddElementRequests = z.object({
  requests: z.array(getAllPanAddElementRequestsRequests).optional(),
  meta: getAllPanAddElementRequestsMeta.optional(),
});

/**
 *
 * @typedef  {GetAllPanAddElementRequests} getAllPanAddElementRequests
 * @property {GetAllPanAddElementRequestsRequests[]} - Information about the requests to add elements to the Private API Network.
 * @property {GetAllPanAddElementRequestsMeta} - The response's non-standard meta information.
 */
export type GetAllPanAddElementRequests = z.infer<typeof getAllPanAddElementRequests>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getAllPanAddElementRequestsResponse = z
  .object({
    requests: z.array(getAllPanAddElementRequestsRequestsResponse).optional(),
    meta: getAllPanAddElementRequestsMetaResponse.optional(),
  })
  .transform((data) => ({
    requests: data['requests'],
    meta: data['meta'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getAllPanAddElementRequestsRequest = z
  .object({
    requests: z.array(getAllPanAddElementRequestsRequestsRequest).nullish(),
    meta: getAllPanAddElementRequestsMetaRequest.nullish(),
  })
  .transform((data) => ({
    requests: data['requests'],
    meta: data['meta'],
  }));
