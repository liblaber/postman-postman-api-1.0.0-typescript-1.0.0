// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updatePanFolderFolder = z.lazy(() => {
  return z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    parentFolderId: z.number().optional(),
  });
});

/**
 *
 * @typedef  {UpdatePanFolderFolder} updatePanFolderFolder
 * @property {string} - The folder's new name.
 * @property {string} - The folder's updated description.
 * @property {number} - The folder's new parent folder ID.
 */
export type UpdatePanFolderFolder = z.infer<typeof updatePanFolderFolder>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updatePanFolderFolderResponse = z.lazy(() => {
  return z
    .object({
      name: z.string().optional(),
      description: z.string().optional(),
      parentFolderId: z.number().optional(),
    })
    .transform((data) => ({
      name: data['name'],
      description: data['description'],
      parentFolderId: data['parentFolderId'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updatePanFolderFolderRequest = z.lazy(() => {
  return z
    .object({ name: z.string().nullish(), description: z.string().nullish(), parentFolderId: z.number().nullish() })
    .transform((data) => ({
      name: data['name'],
      description: data['description'],
      parentFolderId: data['parentFolderId'],
    }));
});
