// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getAllPanAddElementRequestsMeta = z.object({
  limit: z.number().optional(),
  offset: z.number().optional(),
  totalCount: z.number().optional(),
});

/**
 * The response's non-standard meta information.
 * @typedef  {GetAllPanAddElementRequestsMeta} getAllPanAddElementRequestsMeta - The response's non-standard meta information. - The response's non-standard meta information.
 * @property {number} - The maximum number of items returned.
 * @property {number} - The zero-based offset of the first item returned.
 * @property {number} - The total count of items found.
 */
export type GetAllPanAddElementRequestsMeta = z.infer<typeof getAllPanAddElementRequestsMeta>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getAllPanAddElementRequestsMetaResponse = z
  .object({
    limit: z.number().optional(),
    offset: z.number().optional(),
    totalCount: z.number().optional(),
  })
  .transform((data) => ({
    limit: data['limit'],
    offset: data['offset'],
    totalCount: data['totalCount'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getAllPanAddElementRequestsMetaRequest = z
  .object({ limit: z.number().nullish(), offset: z.number().nullish(), totalCount: z.number().nullish() })
  .transform((data) => ({
    limit: data['limit'],
    offset: data['offset'],
    totalCount: data['totalCount'],
  }));
