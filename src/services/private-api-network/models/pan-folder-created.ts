// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const panFolderCreated = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    parentFolderId: z.number().optional(),
    updatedAt: z.string().optional(),
    updatedBy: z.number().optional(),
    createdBy: z.number().optional(),
    createdAt: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    type: z.string().optional(),
  });
});

/**
 * Information about the Private API Network folder.
 * @typedef  {PanFolderCreated} panFolderCreated - Information about the Private API Network folder. - Information about the Private API Network folder.
 * @property {number} - The folder's ID.
 * @property {number} - The parent folder ID.
 * @property {string} - The date and time at which the folder was updated.
 * @property {number} - The user who updated the folder.
 * @property {number} - The user who created the folder.
 * @property {string} - The date and time at which the element was created.
 * @property {string} - The folder's name.
 * @property {string} - The folder's description.
 * @property {string} - The folder's type. This is always the `folder` value.
 */
export type PanFolderCreated = z.infer<typeof panFolderCreated>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const panFolderCreatedResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      parentFolderId: z.number().optional(),
      updatedAt: z.string().optional(),
      updatedBy: z.number().optional(),
      createdBy: z.number().optional(),
      createdAt: z.string().optional(),
      name: z.string().optional(),
      description: z.string().optional(),
      type: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      parentFolderId: data['parentFolderId'],
      updatedAt: data['updatedAt'],
      updatedBy: data['updatedBy'],
      createdBy: data['createdBy'],
      createdAt: data['createdAt'],
      name: data['name'],
      description: data['description'],
      type: data['type'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const panFolderCreatedRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().nullish(),
      parentFolderId: z.number().nullish(),
      updatedAt: z.string().nullish(),
      updatedBy: z.number().nullish(),
      createdBy: z.number().nullish(),
      createdAt: z.string().nullish(),
      name: z.string().nullish(),
      description: z.string().nullish(),
      type: z.string().nullish(),
    })
    .transform((data) => ({
      id: data['id'],
      parentFolderId: data['parentFolderId'],
      updatedAt: data['updatedAt'],
      updatedBy: data['updatedBy'],
      createdBy: data['createdBy'],
      createdAt: data['createdAt'],
      name: data['name'],
      description: data['description'],
      type: data['type'],
    }));
});
