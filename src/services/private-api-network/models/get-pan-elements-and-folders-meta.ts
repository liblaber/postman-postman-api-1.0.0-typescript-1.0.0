// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getPanElementsAndFoldersMeta = z.lazy(() => {
  return z.object({
    limit: z.number().optional(),
    offset: z.number().optional(),
    totalCount: z.number().optional(),
  });
});

/**
 * The response's non-standard meta information.
 * @typedef  {GetPanElementsAndFoldersMeta} getPanElementsAndFoldersMeta - The response's non-standard meta information. - The response's non-standard meta information.
 * @property {number} - The maximum number of elements returned. If the value exceeds the maximum value of `1000`, then the system uses the `1000` value.
 * @property {number} - The zero-based offset of the first item returned.
 * @property {number} - The total count of the `elements` and `folders` items.
 */
export type GetPanElementsAndFoldersMeta = z.infer<typeof getPanElementsAndFoldersMeta>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getPanElementsAndFoldersMetaResponse = z.lazy(() => {
  return z
    .object({
      limit: z.number().optional(),
      offset: z.number().optional(),
      totalCount: z.number().optional(),
    })
    .transform((data) => ({
      limit: data['limit'],
      offset: data['offset'],
      totalCount: data['totalCount'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getPanElementsAndFoldersMetaRequest = z.lazy(() => {
  return z
    .object({ limit: z.number().nullish(), offset: z.number().nullish(), totalCount: z.number().nullish() })
    .transform((data) => ({
      limit: data['limit'],
      offset: data['offset'],
      totalCount: data['totalCount'],
    }));
});
