// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { requestResponse, requestResponseRequest, requestResponseResponse } from './request-response';
import { requestElement, requestElementRequest, requestElementResponse } from './request-element';

/**
 * The shape of the model inside the application code - what the users use
 */
export const respondPanElementAddRequestRequest2 = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    createdAt: z.string().optional(),
    createdBy: z.number().optional(),
    message: z.string().optional(),
    response: requestResponse.optional(),
    element: requestElement.optional(),
    status: z.string().optional(),
  });
});

/**
 *
 * @typedef  {RespondPanElementAddRequestRequest2} respondPanElementAddRequestRequest2
 * @property {number} - The request's ID.
 * @property {string} - The date and time at which the request was created.
 * @property {number} - The ID of the user who created the request.
 * @property {string} - The user's optional message included in the request.
 * @property {RequestResponse} - Information about the response to the element's request. This object only returns when the network manager denied a request with a message.
 * @property {RequestElement} - Information about the requested element.
 * @property {RequestStatus} - The request's status.
 */
export type RespondPanElementAddRequestRequest2 = z.infer<typeof respondPanElementAddRequestRequest2>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const respondPanElementAddRequestRequest2Response = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      createdAt: z.string().optional(),
      createdBy: z.number().optional(),
      message: z.string().optional(),
      response: requestResponseResponse.optional(),
      element: requestElementResponse.optional(),
      status: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      createdAt: data['createdAt'],
      createdBy: data['createdBy'],
      message: data['message'],
      response: data['response'],
      element: data['element'],
      status: data['status'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const respondPanElementAddRequestRequest2Request = z.lazy(() => {
  return z
    .object({
      id: z.number().nullish(),
      createdAt: z.string().nullish(),
      createdBy: z.number().nullish(),
      message: z.string().nullish(),
      response: requestResponseRequest.nullish(),
      element: requestElementRequest.nullish(),
      status: z.string().nullish(),
    })
    .transform((data) => ({
      id: data['id'],
      createdAt: data['createdAt'],
      createdBy: data['createdBy'],
      message: data['message'],
      response: data['response'],
      element: data['element'],
      status: data['status'],
    }));
});
