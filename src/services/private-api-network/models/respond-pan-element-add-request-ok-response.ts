// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  respondPanElementAddRequestRequest2,
  respondPanElementAddRequestRequest2Request,
  respondPanElementAddRequestRequest2Response,
} from './respond-pan-element-add-request-request-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const respondPanElementAddRequestOkResponse: any = z.lazy(() => {
  return z.object({
    request: z.array(respondPanElementAddRequestRequest2).optional(),
  });
});

/**
 *
 * @typedef  {RespondPanElementAddRequestOkResponse} respondPanElementAddRequestOkResponse
 * @property {RespondPanElementAddRequestRequest2[]} - Information about the Private API Network request.
 */
export type RespondPanElementAddRequestOkResponse = z.infer<typeof respondPanElementAddRequestOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const respondPanElementAddRequestOkResponseResponse: any = z.lazy(() => {
  return z
    .object({
      request: z.array(respondPanElementAddRequestRequest2Response).optional(),
    })
    .transform((data) => ({
      request: data['request'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const respondPanElementAddRequestOkResponseRequest: any = z.lazy(() => {
  return z.object({ request: z.array(respondPanElementAddRequestRequest2Request).nullish() }).transform((data) => ({
    request: data['request'],
  }));
});
