// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const requestsElement: any = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    type: z.string().optional(),
    name: z.string().optional(),
    summary: z.string().optional().nullable(),
  });
});

/**
 * Information about the requested element.
 * @typedef  {RequestsElement} requestsElement - Information about the requested element. - Information about the requested element.
 * @property {string} - The element's ID.
 * @property {ElementType1} - The element type.
 * @property {string} - The element's name.
 * @property {string} - If applicable, the element's short summary.
 */
export type RequestsElement = z.infer<typeof requestsElement>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const requestsElementResponse: any = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      type: z.string().optional(),
      name: z.string().optional(),
      summary: z.string().optional().nullable(),
    })
    .transform((data) => ({
      id: data['id'],
      type: data['type'],
      name: data['name'],
      summary: data['summary'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const requestsElementRequest: any = z.lazy(() => {
  return z
    .object({
      id: z.string().nullish(),
      type: z.string().nullish(),
      name: z.string().nullish(),
      summary: z.string().nullish(),
    })
    .transform((data) => ({
      id: data['id'],
      type: data['type'],
      name: data['name'],
      summary: data['summary'],
    }));
});
