// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { elements, elementsRequest, elementsResponse } from './elements';
import { folders, foldersRequest, foldersResponse } from './folders';
import {
  getPanElementsAndFoldersMeta,
  getPanElementsAndFoldersMetaRequest,
  getPanElementsAndFoldersMetaResponse,
} from './get-pan-elements-and-folders-meta';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getPanElementsAndFolders: any = z.lazy(() => {
  return z.object({
    elements: z.array(elements).optional(),
    folders: z.array(folders).optional(),
    meta: getPanElementsAndFoldersMeta.optional(),
  });
});

/**
 *
 * @typedef  {GetPanElementsAndFolders} getPanElementsAndFolders
 * @property {Elements[]} - Information about a Private API Network's folder elements. Elements are APIs, collections, and workspaces.
 * @property {Folders[]} - Information about the Private API Network's folders.
 * @property {GetPanElementsAndFoldersMeta} - The response's non-standard meta information.
 */
export type GetPanElementsAndFolders = z.infer<typeof getPanElementsAndFolders>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getPanElementsAndFoldersResponse: any = z.lazy(() => {
  return z
    .object({
      elements: z.array(elementsResponse).optional(),
      folders: z.array(foldersResponse).optional(),
      meta: getPanElementsAndFoldersMetaResponse.optional(),
    })
    .transform((data) => ({
      elements: data['elements'],
      folders: data['folders'],
      meta: data['meta'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getPanElementsAndFoldersRequest: any = z.lazy(() => {
  return z
    .object({
      elements: z.array(elementsRequest).nullish(),
      folders: z.array(foldersRequest).nullish(),
      meta: getPanElementsAndFoldersMetaRequest.nullish(),
    })
    .transform((data) => ({
      elements: data['elements'],
      folders: data['folders'],
      meta: data['meta'],
    }));
});
