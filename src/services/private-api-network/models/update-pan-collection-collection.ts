// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  collectionEnvironments,
  collectionEnvironmentsRequest,
  collectionEnvironmentsResponse,
} from './collection-environments';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updatePanCollectionCollection: any = z.lazy(() => {
  return z.object({
    parentFolderId: z.number().optional(),
    environments: collectionEnvironments.optional(),
  });
});

/**
 *
 * @typedef  {UpdatePanCollectionCollection} updatePanCollectionCollection
 * @property {number} - The collection's new parent folder ID.
 * @property {CollectionEnvironments} - The collection's updated environments.
 */
export type UpdatePanCollectionCollection = z.infer<typeof updatePanCollectionCollection>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updatePanCollectionCollectionResponse: any = z.lazy(() => {
  return z
    .object({
      parentFolderId: z.number().optional(),
      environments: collectionEnvironmentsResponse.optional(),
    })
    .transform((data) => ({
      parentFolderId: data['parentFolderId'],
      environments: data['environments'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updatePanCollectionCollectionRequest: any = z.lazy(() => {
  return z
    .object({ parentFolderId: z.number().nullish(), environments: collectionEnvironmentsRequest.nullish() })
    .transform((data) => ({
      parentFolderId: data['parentFolderId'],
      environments: data['environments'],
    }));
});
