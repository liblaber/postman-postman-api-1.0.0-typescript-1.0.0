// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const panCreateCollectionCollection = z.object({
  id: z.string(),
  parentFolderId: z.number(),
  environments: z.array(z.string()).optional(),
});

/**
 *
 * @typedef  {PanCreateCollectionCollection} panCreateCollectionCollection
 * @property {string} - The collection's ID.
 * @property {number} - The collection's parent folder ID.
 * @property {string[]} - A list of environment UIDs (`userId`-`environmentId``) to add to the collection.
 */
export type PanCreateCollectionCollection = z.infer<typeof panCreateCollectionCollection>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const panCreateCollectionCollectionResponse = z
  .object({
    id: z.string(),
    parentFolderId: z.number(),
    environments: z.array(z.string()).optional(),
  })
  .transform((data) => ({
    id: data['id'],
    parentFolderId: data['parentFolderId'],
    environments: data['environments'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const panCreateCollectionCollectionRequest = z
  .object({
    id: z.string().nullish(),
    parentFolderId: z.number().nullish(),
    environments: z.array(z.string()).nullish(),
  })
  .transform((data) => ({
    id: data['id'],
    parentFolderId: data['parentFolderId'],
    environments: data['environments'],
  }));
