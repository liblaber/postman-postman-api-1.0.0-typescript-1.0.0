// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const deletePanElementOrFolderElementType = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
  });
});

/**
 * The Private API Network element type. The name of the object is the element `api`, `collection`, `workspace`, or `folder` type.
 * @typedef  {DeletePanElementOrFolderElementType} deletePanElementOrFolderElementType - The Private API Network element type. The name of the object is the element `api`, `collection`, `workspace`, or `folder` type. - The Private API Network element type. The name of the object is the element `api`, `collection`, `workspace`, or `folder` type.
 * @property {string} - The element's ID.
 */
export type DeletePanElementOrFolderElementType = z.infer<typeof deletePanElementOrFolderElementType>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const deletePanElementOrFolderElementTypeResponse = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const deletePanElementOrFolderElementTypeRequest = z.lazy(() => {
  return z.object({ id: z.string().nullish() }).transform((data) => ({
    id: data['id'],
  }));
});
