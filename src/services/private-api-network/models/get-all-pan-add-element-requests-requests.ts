// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { requestsElement, requestsElementRequest, requestsElementResponse } from './requests-element';
import { requestsResponse, requestsResponseRequest, requestsResponseResponse } from './requests-response';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getAllPanAddElementRequestsRequests: any = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    createdAt: z.string().optional(),
    createdBy: z.number().optional(),
    message: z.string().optional(),
    status: z.string().optional(),
    element: requestsElement.optional(),
    response: requestsResponse.optional(),
  });
});

/**
 *
 * @typedef  {GetAllPanAddElementRequestsRequests} getAllPanAddElementRequestsRequests
 * @property {number} - The request's ID.
 * @property {string} - The date and time at which the request was created.
 * @property {number} - The ID of the user who created the request.
 * @property {string} - The user's optional message included in the request.
 * @property {RequestsStatus} - The request's status.
 * @property {RequestsElement} - Information about the requested element.
 * @property {RequestsResponse} - Information about the response to the request. This object only returns when the network manager denied a request with a message.
 */
export type GetAllPanAddElementRequestsRequests = z.infer<typeof getAllPanAddElementRequestsRequests>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getAllPanAddElementRequestsRequestsResponse: any = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      createdAt: z.string().optional(),
      createdBy: z.number().optional(),
      message: z.string().optional(),
      status: z.string().optional(),
      element: requestsElementResponse.optional(),
      response: requestsResponseResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      createdAt: data['createdAt'],
      createdBy: data['createdBy'],
      message: data['message'],
      status: data['status'],
      element: data['element'],
      response: data['response'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getAllPanAddElementRequestsRequestsRequest: any = z.lazy(() => {
  return z
    .object({
      id: z.number().nullish(),
      createdAt: z.string().nullish(),
      createdBy: z.number().nullish(),
      message: z.string().nullish(),
      status: z.string().nullish(),
      element: requestsElementRequest.nullish(),
      response: requestsResponseRequest.nullish(),
    })
    .transform((data) => ({
      id: data['id'],
      createdAt: data['createdAt'],
      createdBy: data['createdBy'],
      message: data['message'],
      status: data['status'],
      element: data['element'],
      response: data['response'],
    }));
});
