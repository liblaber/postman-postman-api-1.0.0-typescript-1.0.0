// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  importOpenApiDefinitionCollections,
  importOpenApiDefinitionCollectionsRequest,
  importOpenApiDefinitionCollectionsResponse,
} from './import-open-api-definition-collections';

/**
 * The shape of the model inside the application code - what the users use
 */
export const importOpenApiDefinitionOkResponse = z.object({
  collections: z.array(importOpenApiDefinitionCollections).optional(),
});

/**
 *
 * @typedef  {ImportOpenApiDefinitionOkResponse} importOpenApiDefinitionOkResponse
 * @property {ImportOpenApiDefinitionCollections[]}
 */
export type ImportOpenApiDefinitionOkResponse = z.infer<typeof importOpenApiDefinitionOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const importOpenApiDefinitionOkResponseResponse = z
  .object({
    collections: z.array(importOpenApiDefinitionCollectionsResponse).optional(),
  })
  .transform((data) => ({
    collections: data['collections'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const importOpenApiDefinitionOkResponseRequest = z
  .object({ collections: z.array(importOpenApiDefinitionCollectionsRequest).nullish() })
  .transform((data) => ({
    collections: data['collections'],
  }));
