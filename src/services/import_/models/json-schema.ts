// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { jsonSchemaType } from './json-schema-type';

/**
 * The shape of the model inside the application code - what the users use
 */
export const jsonSchema = z.object({
  type_: jsonSchemaType,
  input: z.any(),
  options: z.any().optional(),
});

/**
 *
 * @typedef  {JsonSchema} jsonSchema
 * @property {JsonSchemaType} - The OpenAPI definition type.
 * @property {any} - An object that contains a valid JSON OpenAPI definition. For more information, read the [OpenAPI documentation](https://swagger.io/docs/specification/basic-structure/).
 * @property {any} - An object that contains advanced creation options and their values. You can find a complete list of properties and their values in Postman's [OpenAPI 3.0 to Postman Collection v2.1.0 Converter OPTIONS documentation](https://github.com/postmanlabs/openapi-to-postman/blob/develop/OPTIONS.md). These properties are case-sensitive.
 */
export type JsonSchema = z.infer<typeof jsonSchema>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const jsonSchemaResponse = z
  .object({
    type: jsonSchemaType,
    input: z.any(),
    options: z.any().optional(),
  })
  .transform((data) => ({
    type_: data['type'],
    input: data['input'],
    options: data['options'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const jsonSchemaRequest = z
  .object({ type_: jsonSchemaType.nullish(), input: z.any().nullish(), options: z.any().nullish() })
  .transform((data) => ({
    type: data['type_'],
    input: data['input'],
    options: data['options'],
  }));
