// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { jsonSchema, jsonSchemaRequest, jsonSchemaResponse } from './json-schema';
import { jsonStringified, jsonStringifiedRequest, jsonStringifiedResponse } from './json-stringified';

/**
 * The shape of the model inside the application code - what the users use
 */
export const importOpenApiDefinitionRequest = z.lazy(() => {
  return z.union([jsonSchema, jsonStringified]);
});

/**
 *
 * @typedef  {ImportOpenApiDefinitionRequest} importOpenApiDefinitionRequest
 * @property {JsonSchema}
 * @property {JsonStringified}
 */
export type ImportOpenApiDefinitionRequest = z.infer<typeof importOpenApiDefinitionRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const importOpenApiDefinitionRequestResponse = z.lazy(() => {
  return z.union([jsonSchemaResponse, jsonStringifiedResponse]);
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const importOpenApiDefinitionRequestRequest = z.lazy(() => {
  return z.union([jsonSchemaRequest, jsonStringifiedRequest]);
});
