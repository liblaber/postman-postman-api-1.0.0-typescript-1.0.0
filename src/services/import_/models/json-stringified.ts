// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const jsonStringified: any = z.lazy(() => {
  return z.object({
    type: z.string().optional(),
    input: z.string().optional(),
    options: z.any().optional(),
  });
});

/**
 *
 * @typedef  {JsonStringified} jsonStringified
 * @property {JsonStringifiedType} - The OpenAPI definition type.
 * @property {string} - The stringified OpenAPI definition.
 * @property {any} - An object that contains advanced creation options and their values. You can find a complete list of properties and their values in Postman's [OpenAPI 3.0 to Postman Collection v2.1.0 Converter OPTIONS documentation](https://github.com/postmanlabs/openapi-to-postman/blob/develop/OPTIONS.md). These properties are case-sensitive.
 */
export type JsonStringified = z.infer<typeof jsonStringified>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const jsonStringifiedResponse: any = z.lazy(() => {
  return z
    .object({
      type: z.string().optional(),
      input: z.string().optional(),
      options: z.any().optional(),
    })
    .transform((data) => ({
      type: data['type'],
      input: data['input'],
      options: data['options'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const jsonStringifiedRequest: any = z.lazy(() => {
  return z
    .object({ type: z.string().nullish(), input: z.string().nullish(), options: z.any().nullish() })
    .transform((data) => ({
      type: data['type'],
      input: data['input'],
      options: data['options'],
    }));
});
