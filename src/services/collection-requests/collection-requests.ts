// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { Request } from '../../http/transport/request';
import { CommentResponse, commentResponseResponse } from '../common/comment-response';
import { CommentCreateUpdate, commentCreateUpdateRequest } from '../common/comment-create-update';
import { CommentCreatedUpdated, commentCreatedUpdatedResponse } from '../common/comment-created-updated';

export class CollectionRequestsService extends BaseService {
  /**
   * Gets all comments left by users in a request.
   * @param {string} collectionId - The collection's unique ID.
   * @param {string} requestId - The request's unique ID.
   * @returns {Promise<HttpResponse<CommentResponse>>} Successful Response
   */
  async getRequestComments(
    collectionId: string,
    requestId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CommentResponse>> {
    const request = new Request({
      method: 'GET',
      path: '/collections/{collectionId}/requests/{requestId}/comments',
      config: this.config,
      responseSchema: commentResponseResponse,
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('collectionId', collectionId);
    request.addPathParam('requestId', requestId);
    return this.client.call<CommentResponse>(request);
  }

  /**
 * Creates a comment on a request.
**Note:**

This endpoint accepts a max of 10,000 characters.

 * @param {string} collectionId - The collection's unique ID.
 * @param {string} requestId - The request's unique ID.
 * @returns {Promise<HttpResponse<CommentCreatedUpdated>>} Created
 */
  async createRequestComment(
    collectionId: string,
    requestId: string,
    body: CommentCreateUpdate,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CommentCreatedUpdated>> {
    const request = new Request({
      method: 'POST',
      body,
      path: '/collections/{collectionId}/requests/{requestId}/comments',
      config: this.config,
      responseSchema: commentCreatedUpdatedResponse,
      requestSchema: commentCreateUpdateRequest,
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('collectionId', collectionId);
    request.addPathParam('requestId', requestId);
    request.addHeaderParam('Content-Type', 'application/json');
    return this.client.call<CommentCreatedUpdated>(request);
  }

  /**
 * Updates a comment on a request.
**Note:**

This endpoint accepts a max of 10,000 characters.

 * @param {string} collectionId - The collection's unique ID.
 * @param {string} requestId - The request's unique ID.
 * @param {number} commentId - The comment's ID.
 * @returns {Promise<HttpResponse<CommentCreatedUpdated>>} Successful Response
 */
  async updateRequestComment(
    collectionId: string,
    requestId: string,
    commentId: number,
    body: CommentCreateUpdate,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CommentCreatedUpdated>> {
    const request = new Request({
      method: 'PUT',
      body,
      path: '/collections/{collectionId}/requests/{requestId}/comments/{commentId}',
      config: this.config,
      responseSchema: commentCreatedUpdatedResponse,
      requestSchema: commentCreateUpdateRequest,
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('collectionId', collectionId);
    request.addPathParam('requestId', requestId);
    request.addPathParam('commentId', commentId);
    request.addHeaderParam('Content-Type', 'application/json');
    return this.client.call<CommentCreatedUpdated>(request);
  }

  /**
 * Deletes a comment from a request. On success, this returns an HTTP `204 No Content` response
**Note:**

Deleting the first comment of a thread deletes all the comments in the thread.

 * @param {string} collectionId - The collection's unique ID.
 * @param {string} requestId - The request's unique ID.
 * @param {number} commentId - The comment's ID.
 * @returns {Promise<HttpResponse<any>>} No Content
 */
  async deleteRequestComment(
    collectionId: string,
    requestId: string,
    commentId: number,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<undefined>> {
    const request = new Request({
      method: 'DELETE',
      path: '/collections/{collectionId}/requests/{requestId}/comments/{commentId}',
      config: this.config,
      responseSchema: z.undefined(),
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('collectionId', collectionId);
    request.addPathParam('requestId', requestId);
    request.addPathParam('commentId', commentId);
    return this.client.call<undefined>(request);
  }
}
