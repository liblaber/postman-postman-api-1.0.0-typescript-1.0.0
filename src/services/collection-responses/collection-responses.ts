// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { CommentResponse, commentResponseResponse } from '../common/comment-response';
import { CommentCreateUpdate, commentCreateUpdateRequest } from '../common/comment-create-update';
import { CommentCreatedUpdated, commentCreatedUpdatedResponse } from '../common/comment-created-updated';

export class CollectionResponsesService extends BaseService {
  /**
   * Gets all comments left by users in a response.
   * @param {string} collectionId - The collection's unique ID.
   * @param {string} responseId - The response's unique ID.
   * @returns {Promise<HttpResponse<CommentResponse>>} Successful Response
   */
  async getResponseComments(
    collectionId: string,
    responseId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CommentResponse>> {
    const request = new RequestBuilder<CommentResponse>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/collections/{collectionId}/responses/{responseId}/comments')
      .setRequestSchema(z.any())
      .setResponseSchema(commentResponseResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'collectionId',
        value: collectionId,
      })
      .addPathParam({
        key: 'responseId',
        value: responseId,
      })
      .build();
    return this.client.call<CommentResponse>(request);
  }

  /**
 * Creates a comment on a response.
**Note:**

This endpoint accepts a max of 10,000 characters.

 * @param {string} collectionId - The collection's unique ID.
 * @param {string} responseId - The response's unique ID.
 * @returns {Promise<HttpResponse<CommentCreatedUpdated>>} Created
 */
  async createResponseComment(
    collectionId: string,
    responseId: string,
    body: CommentCreateUpdate,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CommentCreatedUpdated>> {
    const request = new RequestBuilder<CommentCreatedUpdated>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('POST')
      .setPath('/collections/{collectionId}/responses/{responseId}/comments')
      .setRequestSchema(commentCreateUpdateRequest)
      .setResponseSchema(commentCreatedUpdatedResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'collectionId',
        value: collectionId,
      })
      .addPathParam({
        key: 'responseId',
        value: responseId,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<CommentCreatedUpdated>(request);
  }

  /**
 * Updates a comment on a response.
**Note:**

This endpoint accepts a max of 10,000 characters.

 * @param {string} collectionId - The collection's unique ID.
 * @param {string} responseId - The response's unique ID.
 * @param {number} commentId - The comment's ID.
 * @returns {Promise<HttpResponse<CommentCreatedUpdated>>} Successful Response
 */
  async updateResponseComment(
    collectionId: string,
    responseId: string,
    commentId: number,
    body: CommentCreateUpdate,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CommentCreatedUpdated>> {
    const request = new RequestBuilder<CommentCreatedUpdated>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('PUT')
      .setPath('/collections/{collectionId}/responses/{responseId}/comments/{commentId}')
      .setRequestSchema(commentCreateUpdateRequest)
      .setResponseSchema(commentCreatedUpdatedResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'collectionId',
        value: collectionId,
      })
      .addPathParam({
        key: 'responseId',
        value: responseId,
      })
      .addPathParam({
        key: 'commentId',
        value: commentId,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<CommentCreatedUpdated>(request);
  }

  /**
 * Deletes a comment from a response. On success, this returns an HTTP `204 No Content` response
**Note:**

Deleting the first comment of a thread deletes all the comments in the thread.

 * @param {string} collectionId - The collection's unique ID.
 * @param {string} responseId - The response's unique ID.
 * @param {number} commentId - The comment's ID.
 * @returns {Promise<HttpResponse<any>>} No Content
 */
  async deleteResponseComment(
    collectionId: string,
    responseId: string,
    commentId: number,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<undefined>> {
    const request = new RequestBuilder<undefined>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('DELETE')
      .setPath('/collections/{collectionId}/responses/{responseId}/comments/{commentId}')
      .setRequestSchema(z.any())
      .setResponseSchema(z.undefined())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'collectionId',
        value: collectionId,
      })
      .addPathParam({
        key: 'responseId',
        value: responseId,
      })
      .addPathParam({
        key: 'commentId',
        value: commentId,
      })
      .build();
    return this.client.call<undefined>(request);
  }
}
