// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  createMonitorMonitor1,
  createMonitorMonitor1Request,
  createMonitorMonitor1Response,
} from './create-monitor-monitor-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createMonitorRequest = z.object({
  monitor: createMonitorMonitor1.optional(),
});

/**
 *
 * @typedef  {CreateMonitorRequest} createMonitorRequest
 * @property {CreateMonitorMonitor1}
 */
export type CreateMonitorRequest = z.infer<typeof createMonitorRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createMonitorRequestResponse = z
  .object({
    monitor: createMonitorMonitor1Response.optional(),
  })
  .transform((data) => ({
    monitor: data['monitor'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createMonitorRequestRequest = z
  .object({ monitor: createMonitorMonitor1Request.nullish() })
  .transform((data) => ({
    monitor: data['monitor'],
  }));
