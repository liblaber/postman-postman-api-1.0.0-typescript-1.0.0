// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { monitorSchedule3, monitorSchedule3Request, monitorSchedule3Response } from './monitor-schedule-3';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateMonitorMonitor1 = z.lazy(() => {
  return z.object({
    name: z.string().optional(),
    schedule: monitorSchedule3.optional(),
  });
});

/**
 *
 * @typedef  {UpdateMonitorMonitor1} updateMonitorMonitor1
 * @property {string} - The monitor's name.
 * @property {MonitorSchedule3} - Information about the monitor's schedule.
 */
export type UpdateMonitorMonitor1 = z.infer<typeof updateMonitorMonitor1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateMonitorMonitor1Response = z.lazy(() => {
  return z
    .object({
      name: z.string().optional(),
      schedule: monitorSchedule3Response.optional(),
    })
    .transform((data) => ({
      name: data['name'],
      schedule: data['schedule'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateMonitorMonitor1Request = z.lazy(() => {
  return z.object({ name: z.string().nullish(), schedule: monitorSchedule3Request.nullish() }).transform((data) => ({
    name: data['name'],
    schedule: data['schedule'],
  }));
});
