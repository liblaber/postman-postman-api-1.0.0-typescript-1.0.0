// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  createMonitorMonitor2,
  createMonitorMonitor2Request,
  createMonitorMonitor2Response,
} from './create-monitor-monitor-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createMonitorOkResponse: any = z.lazy(() => {
  return z.object({
    monitor: createMonitorMonitor2.optional(),
  });
});

/**
 *
 * @typedef  {CreateMonitorOkResponse} createMonitorOkResponse
 * @property {CreateMonitorMonitor2}
 */
export type CreateMonitorOkResponse = z.infer<typeof createMonitorOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createMonitorOkResponseResponse: any = z.lazy(() => {
  return z
    .object({
      monitor: createMonitorMonitor2Response.optional(),
    })
    .transform((data) => ({
      monitor: data['monitor'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createMonitorOkResponseRequest: any = z.lazy(() => {
  return z.object({ monitor: createMonitorMonitor2Request.nullish() }).transform((data) => ({
    monitor: data['monitor'],
  }));
});
