// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { lastRun, lastRunRequest, lastRunResponse } from './last-run';
import { notifications, notificationsRequest, notificationsResponse } from './notifications';
import { options, optionsRequest, optionsResponse } from './options';
import { monitorSchedule2, monitorSchedule2Request, monitorSchedule2Response } from './monitor-schedule-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getMonitorMonitor = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uid: z.string().optional(),
    owner: z.number().optional(),
    collectionUid: z.string().optional(),
    environmentUid: z.string().optional(),
    distribution: z.array(z.string()).optional(),
    lastRun: lastRun.optional(),
    notifications: notifications.optional(),
    options: options.optional(),
    schedule: monitorSchedule2.optional(),
  });
});

/**
 *
 * @typedef  {GetMonitorMonitor} getMonitorMonitor
 * @property {string} - The monitor's ID.
 * @property {string} - The monitor's name.
 * @property {string} - The monitor's unique ID.
 * @property {number} - The ID of monitor's owner.
 * @property {string} - The unique ID of the monitor's associated collection.
 * @property {string} - The unique ID of the monitor's associated environment.
 * @property {string[]} - A list of the monitor's [geographic regions](https://learning.postman.com/docs/monitoring-your-api/setting-up-monitor/#adding-regions).
 * @property {LastRun} - Information about the monitor's previous run.
 * @property {Notifications} - Information about the monitor's notification settings.
 * @property {Options} - Information about the monitor's option settings.
 * @property {MonitorSchedule2} - Information about the monitor's schedule.
 */
export type GetMonitorMonitor = z.infer<typeof getMonitorMonitor>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getMonitorMonitorResponse = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      name: z.string().optional(),
      uid: z.string().optional(),
      owner: z.number().optional(),
      collectionUid: z.string().optional(),
      environmentUid: z.string().optional(),
      distribution: z.array(z.string()).optional(),
      lastRun: lastRunResponse.optional(),
      notifications: notificationsResponse.optional(),
      options: optionsResponse.optional(),
      schedule: monitorSchedule2Response.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      uid: data['uid'],
      owner: data['owner'],
      collectionUid: data['collectionUid'],
      environmentUid: data['environmentUid'],
      distribution: data['distribution'],
      lastRun: data['lastRun'],
      notifications: data['notifications'],
      options: data['options'],
      schedule: data['schedule'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getMonitorMonitorRequest = z.lazy(() => {
  return z
    .object({
      id: z.string().nullish(),
      name: z.string().nullish(),
      uid: z.string().nullish(),
      owner: z.number().nullish(),
      collectionUid: z.string().nullish(),
      environmentUid: z.string().nullish(),
      distribution: z.array(z.string()).nullish(),
      lastRun: lastRunRequest.nullish(),
      notifications: notificationsRequest.nullish(),
      options: optionsRequest.nullish(),
      schedule: monitorSchedule2Request.nullish(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      uid: data['uid'],
      owner: data['owner'],
      collectionUid: data['collectionUid'],
      environmentUid: data['environmentUid'],
      distribution: data['distribution'],
      lastRun: data['lastRun'],
      notifications: data['notifications'],
      options: data['options'],
      schedule: data['schedule'],
    }));
});
