// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const runInfo = z.lazy(() => {
  return z.object({
    jobId: z.string().optional(),
    collectionUid: z.string().optional(),
    environmentUid: z.string().optional(),
    monitorId: z.string().optional(),
    name: z.string().optional(),
    status: z.string().optional(),
    startedAt: z.string().optional(),
    finishedAt: z.string().optional(),
  });
});

/**
 * Information about the monitor.
 * @typedef  {RunInfo} runInfo - Information about the monitor. - Information about the monitor.
 * @property {string} - The monitor's run job ID.
 * @property {string} - The unique ID of the monitor's associated collection.
 * @property {string} - The unique ID of the monitor's associated environment.
 * @property {string} - The monitor's ID.
 * @property {string} - The monitor's name.
 * @property {string} - The monitor run's status.
 * @property {string} - The date and time at which the monitor run began.
 * @property {string} - The date and time at which the monitor's run completed.
 */
export type RunInfo = z.infer<typeof runInfo>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const runInfoResponse = z.lazy(() => {
  return z
    .object({
      jobId: z.string().optional(),
      collectionUid: z.string().optional(),
      environmentUid: z.string().optional(),
      monitorId: z.string().optional(),
      name: z.string().optional(),
      status: z.string().optional(),
      startedAt: z.string().optional(),
      finishedAt: z.string().optional(),
    })
    .transform((data) => ({
      jobId: data['jobId'],
      collectionUid: data['collectionUid'],
      environmentUid: data['environmentUid'],
      monitorId: data['monitorId'],
      name: data['name'],
      status: data['status'],
      startedAt: data['startedAt'],
      finishedAt: data['finishedAt'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const runInfoRequest = z.lazy(() => {
  return z
    .object({
      jobId: z.string().nullish(),
      collectionUid: z.string().nullish(),
      environmentUid: z.string().nullish(),
      monitorId: z.string().nullish(),
      name: z.string().nullish(),
      status: z.string().nullish(),
      startedAt: z.string().nullish(),
      finishedAt: z.string().nullish(),
    })
    .transform((data) => ({
      jobId: data['jobId'],
      collectionUid: data['collectionUid'],
      environmentUid: data['environmentUid'],
      monitorId: data['monitorId'],
      name: data['name'],
      status: data['status'],
      startedAt: data['startedAt'],
      finishedAt: data['finishedAt'],
    }));
});
