// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  updateMonitorMonitor1,
  updateMonitorMonitor1Request,
  updateMonitorMonitor1Response,
} from './update-monitor-monitor-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateMonitorRequest = z.lazy(() => {
  return z.object({
    monitor: updateMonitorMonitor1.optional(),
  });
});

/**
 *
 * @typedef  {UpdateMonitorRequest} updateMonitorRequest
 * @property {UpdateMonitorMonitor1}
 */
export type UpdateMonitorRequest = z.infer<typeof updateMonitorRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateMonitorRequestResponse = z.lazy(() => {
  return z
    .object({
      monitor: updateMonitorMonitor1Response.optional(),
    })
    .transform((data) => ({
      monitor: data['monitor'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateMonitorRequestRequest = z.lazy(() => {
  return z.object({ monitor: updateMonitorMonitor1Request.nullish() }).transform((data) => ({
    monitor: data['monitor'],
  }));
});
