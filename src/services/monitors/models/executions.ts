// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { executionsItem, executionsItemRequest, executionsItemResponse } from './executions-item';
import { executionsRequest1, executionsRequest1Request, executionsRequest1Response } from './executions-request-1';
import { executionsResponse1, executionsResponse1Request, executionsResponse1Response } from './executions-response-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const executions = z.lazy(() => {
  return z.object({
    id: z.number().optional(),
    item: executionsItem.optional(),
    request: executionsRequest1.optional(),
    response: executionsResponse1.optional(),
  });
});

/**
 *
 * @typedef  {Executions} executions
 * @property {number} - The execution ID.
 * @property {ExecutionsItem} - Information about the executed item.
 * @property {ExecutionsRequest1} - Information about the monitor run's requests.
 * @property {ExecutionsResponse1} - Information about the monitor run's response.
 */
export type Executions = z.infer<typeof executions>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const executionsResponse = z.lazy(() => {
  return z
    .object({
      id: z.number().optional(),
      item: executionsItemResponse.optional(),
      request: executionsRequest1Response.optional(),
      response: executionsResponse1Response.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      item: data['item'],
      request: data['request'],
      response: data['response'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const executionsRequest = z.lazy(() => {
  return z
    .object({
      id: z.number().nullish(),
      item: executionsItemRequest.nullish(),
      request: executionsRequest1Request.nullish(),
      response: executionsResponse1Request.nullish(),
    })
    .transform((data) => ({
      id: data['id'],
      item: data['item'],
      request: data['request'],
      response: data['response'],
    }));
});
