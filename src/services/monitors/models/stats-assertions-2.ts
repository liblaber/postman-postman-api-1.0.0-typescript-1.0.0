// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const statsAssertions2 = z.lazy(() => {
  return z.object({
    total: z.number().optional(),
    failed: z.number().optional(),
  });
});

/**
 * The monitor run's assertions stats.
 * @typedef  {StatsAssertions2} statsAssertions2 - The monitor run's assertions stats. - The monitor run's assertions stats.
 * @property {number} - The total number of tests performed.
 * @property {number} - The total number of test failures.
 */
export type StatsAssertions2 = z.infer<typeof statsAssertions2>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const statsAssertions2Response = z.lazy(() => {
  return z
    .object({
      total: z.number().optional(),
      failed: z.number().optional(),
    })
    .transform((data) => ({
      total: data['total'],
      failed: data['failed'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const statsAssertions2Request = z.lazy(() => {
  return z.object({ total: z.number().nullish(), failed: z.number().nullish() }).transform((data) => ({
    total: data['total'],
    failed: data['failed'],
  }));
});
