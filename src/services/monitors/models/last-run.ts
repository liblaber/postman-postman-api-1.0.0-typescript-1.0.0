// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { lastRunStats, lastRunStatsRequest, lastRunStatsResponse } from './last-run-stats';

/**
 * The shape of the model inside the application code - what the users use
 */
export const lastRun: any = z.lazy(() => {
  return z.object({
    finishedAt: z.string().optional(),
    startedAt: z.string().optional(),
    stats: lastRunStats.optional(),
    status: z.string().optional(),
  });
});

/**
 * Information about the monitor's previous run.
 * @typedef  {LastRun} lastRun - Information about the monitor's previous run. - Information about the monitor's previous run.
 * @property {string} - The date and time at which the monitor's previous run completed.
 * @property {string} - The date and time at which the monitor's previous run started.
 * @property {LastRunStats} - Information about the monitor's stats.
 * @property {string} - The monitor's status after its last run.
 */
export type LastRun = z.infer<typeof lastRun>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const lastRunResponse: any = z.lazy(() => {
  return z
    .object({
      finishedAt: z.string().optional(),
      startedAt: z.string().optional(),
      stats: lastRunStatsResponse.optional(),
      status: z.string().optional(),
    })
    .transform((data) => ({
      finishedAt: data['finishedAt'],
      startedAt: data['startedAt'],
      stats: data['stats'],
      status: data['status'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const lastRunRequest: any = z.lazy(() => {
  return z
    .object({
      finishedAt: z.string().nullish(),
      startedAt: z.string().nullish(),
      stats: lastRunStatsRequest.nullish(),
      status: z.string().nullish(),
    })
    .transform((data) => ({
      finishedAt: data['finishedAt'],
      startedAt: data['startedAt'],
      stats: data['stats'],
      status: data['status'],
    }));
});
