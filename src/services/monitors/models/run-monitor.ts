// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { run, runRequest, runResponse } from './run';

/**
 * The shape of the model inside the application code - what the users use
 */
export const runMonitor = z.lazy(() => {
  return z.object({
    run: run.optional(),
  });
});

/**
 *
 * @typedef  {RunMonitor} runMonitor
 * @property {Run} - Information about the monitor run.
 */
export type RunMonitor = z.infer<typeof runMonitor>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const runMonitorResponse = z.lazy(() => {
  return z
    .object({
      run: runResponse.optional(),
    })
    .transform((data) => ({
      run: data['run'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const runMonitorRequest = z.lazy(() => {
  return z.object({ run: runRequest.nullish() }).transform((data) => ({
    run: data['run'],
  }));
});
