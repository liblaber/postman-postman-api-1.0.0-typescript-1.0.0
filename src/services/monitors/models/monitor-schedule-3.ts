// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const monitorSchedule3 = z.lazy(() => {
  return z.object({
    cron: z.string().optional(),
    timezone: z.string().optional(),
  });
});

/**
 * Information about the monitor's schedule.
 * @typedef  {MonitorSchedule3} monitorSchedule3 - Information about the monitor's schedule. - Information about the monitor's schedule.
 * @property {string} - The monitor's run frequency, based on the given cron pattern:

| Frequency | Pattern |
| --------- | ------- |
| Every 5 minutes | `*`/5 * * * *` |
| Every 30 minutes | `*`/30 * * * *` |
| Every hour | `0 *`/1 * * *` |
| Every 6 hours | `0 *`/6 * * *` |
| Every day at 5 pm | `0 17 * * *` |
| Every Monday at 12 pm | `0 12 * * MON` |
| Every weekday (Mon â€” Fri) at 6 am | `0 6 * * MON-FRI` |

At this time you can only create monitors with limited schedules.

 * @property {string} - The monitor's [timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
 */
export type MonitorSchedule3 = z.infer<typeof monitorSchedule3>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const monitorSchedule3Response = z.lazy(() => {
  return z
    .object({
      cron: z.string().optional(),
      timezone: z.string().optional(),
    })
    .transform((data) => ({
      cron: data['cron'],
      timezone: data['timezone'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const monitorSchedule3Request = z.lazy(() => {
  return z.object({ cron: z.string().nullish(), timezone: z.string().nullish() }).transform((data) => ({
    cron: data['cron'],
    timezone: data['timezone'],
  }));
});
