// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const options = z.lazy(() => {
  return z.object({
    followRedirects: z.boolean().optional(),
    requestDelay: z.number().optional(),
    requestTimeout: z.number().optional(),
    strictSsl: z.boolean().optional(),
  });
});

/**
 * Information about the monitor's option settings.
 * @typedef  {Options} options - Information about the monitor's option settings. - Information about the monitor's option settings.
 * @property {boolean} - If true, follow redirects enabled.
 * @property {number} - The monitor's request delay value.
 * @property {number} - The monitor's request timeout value.
 * @property {boolean} - If true, strict SSL enabled.
 */
export type Options = z.infer<typeof options>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const optionsResponse = z.lazy(() => {
  return z
    .object({
      followRedirects: z.boolean().optional(),
      requestDelay: z.number().optional(),
      requestTimeout: z.number().optional(),
      strictSSL: z.boolean().optional(),
    })
    .transform((data) => ({
      followRedirects: data['followRedirects'],
      requestDelay: data['requestDelay'],
      requestTimeout: data['requestTimeout'],
      strictSsl: data['strictSSL'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const optionsRequest = z.lazy(() => {
  return z
    .object({
      followRedirects: z.boolean().nullish(),
      requestDelay: z.number().nullish(),
      requestTimeout: z.number().nullish(),
      strictSsl: z.boolean().nullish(),
    })
    .transform((data) => ({
      followRedirects: data['followRedirects'],
      requestDelay: data['requestDelay'],
      requestTimeout: data['requestTimeout'],
      strictSSL: data['strictSsl'],
    }));
});
