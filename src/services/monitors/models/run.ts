// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { runInfo, runInfoRequest, runInfoResponse } from './run-info';
import { runStats, runStatsRequest, runStatsResponse } from './run-stats';
import { executions, executionsRequest, executionsResponse } from './executions';

/**
 * The shape of the model inside the application code - what the users use
 */
export const run = z.object({
  info: runInfo.optional(),
  stats: runStats.optional(),
  executions: z.array(executions).optional(),
  failures: z.array(z.any()).optional(),
});

/**
 * Information about the monitor run.
 * @typedef  {Run} run - Information about the monitor run. - Information about the monitor run.
 * @property {RunInfo} - Information about the monitor.
 * @property {RunStats} - Information about the monitor run's stats.
 * @property {Executions[]} - Information about the monitor run's executions.
 * @property {any[]} - If the monitor run failed, information about the run's failures.
 */
export type Run = z.infer<typeof run>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const runResponse = z
  .object({
    info: runInfoResponse.optional(),
    stats: runStatsResponse.optional(),
    executions: z.array(executionsResponse).optional(),
    failures: z.array(z.any()).optional(),
  })
  .transform((data) => ({
    info: data['info'],
    stats: data['stats'],
    executions: data['executions'],
    failures: data['failures'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const runRequest = z
  .object({
    info: runInfoRequest.nullish(),
    stats: runStatsRequest.nullish(),
    executions: z.array(executionsRequest).nullish(),
    failures: z.array(z.any()).nullish(),
  })
  .transform((data) => ({
    info: data['info'],
    stats: data['stats'],
    executions: data['executions'],
    failures: data['failures'],
  }));
