// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { getMonitorMonitor, getMonitorMonitorRequest, getMonitorMonitorResponse } from './get-monitor-monitor';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getMonitor = z.object({
  monitor: getMonitorMonitor.optional(),
});

/**
 *
 * @typedef  {GetMonitor} getMonitor
 * @property {GetMonitorMonitor}
 */
export type GetMonitor = z.infer<typeof getMonitor>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getMonitorResponse = z
  .object({
    monitor: getMonitorMonitorResponse.optional(),
  })
  .transform((data) => ({
    monitor: data['monitor'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getMonitorRequest = z.object({ monitor: getMonitorMonitorRequest.nullish() }).transform((data) => ({
  monitor: data['monitor'],
}));
