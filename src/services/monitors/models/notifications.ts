// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { onError, onErrorRequest, onErrorResponse } from './on-error';
import { onFailure, onFailureRequest, onFailureResponse } from './on-failure';

/**
 * The shape of the model inside the application code - what the users use
 */
export const notifications: any = z.lazy(() => {
  return z.object({
    onError: z.array(onError).optional(),
    onFailure: z.array(onFailure).optional(),
  });
});

/**
 * Information about the monitor's notification settings.
 * @typedef  {Notifications} notifications - Information about the monitor's notification settings. - Information about the monitor's notification settings.
 * @property {OnError[]}
 * @property {OnFailure[]}
 */
export type Notifications = z.infer<typeof notifications>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const notificationsResponse: any = z.lazy(() => {
  return z
    .object({
      onError: z.array(onErrorResponse).optional(),
      onFailure: z.array(onFailureResponse).optional(),
    })
    .transform((data) => ({
      onError: data['onError'],
      onFailure: data['onFailure'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const notificationsRequest: any = z.lazy(() => {
  return z
    .object({ onError: z.array(onErrorRequest).nullish(), onFailure: z.array(onFailureRequest).nullish() })
    .transform((data) => ({
      onError: data['onError'],
      onFailure: data['onFailure'],
    }));
});
