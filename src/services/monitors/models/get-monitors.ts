// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { getMonitorsMonitors, getMonitorsMonitorsRequest, getMonitorsMonitorsResponse } from './get-monitors-monitors';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getMonitors: any = z.lazy(() => {
  return z.object({
    monitors: z.array(getMonitorsMonitors).optional(),
  });
});

/**
 *
 * @typedef  {GetMonitors} getMonitors
 * @property {GetMonitorsMonitors[]}
 */
export type GetMonitors = z.infer<typeof getMonitors>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getMonitorsResponse: any = z.lazy(() => {
  return z
    .object({
      monitors: z.array(getMonitorsMonitorsResponse).optional(),
    })
    .transform((data) => ({
      monitors: data['monitors'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getMonitorsRequest: any = z.lazy(() => {
  return z.object({ monitors: z.array(getMonitorsMonitorsRequest).nullish() }).transform((data) => ({
    monitors: data['monitors'],
  }));
});
