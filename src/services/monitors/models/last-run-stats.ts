// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { statsAssertions1, statsAssertions1Request, statsAssertions1Response } from './stats-assertions-1';
import { statsRequests1, statsRequests1Request, statsRequests1Response } from './stats-requests-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const lastRunStats = z.object({
  assertions: statsAssertions1.optional(),
  requests: statsRequests1.optional(),
});

/**
 * Information about the monitor's stats.
 * @typedef  {LastRunStats} lastRunStats - Information about the monitor's stats. - Information about the monitor's stats.
 * @property {StatsAssertions1} - Information about the monitor's assertions.
 * @property {StatsRequests1} - Information about the monitor's requests.
 */
export type LastRunStats = z.infer<typeof lastRunStats>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const lastRunStatsResponse = z
  .object({
    assertions: statsAssertions1Response.optional(),
    requests: statsRequests1Response.optional(),
  })
  .transform((data) => ({
    assertions: data['assertions'],
    requests: data['requests'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const lastRunStatsRequest = z
  .object({ assertions: statsAssertions1Request.nullish(), requests: statsRequests1Request.nullish() })
  .transform((data) => ({
    assertions: data['assertions'],
    requests: data['requests'],
  }));
