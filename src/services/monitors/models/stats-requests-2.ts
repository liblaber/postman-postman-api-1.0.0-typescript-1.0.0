// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const statsRequests2: any = z.lazy(() => {
  return z.object({
    total: z.number().optional(),
    failed: z.number().optional(),
  });
});

/**
 * The monitor run's request stats.
 * @typedef  {StatsRequests2} statsRequests2 - The monitor run's request stats. - The monitor run's request stats.
 * @property {number} - The total number of requests.
 * @property {number} - The number of request failures.
 */
export type StatsRequests2 = z.infer<typeof statsRequests2>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const statsRequests2Response: any = z.lazy(() => {
  return z
    .object({
      total: z.number().optional(),
      failed: z.number().optional(),
    })
    .transform((data) => ({
      total: data['total'],
      failed: data['failed'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const statsRequests2Request: any = z.lazy(() => {
  return z.object({ total: z.number().nullish(), failed: z.number().nullish() }).transform((data) => ({
    total: data['total'],
    failed: data['failed'],
  }));
});
