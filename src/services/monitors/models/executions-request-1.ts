// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const executionsRequest1 = z.lazy(() => {
  return z.object({
    method: z.string().optional(),
    url: z.string().optional(),
    body: z.any().optional(),
    headers: z.any().optional(),
    timestamp: z.string().optional(),
  });
});

/**
 * Information about the monitor run's requests.
 * @typedef  {ExecutionsRequest1} executionsRequest1 - Information about the monitor run's requests. - Information about the monitor run's requests.
 * @property {string} - The request method.
 * @property {string} - The request's URL.
 * @property {any} - Information about the request body, such as Content-Length.
 * @property {any} - Information about the request headers, such as Content-Type, Accept, encoding, and other information.
 * @property {string} - The date and time of the request.
 */
export type ExecutionsRequest1 = z.infer<typeof executionsRequest1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const executionsRequest1Response = z.lazy(() => {
  return z
    .object({
      method: z.string().optional(),
      url: z.string().optional(),
      body: z.any().optional(),
      headers: z.any().optional(),
      timestamp: z.string().optional(),
    })
    .transform((data) => ({
      method: data['method'],
      url: data['url'],
      body: data['body'],
      headers: data['headers'],
      timestamp: data['timestamp'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const executionsRequest1Request = z.lazy(() => {
  return z
    .object({
      method: z.string().nullish(),
      url: z.string().nullish(),
      body: z.any().nullish(),
      headers: z.any().nullish(),
      timestamp: z.string().nullish(),
    })
    .transform((data) => ({
      method: data['method'],
      url: data['url'],
      body: data['body'],
      headers: data['headers'],
      timestamp: data['timestamp'],
    }));
});
