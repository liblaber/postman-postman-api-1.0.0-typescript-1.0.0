// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import {
  CreateMonitorOkResponse,
  CreateMonitorRequest,
  DeleteMonitor,
  GetMonitor,
  GetMonitors,
  RunMonitor,
  UpdateMonitorOkResponse,
  UpdateMonitorRequest,
  createMonitorOkResponseResponse,
  createMonitorRequestRequest,
  deleteMonitorResponse,
  getMonitorResponse,
  getMonitorsResponse,
  runMonitorResponse,
  updateMonitorOkResponseResponse,
  updateMonitorRequestRequest,
} from './models';
import { CreateMonitorParams, GetMonitorsParams } from './request-params';

export class MonitorsService extends BaseService {
  /**
   * Gets all monitors.
   * @param {string} [workspace] - Return only results found in the given workspace.
   * @returns {Promise<HttpResponse<GetMonitors>>} Successful Response
   */
  async getMonitors(params?: GetMonitorsParams, requestConfig?: RequestConfig): Promise<HttpResponse<GetMonitors>> {
    const path = '/monitors';
    const options: any = {
      responseSchema: getMonitorsResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.workspace) {
      options.queryParams['workspace'] = params?.workspace;
    }
    return this.client.get(path, options);
  }

  /**
 * Creates a monitor.
**Note:**

You cannot create monitors for collections added to an API definition.

 * @param {string} [workspace] - The workspace's ID.
 * @returns {Promise<HttpResponse<CreateMonitorOkResponse>>} Successful Response
 */
  async createMonitor(
    body: CreateMonitorRequest,
    params?: CreateMonitorParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateMonitorOkResponse>> {
    const path = '/monitors';
    const options: any = {
      responseSchema: createMonitorOkResponseResponse,
      requestSchema: createMonitorRequestRequest,
      body: body as any,
      queryParams: {},
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.workspace) {
      options.queryParams['workspace'] = params?.workspace;
    }
    return this.client.post(path, options);
  }

  /**
   * Gets information about a monitor.
   * @param {string} monitorId - The monitor's ID.
   * @returns {Promise<HttpResponse<GetMonitor>>} Successful Response
   */
  async getMonitor(monitorId: string, requestConfig?: RequestConfig): Promise<HttpResponse<GetMonitor>> {
    const path = this.client.buildPath('/monitors/{monitorId}', { monitorId: monitorId });
    const options: any = {
      responseSchema: getMonitorResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Updates a monitor.
   * @param {string} monitorId - The monitor's ID.
   * @returns {Promise<HttpResponse<UpdateMonitorOkResponse>>} Successful Response
   */
  async updateMonitor(
    monitorId: string,
    body: UpdateMonitorRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<UpdateMonitorOkResponse>> {
    const path = this.client.buildPath('/monitors/{monitorId}', { monitorId: monitorId });
    const options: any = {
      responseSchema: updateMonitorOkResponseResponse,
      requestSchema: updateMonitorRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
   * Deletes a monitor.
   * @param {string} monitorId - The monitor's ID.
   * @returns {Promise<HttpResponse<DeleteMonitor>>} Successful Response
   */
  async deleteMonitor(monitorId: string, requestConfig?: RequestConfig): Promise<HttpResponse<DeleteMonitor>> {
    const path = this.client.buildPath('/monitors/{monitorId}', { monitorId: monitorId });
    const options: any = {
      responseSchema: deleteMonitorResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.delete(path, options);
  }

  /**
   * Runs a monitor and returns its run results.
   * @param {string} monitorId - The monitor's ID.
   * @returns {Promise<HttpResponse<RunMonitor>>} Successful Response
   */
  async runMonitor(monitorId: string, requestConfig?: RequestConfig): Promise<HttpResponse<RunMonitor>> {
    const path = this.client.buildPath('/monitors/{monitorId}/run', { monitorId: monitorId });
    const options: any = {
      responseSchema: runMonitorResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }
}
