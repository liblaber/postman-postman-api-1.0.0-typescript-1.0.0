// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { Request } from '../../http/transport/request';
import { GetMonitors, getMonitorsResponse } from './models/get-monitors';
import { CreateMonitorParams, GetMonitorsParams } from './request-params';
import { CreateMonitorRequest, createMonitorRequestRequest } from './models/create-monitor-request';
import { CreateMonitorOkResponse, createMonitorOkResponseResponse } from './models/create-monitor-ok-response';
import { GetMonitor, getMonitorResponse } from './models/get-monitor';
import { UpdateMonitorRequest, updateMonitorRequestRequest } from './models/update-monitor-request';
import { UpdateMonitorOkResponse, updateMonitorOkResponseResponse } from './models/update-monitor-ok-response';
import { DeleteMonitor, deleteMonitorResponse } from './models/delete-monitor';
import { RunMonitor, runMonitorResponse } from './models/run-monitor';

export class MonitorsService extends BaseService {
  /**
   * Gets all monitors.
   * @param {string} [workspace] - Return only results found in the given workspace.
   * @returns {Promise<HttpResponse<GetMonitors>>} Successful Response
   */
  async getMonitors(params?: GetMonitorsParams, requestConfig?: RequestConfig): Promise<HttpResponse<GetMonitors>> {
    const request = new Request({
      method: 'GET',
      path: '/monitors',
      config: this.config,
      responseSchema: getMonitorsResponse,
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addQueryParam('workspace', params?.workspace);
    return this.client.call<GetMonitors>(request);
  }

  /**
 * Creates a monitor.
**Note:**

You cannot create monitors for collections added to an API definition.

 * @param {string} [workspace] - The workspace's ID.
 * @returns {Promise<HttpResponse<CreateMonitorOkResponse>>} Successful Response
 */
  async createMonitor(
    body: CreateMonitorRequest,
    params?: CreateMonitorParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateMonitorOkResponse>> {
    const request = new Request({
      method: 'POST',
      body,
      path: '/monitors',
      config: this.config,
      responseSchema: createMonitorOkResponseResponse,
      requestSchema: createMonitorRequestRequest,
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addQueryParam('workspace', params?.workspace);
    request.addHeaderParam('Content-Type', 'application/json');
    return this.client.call<CreateMonitorOkResponse>(request);
  }

  /**
   * Gets information about a monitor.
   * @param {string} monitorId - The monitor's ID.
   * @returns {Promise<HttpResponse<GetMonitor>>} Successful Response
   */
  async getMonitor(monitorId: string, requestConfig?: RequestConfig): Promise<HttpResponse<GetMonitor>> {
    const request = new Request({
      method: 'GET',
      path: '/monitors/{monitorId}',
      config: this.config,
      responseSchema: getMonitorResponse,
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('monitorId', monitorId);
    return this.client.call<GetMonitor>(request);
  }

  /**
   * Updates a monitor.
   * @param {string} monitorId - The monitor's ID.
   * @returns {Promise<HttpResponse<UpdateMonitorOkResponse>>} Successful Response
   */
  async updateMonitor(
    monitorId: string,
    body: UpdateMonitorRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<UpdateMonitorOkResponse>> {
    const request = new Request({
      method: 'PUT',
      body,
      path: '/monitors/{monitorId}',
      config: this.config,
      responseSchema: updateMonitorOkResponseResponse,
      requestSchema: updateMonitorRequestRequest,
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('monitorId', monitorId);
    request.addHeaderParam('Content-Type', 'application/json');
    return this.client.call<UpdateMonitorOkResponse>(request);
  }

  /**
   * Deletes a monitor.
   * @param {string} monitorId - The monitor's ID.
   * @returns {Promise<HttpResponse<DeleteMonitor>>} Successful Response
   */
  async deleteMonitor(monitorId: string, requestConfig?: RequestConfig): Promise<HttpResponse<DeleteMonitor>> {
    const request = new Request({
      method: 'DELETE',
      path: '/monitors/{monitorId}',
      config: this.config,
      responseSchema: deleteMonitorResponse,
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('monitorId', monitorId);
    return this.client.call<DeleteMonitor>(request);
  }

  /**
   * Runs a monitor and returns its run results.
   * @param {string} monitorId - The monitor's ID.
   * @returns {Promise<HttpResponse<RunMonitor>>} Successful Response
   */
  async runMonitor(monitorId: string, requestConfig?: RequestConfig): Promise<HttpResponse<RunMonitor>> {
    const request = new Request({
      method: 'POST',
      path: '/monitors/{monitorId}/run',
      config: this.config,
      responseSchema: runMonitorResponse,
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('monitorId', monitorId);
    return this.client.call<RunMonitor>(request);
  }
}
