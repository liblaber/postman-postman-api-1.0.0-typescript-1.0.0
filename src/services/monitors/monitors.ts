// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { GetMonitors, getMonitorsResponse } from './models/get-monitors';
import { CreateMonitorParams, GetMonitorsParams } from './request-params';
import { CreateMonitorRequest, createMonitorRequestRequest } from './models/create-monitor-request';
import { CreateMonitorOkResponse, createMonitorOkResponseResponse } from './models/create-monitor-ok-response';
import { GetMonitor, getMonitorResponse } from './models/get-monitor';
import { UpdateMonitorRequest, updateMonitorRequestRequest } from './models/update-monitor-request';
import { UpdateMonitorOkResponse, updateMonitorOkResponseResponse } from './models/update-monitor-ok-response';
import { DeleteMonitor, deleteMonitorResponse } from './models/delete-monitor';
import { RunMonitor, runMonitorResponse } from './models/run-monitor';

export class MonitorsService extends BaseService {
  /**
   * Gets all monitors.
   * @param {string} [workspace] - Return only results found in the given workspace.
   * @returns {Promise<HttpResponse<GetMonitors>>} Successful Response
   */
  async getMonitors(params?: GetMonitorsParams, requestConfig?: RequestConfig): Promise<HttpResponse<GetMonitors>> {
    const request = new RequestBuilder<GetMonitors>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/monitors')
      .setRequestSchema(z.any())
      .setResponseSchema(getMonitorsResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'workspace',
        value: params?.workspace,
      })
      .build();
    return this.client.call<GetMonitors>(request);
  }

  /**
 * Creates a monitor.
**Note:**

You cannot create monitors for collections added to an API definition.

 * @param {string} [workspace] - The workspace's ID.
 * @returns {Promise<HttpResponse<CreateMonitorOkResponse>>} Successful Response
 */
  async createMonitor(
    body: CreateMonitorRequest,
    params?: CreateMonitorParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateMonitorOkResponse>> {
    const request = new RequestBuilder<CreateMonitorOkResponse>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('POST')
      .setPath('/monitors')
      .setRequestSchema(createMonitorRequestRequest)
      .setResponseSchema(createMonitorOkResponseResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'workspace',
        value: params?.workspace,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<CreateMonitorOkResponse>(request);
  }

  /**
   * Gets information about a monitor.
   * @param {string} monitorId - The monitor's ID.
   * @returns {Promise<HttpResponse<GetMonitor>>} Successful Response
   */
  async getMonitor(monitorId: string, requestConfig?: RequestConfig): Promise<HttpResponse<GetMonitor>> {
    const request = new RequestBuilder<GetMonitor>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/monitors/{monitorId}')
      .setRequestSchema(z.any())
      .setResponseSchema(getMonitorResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'monitorId',
        value: monitorId,
      })
      .build();
    return this.client.call<GetMonitor>(request);
  }

  /**
   * Updates a monitor.
   * @param {string} monitorId - The monitor's ID.
   * @returns {Promise<HttpResponse<UpdateMonitorOkResponse>>} Successful Response
   */
  async updateMonitor(
    monitorId: string,
    body: UpdateMonitorRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<UpdateMonitorOkResponse>> {
    const request = new RequestBuilder<UpdateMonitorOkResponse>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('PUT')
      .setPath('/monitors/{monitorId}')
      .setRequestSchema(updateMonitorRequestRequest)
      .setResponseSchema(updateMonitorOkResponseResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'monitorId',
        value: monitorId,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<UpdateMonitorOkResponse>(request);
  }

  /**
   * Deletes a monitor.
   * @param {string} monitorId - The monitor's ID.
   * @returns {Promise<HttpResponse<DeleteMonitor>>} Successful Response
   */
  async deleteMonitor(monitorId: string, requestConfig?: RequestConfig): Promise<HttpResponse<DeleteMonitor>> {
    const request = new RequestBuilder<DeleteMonitor>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('DELETE')
      .setPath('/monitors/{monitorId}')
      .setRequestSchema(z.any())
      .setResponseSchema(deleteMonitorResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'monitorId',
        value: monitorId,
      })
      .build();
    return this.client.call<DeleteMonitor>(request);
  }

  /**
   * Runs a monitor and returns its run results.
   * @param {string} monitorId - The monitor's ID.
   * @returns {Promise<HttpResponse<RunMonitor>>} Successful Response
   */
  async runMonitor(monitorId: string, requestConfig?: RequestConfig): Promise<HttpResponse<RunMonitor>> {
    const request = new RequestBuilder<RunMonitor>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('POST')
      .setPath('/monitors/{monitorId}/run')
      .setRequestSchema(z.any())
      .setResponseSchema(runMonitorResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'monitorId',
        value: monitorId,
      })
      .build();
    return this.client.call<RunMonitor>(request);
  }
}
