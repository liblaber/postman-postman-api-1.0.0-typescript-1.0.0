// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import {
  CollectionsCreateCollectionRequest,
  CreateCollectionForkOkResponse,
  CreateCollectionForkRequest,
  CreateCollectionOkResponse,
  DeleteCollection,
  GetCollection,
  GetCollectionForks,
  GetCollectionPullRequests,
  GetCollectionRoles,
  GetCollections,
  GetCollectionsForkedByUser,
  GetSourceCollectionStatus,
  MergeCollectionForkOkResponse,
  MergeCollectionForkRequest,
  PatchCollectionOkResponse,
  PatchCollectionRequest,
  PullCollectionChanges,
  PullRequestCreate,
  PullRequestCreated,
  PutCollectionOkResponse,
  PutCollectionRequest,
  TransformCollectionToOpenApi,
  UpdateCollectionRoles,
  collectionsCreateCollectionRequestRequest,
  createCollectionForkOkResponseResponse,
  createCollectionForkRequestRequest,
  createCollectionOkResponseResponse,
  deleteCollectionResponse,
  getCollectionForksResponse,
  getCollectionPullRequestsResponse,
  getCollectionResponse,
  getCollectionRolesResponse,
  getCollectionsForkedByUserResponse,
  getCollectionsResponse,
  getSourceCollectionStatusResponse,
  mergeCollectionForkOkResponseResponse,
  mergeCollectionForkRequestRequest,
  patchCollectionOkResponseResponse,
  patchCollectionRequestRequest,
  pullCollectionChangesResponse,
  pullRequestCreateRequest,
  pullRequestCreatedResponse,
  putCollectionOkResponseResponse,
  putCollectionRequestRequest,
  transformCollectionToOpenApiResponse,
  updateCollectionRolesRequest,
} from './models';
import {
  CreateCollectionForkParams,
  CreateCollectionParams,
  GetCollectionForksParams,
  GetCollectionParams,
  GetCollectionsForkedByUserParams,
  GetCollectionsParams,
  TransformCollectionToOpenApiParams,
} from './request-params';
import {
  CommentCreateUpdate,
  CommentCreatedUpdated,
  CommentResponse,
  TransferCollectionItems,
  TransferCollectionItems200Error,
  commentCreateUpdateRequest,
  commentCreatedUpdatedResponse,
  commentResponseResponse,
  transferCollectionItems200ErrorResponse,
  transferCollectionItemsRequest,
} from '../common';

export class CollectionsService extends BaseService {
  /**
   * Gets all of your [collections](https://www.getpostman.com/docs/collections). The response includes all of your subscribed collections.
   * @param {string} [workspace] - The workspace's ID.
   * @param {string} [name] - Filter results by collections that match the given name.
   * @returns {Promise<HttpResponse<GetCollections>>} Successful Response
   */
  async getCollections(
    params?: GetCollectionsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetCollections>> {
    const path = '/collections';
    const options: any = {
      responseSchema: getCollectionsResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.workspace) {
      options.queryParams['workspace'] = params?.workspace;
    }
    if (params?.name) {
      options.queryParams['name'] = params?.name;
    }
    return this.client.get(path, options);
  }

  /**
 * Creates a collection using the [Postman Collection v2 schema format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html).
For more information about the Collection Format, see the [Postman Collection Format documentation](https://learning.postman.com/collection-format/getting-started/overview/).

**Note:**

- For a complete list of available property values for this endpoint, use the following references available in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):
    - `info` object — Use the `definitions.info` entry.
    - `item` object — Use the `definitions.items` entry.
- For all other possible values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).

 * @param {string} [workspace] - The workspace's ID.
 * @returns {Promise<HttpResponse<CreateCollectionOkResponse>>} Successful Response
 */
  async createCollection(
    body: CollectionsCreateCollectionRequest,
    params?: CreateCollectionParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateCollectionOkResponse>> {
    const path = '/collections';
    const options: any = {
      responseSchema: createCollectionOkResponseResponse,
      requestSchema: collectionsCreateCollectionRequestRequest,
      body: body as any,
      queryParams: {},
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.workspace) {
      options.queryParams['workspace'] = params?.workspace;
    }
    return this.client.post(path, options);
  }

  /**
   * Creates a [fork](https://learning.postman.com/docs/collaborating-in-postman/version-control/#creating-a-fork) from an existing collection into a workspace.
   * @param {string} collectionId - The collection's ID.
   * @param {string} workspace - The workspace ID in which to create the fork.
   * @returns {Promise<HttpResponse<CreateCollectionForkOkResponse>>} Successful Response
   */
  async createCollectionFork(
    collectionId: string,
    body: CreateCollectionForkRequest,
    params: CreateCollectionForkParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateCollectionForkOkResponse>> {
    const path = this.client.buildPath('/collections/fork/{collectionId}', { collectionId: collectionId });
    const options: any = {
      responseSchema: createCollectionForkOkResponseResponse,
      requestSchema: createCollectionForkRequestRequest,
      body: body as any,
      queryParams: {},
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.workspace) {
      options.queryParams['workspace'] = params?.workspace;
    }
    return this.client.post(path, options);
  }

  /**
   * Merges a forked collection back into its parent collection.
   * @returns {Promise<HttpResponse<MergeCollectionForkOkResponse>>} Successful Response
   */
  async mergeCollectionFork(
    body: MergeCollectionForkRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<MergeCollectionForkOkResponse>> {
    const path = '/collections/merge';
    const options: any = {
      responseSchema: mergeCollectionForkOkResponseResponse,
      requestSchema: mergeCollectionForkRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   * Gets information about a collection. For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
   * @param {string} collectionId - The collection's ID.
   * @param {string} [accessKey] - A collection's read-only access key. Using this query parameter does not require an API key to call the endpoint.
   * @param {GetCollectionModel} [model] - Return a list of only the collection's root-level request (`rootLevelRequests`) and folder (`rootLevelFolders`) IDs instead of the full collection element data.
   * @returns {Promise<HttpResponse<GetCollection>>} Successful Response
   */
  async getCollection(
    collectionId: string,
    params?: GetCollectionParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetCollection>> {
    const path = this.client.buildPath('/collections/{collectionId}', { collectionId: collectionId });
    const options: any = {
      responseSchema: getCollectionResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accessKey) {
      options.queryParams['access_key'] = params?.accessKey;
    }
    if (params?.model) {
      options.queryParams['model'] = params?.model;
    }
    return this.client.get(path, options);
  }

  /**
 * Replaces the contents of a collection using the [Postman Collection v2 schema format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html). Include the collection's ID values in the request body. If you do not, the endpoint removes the existing items and creates new items.
> The maximum collection size this endpoint accepts cannot exceed 20 MB.

For a complete list of available property values for this endpoint, use the following references available in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):
- `info` object — Use `../definitions/info"`.
- `item` object — Use `../definitions/item"`.

For all other possible values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). For more information about the Collection Format, see the [Postman Collection Format documentation](https://learning.postman.com/collection-format/getting-started/overview/).

**Note:**

To copy another collection's contents to the given collection, remove all ID values before you pass it in this endpoint. If you do not, this endpoint returns an error. These values include the `id`, `uid`, and `postman_id` values.

 * @param {string} collectionId - The collection's ID.
 * @returns {Promise<HttpResponse<PutCollectionOkResponse>>} Successful Response
 */
  async putCollection(
    collectionId: string,
    body: PutCollectionRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PutCollectionOkResponse>> {
    const path = this.client.buildPath('/collections/{collectionId}', { collectionId: collectionId });
    const options: any = {
      responseSchema: putCollectionOkResponseResponse,
      requestSchema: putCollectionRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
 * Updates specific collection information, such as its name, events, or its variables. For more information about the `auth`, `variables`, and `events` properties, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):- For `variables`, refer to `../definitions/variable"`.
- For `auth`, refer to `../definitions/auth-attribute"`.
- For `events`, refer to `../definitions/event"`.

For more information about the Collection Format, see the [Postman Collection Format documentation](https://learning.postman.com/collection-format/getting-started/overview/).

 * @param {string} collectionId - The collection's ID.
 * @returns {Promise<HttpResponse<PatchCollectionOkResponse>>} Successful Response
 */
  async patchCollection(
    collectionId: string,
    body: PatchCollectionRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PatchCollectionOkResponse>> {
    const path = this.client.buildPath('/collections/{collectionId}', { collectionId: collectionId });
    const options: any = {
      responseSchema: patchCollectionOkResponseResponse,
      requestSchema: patchCollectionRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.patch(path, options);
  }

  /**
   * Deletes a collection.
   * @param {string} collectionId - The collection's ID.
   * @returns {Promise<HttpResponse<DeleteCollection>>} Successful Response
   */
  async deleteCollection(collectionId: string, requestConfig?: RequestConfig): Promise<HttpResponse<DeleteCollection>> {
    const path = this.client.buildPath('/collections/{collectionId}', { collectionId: collectionId });
    const options: any = {
      responseSchema: deleteCollectionResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.delete(path, options);
  }

  /**
   * Gets a list of all the authenticated user's forked collections.
   * @param {string} collectionId - The collection's ID.
   * @param {string} [cursor] - The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.
   * @param {number} [limit] - The maximum number of rows to return in the response.
   * @param {AscDesc} [direction] - Sort the results by creation date in ascending (`asc`) or descending (`desc`) order.
   * @returns {Promise<HttpResponse<GetCollectionsForkedByUser>>} Successful Response
   */
  async getCollectionsForkedByUser(
    collectionId: string,
    params?: GetCollectionsForkedByUserParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetCollectionsForkedByUser>> {
    const path = this.client.buildPath('/collections/{collectionId}/collection-forks', { collectionId: collectionId });
    const options: any = {
      responseSchema: getCollectionsForkedByUserResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.cursor) {
      options.queryParams['cursor'] = params?.cursor;
    }
    if (params?.limit) {
      options.queryParams['limit'] = params?.limit;
    }
    if (params?.direction) {
      options.queryParams['direction'] = params?.direction;
    }
    return this.client.get(path, options);
  }

  /**
   * Gets all comments left by users in a collection.
   * @param {string} collectionId - The collection's unique ID.
   * @returns {Promise<HttpResponse<CommentResponse>>} Successful Response
   */
  async getCollectionComments(
    collectionId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CommentResponse>> {
    const path = this.client.buildPath('/collections/{collectionId}/comments', { collectionId: collectionId });
    const options: any = {
      responseSchema: commentResponseResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
 * Creates a comment on a collection.
**Note:**

This endpoint accepts a max of 10,000 characters.

 * @param {string} collectionId - The collection's unique ID.
 * @returns {Promise<HttpResponse<CommentCreatedUpdated>>} Created
 */
  async createCollectionComment(
    collectionId: string,
    body: CommentCreateUpdate,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CommentCreatedUpdated>> {
    const path = this.client.buildPath('/collections/{collectionId}/comments', { collectionId: collectionId });
    const options: any = {
      responseSchema: commentCreatedUpdatedResponse,
      requestSchema: commentCreateUpdateRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
 * Updates a comment on a collection.
**Note:**

This endpoint accepts a max of 10,000 characters.

 * @param {string} collectionId - The collection's unique ID.
 * @param {number} commentId - The comment's ID.
 * @returns {Promise<HttpResponse<CommentCreatedUpdated>>} Successful Response
 */
  async updateCollectionComment(
    collectionId: string,
    commentId: number,
    body: CommentCreateUpdate,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CommentCreatedUpdated>> {
    const path = this.client.buildPath('/collections/{collectionId}/comments/{commentId}', {
      collectionId: collectionId,
      commentId: commentId,
    });
    const options: any = {
      responseSchema: commentCreatedUpdatedResponse,
      requestSchema: commentCreateUpdateRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
 * Deletes a comment from a collection. On success, this returns an HTTP `204 No Content` response
**Note:**

Deleting the first comment of a thread deletes all the comments in the thread.

 * @param {string} collectionId - The collection's unique ID.
 * @param {number} commentId - The comment's ID.
 * @returns {Promise<HttpResponse<any>>} No Content
 */
  async deleteCollectionComment(
    collectionId: string,
    commentId: number,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<undefined>> {
    const path = this.client.buildPath('/collections/{collectionId}/comments/{commentId}', {
      collectionId: collectionId,
      commentId: commentId,
    });
    const options: any = {
      responseSchema: z.undefined(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.delete(path, options);
  }

  /**
   * Gets a collection's forked collections. The response returns data for each fork, such as the fork's ID, the user who forked it, and the fork's  creation date.
   * @param {string} collectionId - The collection's ID.
   * @param {string} [cursor] - The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.
   * @param {number} [limit] - The maximum number of rows to return in the response.
   * @param {AscDesc} [direction] - Sort the results by creation date in ascending (`asc`) or descending (`desc`) order.
   * @returns {Promise<HttpResponse<GetCollectionForks>>} Successful Response
   */
  async getCollectionForks(
    collectionId: string,
    params?: GetCollectionForksParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetCollectionForks>> {
    const path = this.client.buildPath('/collections/{collectionId}/forks', { collectionId: collectionId });
    const options: any = {
      responseSchema: getCollectionForksResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.cursor) {
      options.queryParams['cursor'] = params?.cursor;
    }
    if (params?.limit) {
      options.queryParams['limit'] = params?.limit;
    }
    if (params?.direction) {
      options.queryParams['direction'] = params?.direction;
    }
    return this.client.get(path, options);
  }

  /**
 * Pulls the changes from a parent (source) collection into the forked collection. In the endpoint's response:
- The `destinationId` is the ID of the forked collection.
- The `sourceId` is the ID of the source collection.

 * @param {string} collectionId - The collection's ID.
 * @returns {Promise<HttpResponse<PullCollectionChanges>>} Successful Response
 */
  async pullCollectionChanges(
    collectionId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PullCollectionChanges>> {
    const path = this.client.buildPath('/collections/{collectionId}/pulls', { collectionId: collectionId });
    const options: any = {
      responseSchema: pullCollectionChangesResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
   * Gets information about a collection's pull requests, such as the source and destination IDs, status of the pull requests, and a URL link to the pull requests.
   * @param {string} collectionId - The collection's unique ID.
   * @returns {Promise<HttpResponse<GetCollectionPullRequests>>} Successful Response
   */
  async getCollectionPullRequests(
    collectionId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetCollectionPullRequests>> {
    const path = this.client.buildPath('/collections/{collectionId}/pull-requests', { collectionId: collectionId });
    const options: any = {
      responseSchema: getCollectionPullRequestsResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Creates a pull request for a forked collection into its parent collection.
   * @param {string} collectionId - The collection's unique ID.
   * @returns {Promise<HttpResponse<PullRequestCreated>>} Successful Response
   */
  async createCollectionPullRequest(
    collectionId: string,
    body: PullRequestCreate,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PullRequestCreated>> {
    const path = this.client.buildPath('/collections/{collectionId}/pull-requests', { collectionId: collectionId });
    const options: any = {
      responseSchema: pullRequestCreatedResponse,
      requestSchema: pullRequestCreateRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   * Gets information about all roles in a collection. The response returns the IDs of all users, teams, and groups with access to view or edit the collection.
   * @param {string} collectionId - The collection's ID.
   * @returns {Promise<HttpResponse<GetCollectionRoles>>} Successful Response
   */
  async getCollectionRoles(
    collectionId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetCollectionRoles>> {
    const path = this.client.buildPath('/collections/{collectionId}/roles', { collectionId: collectionId });
    const options: any = {
      responseSchema: getCollectionRolesResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
 * Updates the roles of users, groups, or teams in a collection. On success, this returns a `204 No Content` response.
**Note:**

- Only users assigned the EDITOR [role](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#collection-roles) in the collection can use this endpoint.
- This endpoint does not support the external [Partner or Guest roles](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).

 * @param {string} collectionId - The collection's ID.
 * @returns {Promise<HttpResponse<any>>} No Content
 */
  async updateCollectionRoles(
    collectionId: string,
    body: UpdateCollectionRoles,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<undefined>> {
    const path = this.client.buildPath('/collections/{collectionId}/roles', { collectionId: collectionId });
    const options: any = {
      responseSchema: z.undefined(),
      requestSchema: updateCollectionRolesRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.patch(path, options);
  }

  /**
 * Checks whether there is a change between the forked collection and its parent (source) collection.
If the value of the `isSourceAhead` property is `true` in the response, then there is a difference between the forked collection and its source collection.

**Note:**

This endpoint may take a few minutes to return an updated `isSourceAhead` status.

 * @param {string} collectionId - The collection's ID.
 * @returns {Promise<HttpResponse<GetSourceCollectionStatus>>} Successful Response
 */
  async getSourceCollectionStatus(
    collectionId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetSourceCollectionStatus>> {
    const path = this.client.buildPath('/collections/{collectionId}/source-status', { collectionId: collectionId });
    const options: any = {
      responseSchema: getSourceCollectionStatusResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
 * Transforms an existing Postman Collection into a stringified OpenAPI definition.
**Note:**

This does not create an API.

 * @param {string} collectionId - The collection's ID.
 * @param {Format} [format] - Return the OpenAPI definition in the given format.
 * @returns {Promise<HttpResponse<TransformCollectionToOpenApi>>} Successful Response
 */
  async transformCollectionToOpenApi(
    collectionId: string,
    params?: TransformCollectionToOpenApiParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<TransformCollectionToOpenApi>> {
    const path = this.client.buildPath('/collections/{collectionId}/transformations', { collectionId: collectionId });
    const options: any = {
      responseSchema: transformCollectionToOpenApiResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.format) {
      options.queryParams['format'] = params?.format;
    }
    return this.client.get(path, options);
  }

  /**
   * Copies or moves folders into a collection or folder.
   * @returns {Promise<HttpResponse<TransferCollectionItems200Error>>} Successful Response
   */
  async transferCollectionFolders(
    body: TransferCollectionItems,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<TransferCollectionItems200Error>> {
    const path = '/collection-folders-transfers';
    const options: any = {
      responseSchema: transferCollectionItems200ErrorResponse,
      requestSchema: transferCollectionItemsRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   * Copies or moves requests into a collection or folder.
   * @returns {Promise<HttpResponse<TransferCollectionItems200Error>>} Successful Response
   */
  async transferCollectionRequests(
    body: TransferCollectionItems,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<TransferCollectionItems200Error>> {
    const path = '/collection-requests-transfers';
    const options: any = {
      responseSchema: transferCollectionItems200ErrorResponse,
      requestSchema: transferCollectionItemsRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   * Copies or moves responses into a request.
   * @returns {Promise<HttpResponse<TransferCollectionItems200Error>>} Successful Response
   */
  async transferCollectionResponses(
    body: TransferCollectionItems,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<TransferCollectionItems200Error>> {
    const path = '/collection-responses-transfers';
    const options: any = {
      responseSchema: transferCollectionItems200ErrorResponse,
      requestSchema: transferCollectionItemsRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }
}
