// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  getCollectionsCollections,
  getCollectionsCollectionsRequest,
  getCollectionsCollectionsResponse,
} from './get-collections-collections';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getCollections: any = z.lazy(() => {
  return z.object({
    collections: z.array(getCollectionsCollections).optional(),
  });
});

/**
 *
 * @typedef  {GetCollections} getCollections
 * @property {GetCollectionsCollections[]}
 */
export type GetCollections = z.infer<typeof getCollections>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionsResponse: any = z.lazy(() => {
  return z
    .object({
      collections: z.array(getCollectionsCollectionsResponse).optional(),
    })
    .transform((data) => ({
      collections: data['collections'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionsRequest: any = z.lazy(() => {
  return z.object({ collections: z.array(getCollectionsCollectionsRequest).nullish() }).transform((data) => ({
    collections: data['collections'],
  }));
});
