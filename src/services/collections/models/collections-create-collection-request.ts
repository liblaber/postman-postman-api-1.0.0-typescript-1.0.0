// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  createCollectionCollection1,
  createCollectionCollection1Request,
  createCollectionCollection1Response,
} from './create-collection-collection-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const collectionsCreateCollectionRequest = z.lazy(() => {
  return z.object({
    collection: createCollectionCollection1.optional(),
  });
});

/**
 *
 * @typedef  {CollectionsCreateCollectionRequest} collectionsCreateCollectionRequest
 * @property {CreateCollectionCollection1} - For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
 */
export type CollectionsCreateCollectionRequest = z.infer<typeof collectionsCreateCollectionRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const collectionsCreateCollectionRequestResponse = z.lazy(() => {
  return z
    .object({
      collection: createCollectionCollection1Response.optional(),
    })
    .transform((data) => ({
      collection: data['collection'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const collectionsCreateCollectionRequestRequest = z.lazy(() => {
  return z.object({ collection: createCollectionCollection1Request.nullish() }).transform((data) => ({
    collection: data['collection'],
  }));
});
