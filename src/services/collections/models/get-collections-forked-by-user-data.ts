// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getCollectionsForkedByUserData = z.object({
  forkName: z.string().optional(),
  forkId: z.string().optional(),
  sourceId: z.string().optional(),
  createdAt: z.string().optional(),
});

/**
 * Information about the forked collection.
 * @typedef  {GetCollectionsForkedByUserData} getCollectionsForkedByUserData - Information about the forked collection. - Information about the forked collection.
 * @property {string} - The forked collection's label.
 * @property {string} - The forked collection's ID.
 * @property {string} - The ID of the forked collection's source collection.
 * @property {string} - The date and time at which the fork was created.
 */
export type GetCollectionsForkedByUserData = z.infer<typeof getCollectionsForkedByUserData>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionsForkedByUserDataResponse = z
  .object({
    forkName: z.string().optional(),
    forkId: z.string().optional(),
    sourceId: z.string().optional(),
    createdAt: z.string().optional(),
  })
  .transform((data) => ({
    forkName: data['forkName'],
    forkId: data['forkId'],
    sourceId: data['sourceId'],
    createdAt: data['createdAt'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionsForkedByUserDataRequest = z
  .object({
    forkName: z.string().nullish(),
    forkId: z.string().nullish(),
    sourceId: z.string().nullish(),
    createdAt: z.string().nullish(),
  })
  .transform((data) => ({
    forkName: data['forkName'],
    forkId: data['forkId'],
    sourceId: data['sourceId'],
    createdAt: data['createdAt'],
  }));
