// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { groupRole } from './group-role';

/**
 * The shape of the model inside the application code - what the users use
 */
export const group = z.object({
  role: groupRole.optional(),
  id: z.number().optional(),
});

/**
 * Information about the group role.
 * @typedef  {Group} group - Information about the group role. - Information about the group role.
 * @property {GroupRole} - The role type:
- `VIEWER` — Can view, fork, and export collections.
- `EDITOR` — Can edit collections directly.

 * @property {number} - The role's ID.
 */
export type Group = z.infer<typeof group>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const groupResponse = z
  .object({
    role: groupRole.optional(),
    id: z.number().optional(),
  })
  .transform((data) => ({
    role: data['role'],
    id: data['id'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const groupRequest = z.object({ role: groupRole.nullish(), id: z.number().nullish() }).transform((data) => ({
  role: data['role'],
  id: data['id'],
}));
