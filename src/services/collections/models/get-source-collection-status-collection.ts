// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { collectionUid, collectionUidRequest, collectionUidResponse } from './collection-uid';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getSourceCollectionStatusCollection = z.object({
  collectionUid: collectionUid.optional(),
});

/**
 *
 * @typedef  {GetSourceCollectionStatusCollection} getSourceCollectionStatusCollection
 * @property {CollectionUid} - Information about the forked collection. The object's name is the forked collection's UID (`userId`-`collectionId`).
 */
export type GetSourceCollectionStatusCollection = z.infer<typeof getSourceCollectionStatusCollection>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getSourceCollectionStatusCollectionResponse = z
  .object({
    collectionUid: collectionUidResponse.optional(),
  })
  .transform((data) => ({
    collectionUid: data['collectionUid'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getSourceCollectionStatusCollectionRequest = z
  .object({ collectionUid: collectionUidRequest.nullish() })
  .transform((data) => ({
    collectionUid: data['collectionUid'],
  }));
