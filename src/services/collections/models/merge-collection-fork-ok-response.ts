// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  mergeCollectionForkCollection,
  mergeCollectionForkCollectionRequest,
  mergeCollectionForkCollectionResponse,
} from './merge-collection-fork-collection';

/**
 * The shape of the model inside the application code - what the users use
 */
export const mergeCollectionForkOkResponse = z.object({
  collection: mergeCollectionForkCollection.optional(),
});

/**
 *
 * @typedef  {MergeCollectionForkOkResponse} mergeCollectionForkOkResponse
 * @property {MergeCollectionForkCollection}
 */
export type MergeCollectionForkOkResponse = z.infer<typeof mergeCollectionForkOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const mergeCollectionForkOkResponseResponse = z
  .object({
    collection: mergeCollectionForkCollectionResponse.optional(),
  })
  .transform((data) => ({
    collection: data['collection'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const mergeCollectionForkOkResponseRequest = z
  .object({ collection: mergeCollectionForkCollectionRequest.nullish() })
  .transform((data) => ({
    collection: data['collection'],
  }));
