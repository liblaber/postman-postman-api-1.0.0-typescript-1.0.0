// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { collectionsFork, collectionsForkRequest, collectionsForkResponse } from './collections-fork';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getCollectionsCollections = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  owner: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  uid: z.string().optional(),
  fork: collectionsFork.optional(),
  isPublic: z.boolean().optional(),
});

/**
 * Information about the collection.
 * @typedef  {GetCollectionsCollections} getCollectionsCollections - Information about the collection. - Information about the collection.
 * @property {string} - The collection's ID.
 * @property {string} - The collection's name.
 * @property {string} - The owner of the collection.
 * @property {string} - The collection's creation date and time.
 * @property {string} - The date and time at which the collection was last updated.
 * @property {string} - The collection's unique ID.
 * @property {CollectionsFork} - If the collection is [forked](https://learning.postman.com/docs/collaborating-in-postman/version-control/#forking-postman-entities), the fork's information.
 * @property {boolean} - If true, the collection is public and visible to all users.
 */
export type GetCollectionsCollections = z.infer<typeof getCollectionsCollections>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionsCollectionsResponse = z
  .object({
    id: z.string().optional(),
    name: z.string().optional(),
    owner: z.string().optional(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    uid: z.string().optional(),
    fork: collectionsForkResponse.optional(),
    isPublic: z.boolean().optional(),
  })
  .transform((data) => ({
    id: data['id'],
    name: data['name'],
    owner: data['owner'],
    createdAt: data['createdAt'],
    updatedAt: data['updatedAt'],
    uid: data['uid'],
    fork: data['fork'],
    isPublic: data['isPublic'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionsCollectionsRequest = z
  .object({
    id: z.string().nullish(),
    name: z.string().nullish(),
    owner: z.string().nullish(),
    createdAt: z.string().nullish(),
    updatedAt: z.string().nullish(),
    uid: z.string().nullish(),
    fork: collectionsForkRequest.nullish(),
    isPublic: z.boolean().nullish(),
  })
  .transform((data) => ({
    id: data['id'],
    name: data['name'],
    owner: data['owner'],
    createdAt: data['createdAt'],
    updatedAt: data['updatedAt'],
    uid: data['uid'],
    fork: data['fork'],
    isPublic: data['isPublic'],
  }));
