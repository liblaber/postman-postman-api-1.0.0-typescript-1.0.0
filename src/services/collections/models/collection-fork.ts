// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const collectionFork = z.object({
  label: z.string().optional(),
  createdAt: z.string().optional(),
  from_: z.string().optional(),
});

/**
 * Information about the collection's fork.
 * @typedef  {CollectionFork} collectionFork - Information about the collection's fork. - Information about the collection's fork.
 * @property {string} - The fork's label.
 * @property {string} - The fork's creation date and time.
 * @property {string} - The unique ID of fork's source collection.
 */
export type CollectionFork = z.infer<typeof collectionFork>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const collectionForkResponse = z
  .object({
    label: z.string().optional(),
    createdAt: z.string().optional(),
    from: z.string().optional(),
  })
  .transform((data) => ({
    label: data['label'],
    createdAt: data['createdAt'],
    from_: data['from'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const collectionForkRequest = z
  .object({ label: z.string().nullish(), createdAt: z.string().nullish(), from_: z.string().nullish() })
  .transform((data) => ({
    label: data['label'],
    createdAt: data['createdAt'],
    from: data['from_'],
  }));
