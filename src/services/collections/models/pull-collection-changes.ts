// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  pullCollectionChangesCollection,
  pullCollectionChangesCollectionRequest,
  pullCollectionChangesCollectionResponse,
} from './pull-collection-changes-collection';

/**
 * The shape of the model inside the application code - what the users use
 */
export const pullCollectionChanges = z.lazy(() => {
  return z.object({
    collection: pullCollectionChangesCollection.optional(),
  });
});

/**
 *
 * @typedef  {PullCollectionChanges} pullCollectionChanges
 * @property {PullCollectionChangesCollection} - Information about the updated collection fork.
 */
export type PullCollectionChanges = z.infer<typeof pullCollectionChanges>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const pullCollectionChangesResponse = z.lazy(() => {
  return z
    .object({
      collection: pullCollectionChangesCollectionResponse.optional(),
    })
    .transform((data) => ({
      collection: data['collection'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const pullCollectionChangesRequest = z.lazy(() => {
  return z.object({ collection: pullCollectionChangesCollectionRequest.nullish() }).transform((data) => ({
    collection: data['collection'],
  }));
});
