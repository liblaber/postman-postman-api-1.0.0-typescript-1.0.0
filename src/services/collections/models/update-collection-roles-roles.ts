// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { rolesValue1, rolesValue1Request, rolesValue1Response } from './roles-value-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateCollectionRolesRoles = z.lazy(() => {
  return z.object({
    op: z.string(),
    path: z.string(),
    value: z.array(rolesValue1),
  });
});

/**
 *
 * @typedef  {UpdateCollectionRolesRoles} updateCollectionRolesRoles
 * @property {RolesOp} - The operation to perform on the path.
 * @property {RolesPath1} - The resource to perform the action on.
 * @property {RolesValue1[]}
 */
export type UpdateCollectionRolesRoles = z.infer<typeof updateCollectionRolesRoles>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateCollectionRolesRolesResponse = z.lazy(() => {
  return z
    .object({
      op: z.string(),
      path: z.string(),
      value: z.array(rolesValue1Response),
    })
    .transform((data) => ({
      op: data['op'],
      path: data['path'],
      value: data['value'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateCollectionRolesRolesRequest = z.lazy(() => {
  return z
    .object({ op: z.string().nullish(), path: z.string().nullish(), value: z.array(rolesValue1Request).nullish() })
    .transform((data) => ({
      op: data['op'],
      path: data['path'],
      value: data['value'],
    }));
});
