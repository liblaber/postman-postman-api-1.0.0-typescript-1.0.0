// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getCollection = z.lazy(() => {
  return z.object({
    collection: z.any().optional(),
  });
});

/**
 *
 * @typedef  {GetCollection} getCollection
 * @property {any} - For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
 */
export type GetCollection = z.infer<typeof getCollection>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionResponse = z.lazy(() => {
  return z
    .object({
      collection: z.any().optional(),
    })
    .transform((data) => ({
      collection: data['collection'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionRequest = z.lazy(() => {
  return z.object({ collection: z.any().nullish() }).transform((data) => ({
    collection: data['collection'],
  }));
});
