// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getCollectionRolesTeam: any = z.lazy(() => {
  return z.object({
    role: z.string().optional(),
    id: z.number().optional(),
  });
});

/**
 * Information about the team role.
 * @typedef  {GetCollectionRolesTeam} getCollectionRolesTeam - Information about the team role. - Information about the team role.
 * @property {TeamRole} - The role type:
- `VIEWER` — Can view, fork, and export collections.
- `EDITOR` — Can edit collections directly.

 * @property {number} - The role's ID.
 */
export type GetCollectionRolesTeam = z.infer<typeof getCollectionRolesTeam>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionRolesTeamResponse: any = z.lazy(() => {
  return z
    .object({
      role: z.string().optional(),
      id: z.number().optional(),
    })
    .transform((data) => ({
      role: data['role'],
      id: data['id'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionRolesTeamRequest: any = z.lazy(() => {
  return z.object({ role: z.string().nullish(), id: z.number().nullish() }).transform((data) => ({
    role: data['role'],
    id: data['id'],
  }));
});
