// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const collectionsFork = z.lazy(() => {
  return z.object({
    label: z.string().optional(),
    createdAt: z.string().optional(),
    from: z.string().optional(),
  });
});

/**
 * If the collection is [forked](https://learning.postman.com/docs/collaborating-in-postman/version-control/#forking-postman-entities), the fork's information.
 * @typedef  {CollectionsFork} collectionsFork - If the collection is [forked](https://learning.postman.com/docs/collaborating-in-postman/version-control/#forking-postman-entities), the fork's information. - If the collection is [forked](https://learning.postman.com/docs/collaborating-in-postman/version-control/#forking-postman-entities), the fork's information.
 * @property {string} - The fork's label.
 * @property {string} - The fork's creation date and time.
 * @property {string} - The unique ID of the fork's source collection.
 */
export type CollectionsFork = z.infer<typeof collectionsFork>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const collectionsForkResponse = z.lazy(() => {
  return z
    .object({
      label: z.string().optional(),
      createdAt: z.string().optional(),
      from: z.string().optional(),
    })
    .transform((data) => ({
      label: data['label'],
      createdAt: data['createdAt'],
      from: data['from'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const collectionsForkRequest = z.lazy(() => {
  return z
    .object({ label: z.string().nullish(), createdAt: z.string().nullish(), from: z.string().nullish() })
    .transform((data) => ({
      label: data['label'],
      createdAt: data['createdAt'],
      from: data['from'],
    }));
});
