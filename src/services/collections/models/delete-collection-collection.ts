// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const deleteCollectionCollection = z.object({
  id: z.string().optional(),
  uid: z.string().optional(),
});

/**
 * Information about the deleted collection.
 * @typedef  {DeleteCollectionCollection} deleteCollectionCollection - Information about the deleted collection. - Information about the deleted collection.
 * @property {string} - The deleted collection's ID.
 * @property {string} - The deleted collection's unique ID.
 */
export type DeleteCollectionCollection = z.infer<typeof deleteCollectionCollection>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const deleteCollectionCollectionResponse = z
  .object({
    id: z.string().optional(),
    uid: z.string().optional(),
  })
  .transform((data) => ({
    id: data['id'],
    uid: data['uid'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const deleteCollectionCollectionRequest = z
  .object({ id: z.string().nullish(), uid: z.string().nullish() })
  .transform((data) => ({
    id: data['id'],
    uid: data['uid'],
  }));
