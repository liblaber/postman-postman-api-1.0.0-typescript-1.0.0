// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { collectionInfo1, collectionInfo1Request, collectionInfo1Response } from './collection-info-1';
import { collectionItem, collectionItemRequest, collectionItemResponse } from './collection-item';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createCollectionCollection1: any = z.lazy(() => {
  return z.object({
    info: collectionInfo1,
    item: z.array(collectionItem).optional(),
  });
});

/**
 * For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
 * @typedef  {CreateCollectionCollection1} createCollectionCollection1 - For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). - For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
 * @property {CollectionInfo1} - An object that contains basic information about the collection. For a complete list of values, refer to the `definitions.info` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
 * @property {CollectionItem[]} - Information about the collection's HTTP requests and responses. For a complete list of values, refer to the `definitions.item` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
 */
export type CreateCollectionCollection1 = z.infer<typeof createCollectionCollection1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createCollectionCollection1Response: any = z.lazy(() => {
  return z
    .object({
      info: collectionInfo1Response,
      item: z.array(collectionItemResponse).optional(),
    })
    .transform((data) => ({
      info: data['info'],
      item: data['item'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createCollectionCollection1Request: any = z.lazy(() => {
  return z
    .object({ info: collectionInfo1Request.nullish(), item: z.array(collectionItemRequest).nullish() })
    .transform((data) => ({
      info: data['info'],
      item: data['item'],
    }));
});
