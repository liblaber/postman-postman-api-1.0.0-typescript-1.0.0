// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getCollectionForksMeta = z.lazy(() => {
  return z.object({
    nextCursor: z.string().optional().nullable(),
    total: z.number().optional(),
  });
});

/**
 * The response's meta information for paginated results.
 * @typedef  {GetCollectionForksMeta} getCollectionForksMeta - The response's meta information for paginated results. - The response's meta information for paginated results.
 * @property {string} - The pagination cursor that points to the next record in the results set.
 * @property {number} - The total number of forked collections.
 */
export type GetCollectionForksMeta = z.infer<typeof getCollectionForksMeta>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionForksMetaResponse = z.lazy(() => {
  return z
    .object({
      nextCursor: z.string().optional().nullable(),
      total: z.number().optional(),
    })
    .transform((data) => ({
      nextCursor: data['nextCursor'],
      total: data['total'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionForksMetaRequest = z.lazy(() => {
  return z.object({ nextCursor: z.string().nullish(), total: z.number().nullish() }).transform((data) => ({
    nextCursor: data['nextCursor'],
    total: data['total'],
  }));
});
