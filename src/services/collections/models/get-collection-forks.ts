// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  getCollectionForksData,
  getCollectionForksDataRequest,
  getCollectionForksDataResponse,
} from './get-collection-forks-data';
import {
  getCollectionForksMeta,
  getCollectionForksMetaRequest,
  getCollectionForksMetaResponse,
} from './get-collection-forks-meta';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getCollectionForks = z.lazy(() => {
  return z.object({
    data: z.array(getCollectionForksData).optional(),
    meta: getCollectionForksMeta.optional(),
  });
});

/**
 *
 * @typedef  {GetCollectionForks} getCollectionForks
 * @property {GetCollectionForksData[]} - A list of the collection's forks.
 * @property {GetCollectionForksMeta} - The response's meta information for paginated results.
 */
export type GetCollectionForks = z.infer<typeof getCollectionForks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionForksResponse = z.lazy(() => {
  return z
    .object({
      data: z.array(getCollectionForksDataResponse).optional(),
      meta: getCollectionForksMetaResponse.optional(),
    })
    .transform((data) => ({
      data: data['data'],
      meta: data['meta'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionForksRequest = z.lazy(() => {
  return z
    .object({ data: z.array(getCollectionForksDataRequest).nullish(), meta: getCollectionForksMetaRequest.nullish() })
    .transform((data) => ({
      data: data['data'],
      meta: data['meta'],
    }));
});
