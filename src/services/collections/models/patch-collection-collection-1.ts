// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { collectionInfo2, collectionInfo2Request, collectionInfo2Response } from './collection-info-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const patchCollectionCollection1 = z.lazy(() => {
  return z.object({
    info: collectionInfo2.optional(),
    variables: z.any().optional(),
    auth: z.any().optional(),
    events: z.any().optional(),
  });
});

/**
 *
 * @typedef  {PatchCollectionCollection1} patchCollectionCollection1
 * @property {CollectionInfo2} - An object that contains the collection's updated name and description.
 * @property {any} - The collection's updated variables. Refer to `"#/definitions/variable"` in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
 * @property {any} - The collection's updated authentication. Refer to `"#/definitions/auth-attribute"` in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
 * @property {any} - The collection's updated events. Refer to `"#/definitions/event"` in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
 */
export type PatchCollectionCollection1 = z.infer<typeof patchCollectionCollection1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const patchCollectionCollection1Response = z.lazy(() => {
  return z
    .object({
      info: collectionInfo2Response.optional(),
      variables: z.any().optional(),
      auth: z.any().optional(),
      events: z.any().optional(),
    })
    .transform((data) => ({
      info: data['info'],
      variables: data['variables'],
      auth: data['auth'],
      events: data['events'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const patchCollectionCollection1Request = z.lazy(() => {
  return z
    .object({
      info: collectionInfo2Request.nullish(),
      variables: z.any().nullish(),
      auth: z.any().nullish(),
      events: z.any().nullish(),
    })
    .transform((data) => ({
      info: data['info'],
      variables: data['variables'],
      auth: data['auth'],
      events: data['events'],
    }));
});
