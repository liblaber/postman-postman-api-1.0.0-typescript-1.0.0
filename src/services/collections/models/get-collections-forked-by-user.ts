// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  getCollectionsForkedByUserData,
  getCollectionsForkedByUserDataRequest,
  getCollectionsForkedByUserDataResponse,
} from './get-collections-forked-by-user-data';
import {
  getCollectionsForkedByUserMeta,
  getCollectionsForkedByUserMetaRequest,
  getCollectionsForkedByUserMetaResponse,
} from './get-collections-forked-by-user-meta';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getCollectionsForkedByUser = z.lazy(() => {
  return z.object({
    data: z.array(getCollectionsForkedByUserData).optional(),
    meta: getCollectionsForkedByUserMeta.optional(),
  });
});

/**
 *
 * @typedef  {GetCollectionsForkedByUser} getCollectionsForkedByUser
 * @property {GetCollectionsForkedByUserData[]} - A list of the user's forked collections.
 * @property {GetCollectionsForkedByUserMeta} - The response's meta information for paginated results.
 */
export type GetCollectionsForkedByUser = z.infer<typeof getCollectionsForkedByUser>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionsForkedByUserResponse = z.lazy(() => {
  return z
    .object({
      data: z.array(getCollectionsForkedByUserDataResponse).optional(),
      meta: getCollectionsForkedByUserMetaResponse.optional(),
    })
    .transform((data) => ({
      data: data['data'],
      meta: data['meta'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionsForkedByUserRequest = z.lazy(() => {
  return z
    .object({
      data: z.array(getCollectionsForkedByUserDataRequest).nullish(),
      meta: getCollectionsForkedByUserMetaRequest.nullish(),
    })
    .transform((data) => ({
      data: data['data'],
      meta: data['meta'],
    }));
});
