// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { dataStatus } from './data-status';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getCollectionPullRequestsData = z.object({
  createdAt: z.string().optional(),
  createdBy: z.string().optional(),
  description: z.string().optional(),
  destinationId: z.string().optional(),
  href: z.string().optional(),
  id: z.string().optional(),
  sourceId: z.string().optional(),
  status: dataStatus.optional(),
  comment: z.string().optional(),
  title: z.string().optional(),
  updatedBy: z.string().optional(),
  updatedAt: z.string().optional(),
});

/**
 * Information about the pull request.
 * @typedef  {GetCollectionPullRequestsData} getCollectionPullRequestsData - Information about the pull request. - Information about the pull request.
 * @property {string} - The date and time at which the pull request was created.
 * @property {string} - The ID of the user who created the pull request.
 * @property {string} - The pull request's description.
 * @property {string} - The pull request's merge destination ID.
 * @property {string} - A URL where you can view the pull request's details.
 * @property {string} - The pull request's ID.
 * @property {string} - The pull request's source (parent) ID.
 * @property {DataStatus} - The pull request's current status.
 * @property {string} - If the pull request is declined, a comment about why the pull request was declined.
 * @property {string} - The pull request's title.
 * @property {string} - The ID of the user who updated the pull request.
 * @property {string} - The date and time at which the pull request was updated.
 */
export type GetCollectionPullRequestsData = z.infer<typeof getCollectionPullRequestsData>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionPullRequestsDataResponse = z
  .object({
    createdAt: z.string().optional(),
    createdBy: z.string().optional(),
    description: z.string().optional(),
    destinationId: z.string().optional(),
    href: z.string().optional(),
    id: z.string().optional(),
    sourceId: z.string().optional(),
    status: dataStatus.optional(),
    comment: z.string().optional(),
    title: z.string().optional(),
    updatedBy: z.string().optional(),
    updatedAt: z.string().optional(),
  })
  .transform((data) => ({
    createdAt: data['createdAt'],
    createdBy: data['createdBy'],
    description: data['description'],
    destinationId: data['destinationId'],
    href: data['href'],
    id: data['id'],
    sourceId: data['sourceId'],
    status: data['status'],
    comment: data['comment'],
    title: data['title'],
    updatedBy: data['updatedBy'],
    updatedAt: data['updatedAt'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionPullRequestsDataRequest = z
  .object({
    createdAt: z.string().nullish(),
    createdBy: z.string().nullish(),
    description: z.string().nullish(),
    destinationId: z.string().nullish(),
    href: z.string().nullish(),
    id: z.string().nullish(),
    sourceId: z.string().nullish(),
    status: dataStatus.nullish(),
    comment: z.string().nullish(),
    title: z.string().nullish(),
    updatedBy: z.string().nullish(),
    updatedAt: z.string().nullish(),
  })
  .transform((data) => ({
    createdAt: data['createdAt'],
    createdBy: data['createdBy'],
    description: data['description'],
    destinationId: data['destinationId'],
    href: data['href'],
    id: data['id'],
    sourceId: data['sourceId'],
    status: data['status'],
    comment: data['comment'],
    title: data['title'],
    updatedBy: data['updatedBy'],
    updatedAt: data['updatedAt'],
  }));
