// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const collectionUid = z.lazy(() => {
  return z.object({
    isSourceAhead: z.boolean().optional(),
  });
});

/**
 * Information about the forked collection. The object's name is the forked collection's UID (`userId`-`collectionId`).
 * @typedef  {CollectionUid} collectionUid - Information about the forked collection. The object's name is the forked collection's UID (`userId`-`collectionId`). - Information about the forked collection. The object's name is the forked collection's UID (`userId`-`collectionId`).
 * @property {boolean} - If true, there is a difference between the forked collection and its source collection.
 */
export type CollectionUid = z.infer<typeof collectionUid>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const collectionUidResponse = z.lazy(() => {
  return z
    .object({
      isSourceAhead: z.boolean().optional(),
    })
    .transform((data) => ({
      isSourceAhead: data['isSourceAhead'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const collectionUidRequest = z.lazy(() => {
  return z.object({ isSourceAhead: z.boolean().nullish() }).transform((data) => ({
    isSourceAhead: data['isSourceAhead'],
  }));
});
