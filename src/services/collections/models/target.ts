// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const target: any = z.lazy(() => {
  return z.object({
    id: z.string(),
    model: z.string(),
  });
});

/**
 * Information about the item transfer's destination location.
 * @typedef  {Target} target - Information about the item transfer's destination location. - Information about the item transfer's destination location.
 * @property {string} - The UID of the destination collection, folder, or request.
 * @property {TargetModel} - The collection, folder, or request the items will be transferred to. For response transfers, use the `request` value.
 */
export type Target = z.infer<typeof target>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const targetResponse: any = z.lazy(() => {
  return z
    .object({
      id: z.string(),
      model: z.string(),
    })
    .transform((data) => ({
      id: data['id'],
      model: data['model'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const targetRequest: any = z.lazy(() => {
  return z.object({ id: z.string().nullish(), model: z.string().nullish() }).transform((data) => ({
    id: data['id'],
    model: data['model'],
  }));
});
