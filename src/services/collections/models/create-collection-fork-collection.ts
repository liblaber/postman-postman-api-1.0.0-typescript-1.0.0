// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { collectionFork, collectionForkRequest, collectionForkResponse } from './collection-fork';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createCollectionForkCollection = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  fork: collectionFork.optional(),
  uid: z.string().optional(),
});

/**
 * Information about the forked collection.
 * @typedef  {CreateCollectionForkCollection} createCollectionForkCollection - Information about the forked collection. - Information about the forked collection.
 * @property {string} - The forked collection's ID.
 * @property {string} - The collection's name.
 * @property {CollectionFork} - Information about the collection's fork.
 * @property {string} - The forked collection's unique ID.
 */
export type CreateCollectionForkCollection = z.infer<typeof createCollectionForkCollection>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createCollectionForkCollectionResponse = z
  .object({
    id: z.string().optional(),
    name: z.string().optional(),
    fork: collectionForkResponse.optional(),
    uid: z.string().optional(),
  })
  .transform((data) => ({
    id: data['id'],
    name: data['name'],
    fork: data['fork'],
    uid: data['uid'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createCollectionForkCollectionRequest = z
  .object({
    id: z.string().nullish(),
    name: z.string().nullish(),
    fork: collectionForkRequest.nullish(),
    uid: z.string().nullish(),
  })
  .transform((data) => ({
    id: data['id'],
    name: data['name'],
    fork: data['fork'],
    uid: data['uid'],
  }));
