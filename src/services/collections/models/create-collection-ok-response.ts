// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  createCollectionCollection2,
  createCollectionCollection2Request,
  createCollectionCollection2Response,
} from './create-collection-collection-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createCollectionOkResponse = z.lazy(() => {
  return z.object({
    collection: createCollectionCollection2.optional(),
  });
});

/**
 *
 * @typedef  {CreateCollectionOkResponse} createCollectionOkResponse
 * @property {CreateCollectionCollection2}
 */
export type CreateCollectionOkResponse = z.infer<typeof createCollectionOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createCollectionOkResponseResponse = z.lazy(() => {
  return z
    .object({
      collection: createCollectionCollection2Response.optional(),
    })
    .transform((data) => ({
      collection: data['collection'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createCollectionOkResponseRequest = z.lazy(() => {
  return z.object({ collection: createCollectionCollection2Request.nullish() }).transform((data) => ({
    collection: data['collection'],
  }));
});
