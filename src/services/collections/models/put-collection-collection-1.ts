// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const putCollectionCollection1 = z.lazy(() => {
  return z.object({
    info: z.any(),
    item: z.array(z.any()),
  });
});

/**
 * For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
 * @typedef  {PutCollectionCollection1} putCollectionCollection1 - For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). - For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
 * @property {any} - An object that contains basic information about the collection. For a complete list of values, refer to the `definitions.info` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
 * @property {any[]} - Information about the collection's contents, such as folders, requests, and responses. For a complete list of values, refer to the `#/definitions/item-group` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).

The maximum collection size cannot exceed 20 MB.

 */
export type PutCollectionCollection1 = z.infer<typeof putCollectionCollection1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const putCollectionCollection1Response = z.lazy(() => {
  return z
    .object({
      info: z.any(),
      item: z.array(z.any()),
    })
    .transform((data) => ({
      info: data['info'],
      item: data['item'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const putCollectionCollection1Request = z.lazy(() => {
  return z.object({ info: z.any().nullish(), item: z.array(z.any()).nullish() }).transform((data) => ({
    info: data['info'],
    item: data['item'],
  }));
});
