// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { target, targetRequest, targetResponse } from './target';
import { location, locationRequest, locationResponse } from './location';

/**
 * The shape of the model inside the application code - what the users use
 */
export const transferCollectionItems = z.lazy(() => {
  return z.object({
    ids: z.array(z.string()),
    mode: z.string(),
    target: target,
    location: location,
  });
});

/**
 * 
 * @typedef  {TransferCollectionItems} transferCollectionItems   
 * @property {string[]} - A list of collection request, response, or folder UIDs to transfer.
 * @property {Mode} - The transfer operation to perform.
 * @property {Target} - Information about the item transfer's destination location.
 * @property {Location} - The transferred items' placement in the target destination:
- For `start` or `end` — Do not include the `model` and `id` values.
- For `before` or `after` — Include the `model` and `id` properties.

 */
export type TransferCollectionItems = z.infer<typeof transferCollectionItems>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const transferCollectionItemsResponse = z.lazy(() => {
  return z
    .object({
      ids: z.array(z.string()),
      mode: z.string(),
      target: targetResponse,
      location: locationResponse,
    })
    .transform((data) => ({
      ids: data['ids'],
      mode: data['mode'],
      target: data['target'],
      location: data['location'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const transferCollectionItemsRequest = z.lazy(() => {
  return z
    .object({
      ids: z.array(z.string()).nullish(),
      mode: z.string().nullish(),
      target: targetRequest.nullish(),
      location: locationRequest.nullish(),
    })
    .transform((data) => ({
      ids: data['ids'],
      mode: data['mode'],
      target: data['target'],
      location: data['location'],
    }));
});
