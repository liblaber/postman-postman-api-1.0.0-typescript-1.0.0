// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { strategy } from './strategy';

/**
 * The shape of the model inside the application code - what the users use
 */
export const mergeCollectionForkRequest = z.object({
  destination: z.string(),
  source: z.string(),
  strategy: strategy.optional(),
});

/**
 * 
 * @typedef  {MergeCollectionForkRequest} mergeCollectionForkRequest   
 * @property {string} - The destination (parent) collection's unique ID.
 * @property {string} - The source collection's unique ID.
 * @property {Strategy} - The fork's merge strategy:
- `deleteSource` — Merge the changes into the parent collection. After the merge process is complete, Postman deletes the fork. You must have Editor access to both the parent and forked collections.
- `updateSourceWithDestination` — Merge the changes into the parent collection. Any differences in the parent collection are also made to the fork.

 */
export type MergeCollectionForkRequest = z.infer<typeof mergeCollectionForkRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const mergeCollectionForkRequestResponse = z
  .object({
    destination: z.string(),
    source: z.string(),
    strategy: strategy.optional(),
  })
  .transform((data) => ({
    destination: data['destination'],
    source: data['source'],
    strategy: data['strategy'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const mergeCollectionForkRequestRequest = z
  .object({ destination: z.string().nullish(), source: z.string().nullish(), strategy: strategy.nullish() })
  .transform((data) => ({
    destination: data['destination'],
    source: data['source'],
    strategy: data['strategy'],
  }));
