// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  patchCollectionCollection1,
  patchCollectionCollection1Request,
  patchCollectionCollection1Response,
} from './patch-collection-collection-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const patchCollectionRequest = z.lazy(() => {
  return z.object({
    collection: patchCollectionCollection1.optional(),
  });
});

/**
 *
 * @typedef  {PatchCollectionRequest} patchCollectionRequest
 * @property {PatchCollectionCollection1}
 */
export type PatchCollectionRequest = z.infer<typeof patchCollectionRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const patchCollectionRequestResponse = z.lazy(() => {
  return z
    .object({
      collection: patchCollectionCollection1Response.optional(),
    })
    .transform((data) => ({
      collection: data['collection'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const patchCollectionRequestRequest = z.lazy(() => {
  return z.object({ collection: patchCollectionCollection1Request.nullish() }).transform((data) => ({
    collection: data['collection'],
  }));
});
