// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { GetEnvironments, getEnvironmentsResponse } from './models/get-environments';
import {
  CreateEnvironmentParams,
  ForkEnvironmentParams,
  GetEnvironmentForksParams,
  GetEnvironmentsParams,
} from './request-params';
import { CreateEnvironmentRequest, createEnvironmentRequestRequest } from './models/create-environment-request';
import {
  CreateEnvironmentOkResponse,
  createEnvironmentOkResponseResponse,
} from './models/create-environment-ok-response';
import { GetEnvironment, getEnvironmentResponse } from './models/get-environment';
import { UpdateEnvironmentRequest, updateEnvironmentRequestRequest } from './models/update-environment-request';
import {
  UpdateEnvironmentOkResponse,
  updateEnvironmentOkResponseResponse,
} from './models/update-environment-ok-response';
import { DeleteEnvironment, deleteEnvironmentResponse } from './models/delete-environment';
import { GetEnvironmentForks, getEnvironmentForksResponse } from './models/get-environment-forks';
import { ForkEnvironmentRequest, forkEnvironmentRequestRequest } from './models/fork-environment-request';
import { ForkEnvironmentOkResponse, forkEnvironmentOkResponseResponse } from './models/fork-environment-ok-response';
import {
  MergeEnvironmentForkRequest,
  mergeEnvironmentForkRequestRequest,
} from './models/merge-environment-fork-request';
import {
  MergeEnvironmentForkOkResponse,
  mergeEnvironmentForkOkResponseResponse,
} from './models/merge-environment-fork-ok-response';
import { PullEnvironmentRequest, pullEnvironmentRequestRequest } from './models/pull-environment-request';
import { PullEnvironmentOkResponse, pullEnvironmentOkResponseResponse } from './models/pull-environment-ok-response';

export class EnvironmentsService extends BaseService {
  /**
   * Gets information about all of your [environments](https://learning.postman.com/docs/sending-requests/managing-environments/).
   * @param {string} [workspace] - The workspace's ID.
   * @returns {Promise<HttpResponse<GetEnvironments>>} Successful Response
   */
  async getEnvironments(
    params?: GetEnvironmentsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetEnvironments>> {
    const request = new RequestBuilder<GetEnvironments>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/environments')
      .setRequestSchema(z.any())
      .setResponseSchema(getEnvironmentsResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'workspace',
        value: params?.workspace,
      })
      .build();
    return this.client.call<GetEnvironments>(request);
  }

  /**
   * Creates an environment.
   * @param {string} [workspace] - The workspace's ID.
   * @returns {Promise<HttpResponse<CreateEnvironmentOkResponse>>} Successful Response
   */
  async createEnvironment(
    body: CreateEnvironmentRequest,
    params?: CreateEnvironmentParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateEnvironmentOkResponse>> {
    const request = new RequestBuilder<CreateEnvironmentOkResponse>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('POST')
      .setPath('/environments')
      .setRequestSchema(createEnvironmentRequestRequest)
      .setResponseSchema(createEnvironmentOkResponseResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'workspace',
        value: params?.workspace,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<CreateEnvironmentOkResponse>(request);
  }

  /**
   * Gets information about an environment.
   * @param {string} environmentId - The environment's ID.
   * @returns {Promise<HttpResponse<GetEnvironment>>} Successful Response
   */
  async getEnvironment(environmentId: string, requestConfig?: RequestConfig): Promise<HttpResponse<GetEnvironment>> {
    const request = new RequestBuilder<GetEnvironment>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/environments/{environmentId}')
      .setRequestSchema(z.any())
      .setResponseSchema(getEnvironmentResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'environmentId',
        value: environmentId,
      })
      .build();
    return this.client.call<GetEnvironment>(request);
  }

  /**
   * Updates an environment.
   * @param {string} environmentId - The environment's ID.
   * @returns {Promise<HttpResponse<UpdateEnvironmentOkResponse>>} Successful Response
   */
  async updateEnvironment(
    environmentId: string,
    body: UpdateEnvironmentRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<UpdateEnvironmentOkResponse>> {
    const request = new RequestBuilder<UpdateEnvironmentOkResponse>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('PUT')
      .setPath('/environments/{environmentId}')
      .setRequestSchema(updateEnvironmentRequestRequest)
      .setResponseSchema(updateEnvironmentOkResponseResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'environmentId',
        value: environmentId,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<UpdateEnvironmentOkResponse>(request);
  }

  /**
   * Deletes an environment.
   * @param {string} environmentId - The environment's ID.
   * @returns {Promise<HttpResponse<DeleteEnvironment>>} Successful Response
   */
  async deleteEnvironment(
    environmentId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<DeleteEnvironment>> {
    const request = new RequestBuilder<DeleteEnvironment>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('DELETE')
      .setPath('/environments/{environmentId}')
      .setRequestSchema(z.any())
      .setResponseSchema(deleteEnvironmentResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'environmentId',
        value: environmentId,
      })
      .build();
    return this.client.call<DeleteEnvironment>(request);
  }

  /**
   * Gets all of an environment's forked environments.
   * @param {string} environmentId - The environment's unique ID.
   * @param {string} [cursor] - The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.
   * @param {AscDesc} [direction] - Sort results in ascending (`asc`) or descending (`desc`) order.
   * @param {number} [limit] - The maximum number of rows to return in the response.
   * @param {GetEnvironmentForksSort} [sort] - Sort the results by the date and time of creation.
   * @returns {Promise<HttpResponse<GetEnvironmentForks>>} Successful Response
   */
  async getEnvironmentForks(
    environmentId: string,
    params?: GetEnvironmentForksParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetEnvironmentForks>> {
    const request = new RequestBuilder<GetEnvironmentForks>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/environments/{environmentId}/forks')
      .setRequestSchema(z.any())
      .setResponseSchema(getEnvironmentForksResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'environmentId',
        value: environmentId,
      })
      .addQueryParam({
        key: 'cursor',
        value: params?.cursor,
      })
      .addQueryParam({
        key: 'direction',
        value: params?.direction,
      })
      .addQueryParam({
        key: 'limit',
        value: params?.limit,
      })
      .addQueryParam({
        key: 'sort',
        value: params?.sort,
      })
      .build();
    return this.client.call<GetEnvironmentForks>(request);
  }

  /**
   * Creates a [fork](https://learning.postman.com/docs/collaborating-in-postman/using-version-control/forking-elements/) of an existing environment.
   * @param {string} environmentId - The environment's unique ID.
   * @param {string} workspaceId - The workspace's ID.
   * @returns {Promise<HttpResponse<ForkEnvironmentOkResponse>>} Successful Response
   */
  async forkEnvironment(
    environmentId: string,
    body: ForkEnvironmentRequest,
    params: ForkEnvironmentParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ForkEnvironmentOkResponse>> {
    const request = new RequestBuilder<ForkEnvironmentOkResponse>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('POST')
      .setPath('/environments/{environmentId}/forks')
      .setRequestSchema(forkEnvironmentRequestRequest)
      .setResponseSchema(forkEnvironmentOkResponseResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'environmentId',
        value: environmentId,
      })
      .addQueryParam({
        key: 'workspaceId',
        value: params?.workspaceId,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<ForkEnvironmentOkResponse>(request);
  }

  /**
   * [Merges](https://learning.postman.com/docs/collaborating-in-postman/using-version-control/forking-elements/#merge-changes-from-a-fork) a forked environment back into its parent environment.
   * @param {string} environmentId - The environment's unique ID.
   * @returns {Promise<HttpResponse<MergeEnvironmentForkOkResponse>>} Successful Response
   */
  async mergeEnvironmentFork(
    environmentId: string,
    body: MergeEnvironmentForkRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<MergeEnvironmentForkOkResponse>> {
    const request = new RequestBuilder<MergeEnvironmentForkOkResponse>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('POST')
      .setPath('/environments/{environmentId}/merges')
      .setRequestSchema(mergeEnvironmentForkRequestRequest)
      .setResponseSchema(mergeEnvironmentForkOkResponseResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'environmentId',
        value: environmentId,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<MergeEnvironmentForkOkResponse>(request);
  }

  /**
   * [Pulls](https://learning.postman.com/docs/collaborating-in-postman/using-version-control/forking-elements/#pull-updates-from-a-parent-element) the changes from a parent (source) environment into the forked environment.
   * @param {string} environmentId - The environment's unique ID.
   * @returns {Promise<HttpResponse<PullEnvironmentOkResponse>>} Successful Response
   */
  async pullEnvironment(
    environmentId: string,
    body: PullEnvironmentRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PullEnvironmentOkResponse>> {
    const request = new RequestBuilder<PullEnvironmentOkResponse>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('POST')
      .setPath('/environments/{environmentId}/pulls')
      .setRequestSchema(pullEnvironmentRequestRequest)
      .setResponseSchema(pullEnvironmentOkResponseResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'environmentId',
        value: environmentId,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<PullEnvironmentOkResponse>(request);
  }
}
