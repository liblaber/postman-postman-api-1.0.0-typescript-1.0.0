// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { Request } from '../../http/transport/request';
import { GetEnvironments, getEnvironmentsResponse } from './models/get-environments';
import {
  CreateEnvironmentParams,
  ForkEnvironmentParams,
  GetEnvironmentForksParams,
  GetEnvironmentsParams,
} from './request-params';
import { CreateEnvironmentRequest, createEnvironmentRequestRequest } from './models/create-environment-request';
import {
  CreateEnvironmentOkResponse,
  createEnvironmentOkResponseResponse,
} from './models/create-environment-ok-response';
import { GetEnvironment, getEnvironmentResponse } from './models/get-environment';
import { UpdateEnvironmentRequest, updateEnvironmentRequestRequest } from './models/update-environment-request';
import {
  UpdateEnvironmentOkResponse,
  updateEnvironmentOkResponseResponse,
} from './models/update-environment-ok-response';
import { DeleteEnvironment, deleteEnvironmentResponse } from './models/delete-environment';
import { GetEnvironmentForks, getEnvironmentForksResponse } from './models/get-environment-forks';
import { ForkEnvironmentRequest, forkEnvironmentRequestRequest } from './models/fork-environment-request';
import { ForkEnvironmentOkResponse, forkEnvironmentOkResponseResponse } from './models/fork-environment-ok-response';
import {
  MergeEnvironmentForkRequest,
  mergeEnvironmentForkRequestRequest,
} from './models/merge-environment-fork-request';
import {
  MergeEnvironmentForkOkResponse,
  mergeEnvironmentForkOkResponseResponse,
} from './models/merge-environment-fork-ok-response';
import { PullEnvironmentRequest, pullEnvironmentRequestRequest } from './models/pull-environment-request';
import { PullEnvironmentOkResponse, pullEnvironmentOkResponseResponse } from './models/pull-environment-ok-response';

export class EnvironmentsService extends BaseService {
  /**
   * Gets information about all of your [environments](https://learning.postman.com/docs/sending-requests/managing-environments/).
   * @param {string} [workspace] - The workspace's ID.
   * @returns {Promise<HttpResponse<GetEnvironments>>} Successful Response
   */
  async getEnvironments(
    params?: GetEnvironmentsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetEnvironments>> {
    const request = new Request({
      method: 'GET',
      path: '/environments',
      config: this.config,
      responseSchema: getEnvironmentsResponse,
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addQueryParam('workspace', params?.workspace);
    return this.client.call<GetEnvironments>(request);
  }

  /**
   * Creates an environment.
   * @param {string} [workspace] - The workspace's ID.
   * @returns {Promise<HttpResponse<CreateEnvironmentOkResponse>>} Successful Response
   */
  async createEnvironment(
    body: CreateEnvironmentRequest,
    params?: CreateEnvironmentParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateEnvironmentOkResponse>> {
    const request = new Request({
      method: 'POST',
      body,
      path: '/environments',
      config: this.config,
      responseSchema: createEnvironmentOkResponseResponse,
      requestSchema: createEnvironmentRequestRequest,
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addQueryParam('workspace', params?.workspace);
    request.addHeaderParam('Content-Type', 'application/json');
    return this.client.call<CreateEnvironmentOkResponse>(request);
  }

  /**
   * Gets information about an environment.
   * @param {string} environmentId - The environment's ID.
   * @returns {Promise<HttpResponse<GetEnvironment>>} Successful Response
   */
  async getEnvironment(environmentId: string, requestConfig?: RequestConfig): Promise<HttpResponse<GetEnvironment>> {
    const request = new Request({
      method: 'GET',
      path: '/environments/{environmentId}',
      config: this.config,
      responseSchema: getEnvironmentResponse,
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('environmentId', environmentId);
    return this.client.call<GetEnvironment>(request);
  }

  /**
   * Updates an environment.
   * @param {string} environmentId - The environment's ID.
   * @returns {Promise<HttpResponse<UpdateEnvironmentOkResponse>>} Successful Response
   */
  async updateEnvironment(
    environmentId: string,
    body: UpdateEnvironmentRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<UpdateEnvironmentOkResponse>> {
    const request = new Request({
      method: 'PUT',
      body,
      path: '/environments/{environmentId}',
      config: this.config,
      responseSchema: updateEnvironmentOkResponseResponse,
      requestSchema: updateEnvironmentRequestRequest,
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('environmentId', environmentId);
    request.addHeaderParam('Content-Type', 'application/json');
    return this.client.call<UpdateEnvironmentOkResponse>(request);
  }

  /**
   * Deletes an environment.
   * @param {string} environmentId - The environment's ID.
   * @returns {Promise<HttpResponse<DeleteEnvironment>>} Successful Response
   */
  async deleteEnvironment(
    environmentId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<DeleteEnvironment>> {
    const request = new Request({
      method: 'DELETE',
      path: '/environments/{environmentId}',
      config: this.config,
      responseSchema: deleteEnvironmentResponse,
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('environmentId', environmentId);
    return this.client.call<DeleteEnvironment>(request);
  }

  /**
   * Gets all of an environment's forked environments.
   * @param {string} environmentId - The environment's unique ID.
   * @param {string} [cursor] - The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.
   * @param {AscDesc} [direction] - Sort results in ascending (`asc`) or descending (`desc`) order.
   * @param {number} [limit] - The maximum number of rows to return in the response.
   * @param {GetEnvironmentForksSort} [sort] - Sort the results by the date and time of creation.
   * @returns {Promise<HttpResponse<GetEnvironmentForks>>} Successful Response
   */
  async getEnvironmentForks(
    environmentId: string,
    params?: GetEnvironmentForksParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetEnvironmentForks>> {
    const request = new Request({
      method: 'GET',
      path: '/environments/{environmentId}/forks',
      config: this.config,
      responseSchema: getEnvironmentForksResponse,
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('environmentId', environmentId);
    request.addQueryParam('cursor', params?.cursor);
    request.addQueryParam('direction', params?.direction);
    request.addQueryParam('limit', params?.limit);
    request.addQueryParam('sort', params?.sort);
    return this.client.call<GetEnvironmentForks>(request);
  }

  /**
   * Creates a [fork](https://learning.postman.com/docs/collaborating-in-postman/using-version-control/forking-elements/) of an existing environment.
   * @param {string} environmentId - The environment's unique ID.
   * @param {string} workspaceId - The workspace's ID.
   * @returns {Promise<HttpResponse<ForkEnvironmentOkResponse>>} Successful Response
   */
  async forkEnvironment(
    environmentId: string,
    body: ForkEnvironmentRequest,
    params: ForkEnvironmentParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ForkEnvironmentOkResponse>> {
    const request = new Request({
      method: 'POST',
      body,
      path: '/environments/{environmentId}/forks',
      config: this.config,
      responseSchema: forkEnvironmentOkResponseResponse,
      requestSchema: forkEnvironmentRequestRequest,
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('environmentId', environmentId);
    request.addQueryParam('workspaceId', params?.workspaceId);
    request.addHeaderParam('Content-Type', 'application/json');
    return this.client.call<ForkEnvironmentOkResponse>(request);
  }

  /**
   * [Merges](https://learning.postman.com/docs/collaborating-in-postman/using-version-control/forking-elements/#merge-changes-from-a-fork) a forked environment back into its parent environment.
   * @param {string} environmentId - The environment's unique ID.
   * @returns {Promise<HttpResponse<MergeEnvironmentForkOkResponse>>} Successful Response
   */
  async mergeEnvironmentFork(
    environmentId: string,
    body: MergeEnvironmentForkRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<MergeEnvironmentForkOkResponse>> {
    const request = new Request({
      method: 'POST',
      body,
      path: '/environments/{environmentId}/merges',
      config: this.config,
      responseSchema: mergeEnvironmentForkOkResponseResponse,
      requestSchema: mergeEnvironmentForkRequestRequest,
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('environmentId', environmentId);
    request.addHeaderParam('Content-Type', 'application/json');
    return this.client.call<MergeEnvironmentForkOkResponse>(request);
  }

  /**
   * [Pulls](https://learning.postman.com/docs/collaborating-in-postman/using-version-control/forking-elements/#pull-updates-from-a-parent-element) the changes from a parent (source) environment into the forked environment.
   * @param {string} environmentId - The environment's unique ID.
   * @returns {Promise<HttpResponse<PullEnvironmentOkResponse>>} Successful Response
   */
  async pullEnvironment(
    environmentId: string,
    body: PullEnvironmentRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PullEnvironmentOkResponse>> {
    const request = new Request({
      method: 'POST',
      body,
      path: '/environments/{environmentId}/pulls',
      config: this.config,
      responseSchema: pullEnvironmentOkResponseResponse,
      requestSchema: pullEnvironmentRequestRequest,
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('environmentId', environmentId);
    request.addHeaderParam('Content-Type', 'application/json');
    return this.client.call<PullEnvironmentOkResponse>(request);
  }
}
