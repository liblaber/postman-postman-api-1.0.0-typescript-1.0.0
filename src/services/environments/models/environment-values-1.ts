// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { valuesType1 } from './values-type-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const environmentValues1 = z.object({
  enabled: z.boolean().optional(),
  key: z.string().optional(),
  value: z.string().optional(),
  type_: valuesType1.optional(),
});

/**
 *
 * @typedef  {EnvironmentValues1} environmentValues1
 * @property {boolean} - If true, the variable is enabled.
 * @property {string} - The variable's name.
 * @property {string} - The variable's value.
 * @property {ValuesType1} - The variable type.
 */
export type EnvironmentValues1 = z.infer<typeof environmentValues1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const environmentValues1Response = z
  .object({
    enabled: z.boolean().optional(),
    key: z.string().optional(),
    value: z.string().optional(),
    type: valuesType1.optional(),
  })
  .transform((data) => ({
    enabled: data['enabled'],
    key: data['key'],
    value: data['value'],
    type_: data['type'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const environmentValues1Request = z
  .object({
    enabled: z.boolean().nullish(),
    key: z.string().nullish(),
    value: z.string().nullish(),
    type_: valuesType1.nullish(),
  })
  .transform((data) => ({
    enabled: data['enabled'],
    key: data['key'],
    value: data['value'],
    type: data['type_'],
  }));
