// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { environmentValues1, environmentValues1Request, environmentValues1Response } from './environment-values-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createEnvironmentEnvironment1 = z.lazy(() => {
  return z.object({
    name: z.string(),
    values: z.array(environmentValues1).optional(),
  });
});

/**
 *
 * @typedef  {CreateEnvironmentEnvironment1} createEnvironmentEnvironment1
 * @property {string} - The environment's name.
 * @property {EnvironmentValues1[]} - Information about the environment's variables.
 */
export type CreateEnvironmentEnvironment1 = z.infer<typeof createEnvironmentEnvironment1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createEnvironmentEnvironment1Response = z.lazy(() => {
  return z
    .object({
      name: z.string(),
      values: z.array(environmentValues1Response).optional(),
    })
    .transform((data) => ({
      name: data['name'],
      values: data['values'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createEnvironmentEnvironment1Request = z.lazy(() => {
  return z
    .object({ name: z.string().nullish(), values: z.array(environmentValues1Request).nullish() })
    .transform((data) => ({
      name: data['name'],
      values: data['values'],
    }));
});
