// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  getEnvironmentForksData,
  getEnvironmentForksDataRequest,
  getEnvironmentForksDataResponse,
} from './get-environment-forks-data';
import {
  getEnvironmentForksMeta,
  getEnvironmentForksMetaRequest,
  getEnvironmentForksMetaResponse,
} from './get-environment-forks-meta';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getEnvironmentForks = z.lazy(() => {
  return z.object({
    data: z.array(getEnvironmentForksData).optional(),
    meta: getEnvironmentForksMeta.optional(),
  });
});

/**
 *
 * @typedef  {GetEnvironmentForks} getEnvironmentForks
 * @property {GetEnvironmentForksData[]} - A list of the environment's forks.
 * @property {GetEnvironmentForksMeta} - The response's meta information for paginated results.
 */
export type GetEnvironmentForks = z.infer<typeof getEnvironmentForks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getEnvironmentForksResponse = z.lazy(() => {
  return z
    .object({
      data: z.array(getEnvironmentForksDataResponse).optional(),
      meta: getEnvironmentForksMetaResponse.optional(),
    })
    .transform((data) => ({
      data: data['data'],
      meta: data['meta'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getEnvironmentForksRequest = z.lazy(() => {
  return z
    .object({ data: z.array(getEnvironmentForksDataRequest).nullish(), meta: getEnvironmentForksMetaRequest.nullish() })
    .transform((data) => ({
      data: data['data'],
      meta: data['meta'],
    }));
});
