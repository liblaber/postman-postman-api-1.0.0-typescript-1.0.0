// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  getEnvironmentEnvironment,
  getEnvironmentEnvironmentRequest,
  getEnvironmentEnvironmentResponse,
} from './get-environment-environment';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getEnvironment: any = z.lazy(() => {
  return z.object({
    environment: getEnvironmentEnvironment.optional(),
  });
});

/**
 *
 * @typedef  {GetEnvironment} getEnvironment
 * @property {GetEnvironmentEnvironment}
 */
export type GetEnvironment = z.infer<typeof getEnvironment>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getEnvironmentResponse: any = z.lazy(() => {
  return z
    .object({
      environment: getEnvironmentEnvironmentResponse.optional(),
    })
    .transform((data) => ({
      environment: data['environment'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getEnvironmentRequest: any = z.lazy(() => {
  return z.object({ environment: getEnvironmentEnvironmentRequest.nullish() }).transform((data) => ({
    environment: data['environment'],
  }));
});
