// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { environmentValues3, environmentValues3Request, environmentValues3Response } from './environment-values-3';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateEnvironmentEnvironment1 = z.object({
  name: z.string().optional(),
  values: z.array(environmentValues3).optional(),
});

/**
 *
 * @typedef  {UpdateEnvironmentEnvironment1} updateEnvironmentEnvironment1
 * @property {string} - The environment's name.
 * @property {EnvironmentValues3[]} - Information about the environment's variables.
 */
export type UpdateEnvironmentEnvironment1 = z.infer<typeof updateEnvironmentEnvironment1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateEnvironmentEnvironment1Response = z
  .object({
    name: z.string().optional(),
    values: z.array(environmentValues3Response).optional(),
  })
  .transform((data) => ({
    name: data['name'],
    values: data['values'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateEnvironmentEnvironment1Request = z
  .object({ name: z.string().nullish(), values: z.array(environmentValues3Request).nullish() })
  .transform((data) => ({
    name: data['name'],
    values: data['values'],
  }));
