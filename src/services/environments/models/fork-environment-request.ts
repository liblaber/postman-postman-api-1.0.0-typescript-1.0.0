// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const forkEnvironmentRequest: any = z.lazy(() => {
  return z.object({
    forkName: z.string(),
  });
});

/**
 *
 * @typedef  {ForkEnvironmentRequest} forkEnvironmentRequest
 * @property {string} - The forked environment's label.
 */
export type ForkEnvironmentRequest = z.infer<typeof forkEnvironmentRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const forkEnvironmentRequestResponse: any = z.lazy(() => {
  return z
    .object({
      forkName: z.string(),
    })
    .transform((data) => ({
      forkName: data['forkName'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const forkEnvironmentRequestRequest: any = z.lazy(() => {
  return z.object({ forkName: z.string().nullish() }).transform((data) => ({
    forkName: data['forkName'],
  }));
});
