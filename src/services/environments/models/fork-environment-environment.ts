// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const forkEnvironmentEnvironment = z.lazy(() => {
  return z.object({
    uid: z.string().optional(),
    name: z.string().optional(),
    forkName: z.string().optional(),
  });
});

/**
 * Information about the forked environment.
 * @typedef  {ForkEnvironmentEnvironment} forkEnvironmentEnvironment - Information about the forked environment. - Information about the forked environment.
 * @property {string} - The forked environment's ID.
 * @property {string} - The name of the forked environment.
 * @property {string} - The forked environment's label.
 */
export type ForkEnvironmentEnvironment = z.infer<typeof forkEnvironmentEnvironment>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const forkEnvironmentEnvironmentResponse = z.lazy(() => {
  return z
    .object({
      uid: z.string().optional(),
      name: z.string().optional(),
      forkName: z.string().optional(),
    })
    .transform((data) => ({
      uid: data['uid'],
      name: data['name'],
      forkName: data['forkName'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const forkEnvironmentEnvironmentRequest = z.lazy(() => {
  return z
    .object({ uid: z.string().nullish(), name: z.string().nullish(), forkName: z.string().nullish() })
    .transform((data) => ({
      uid: data['uid'],
      name: data['name'],
      forkName: data['forkName'],
    }));
});
