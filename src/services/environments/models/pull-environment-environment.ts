// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const pullEnvironmentEnvironment: any = z.lazy(() => {
  return z.object({
    uid: z.string().optional(),
  });
});

/**
 * Information about the merged environment.
 * @typedef  {PullEnvironmentEnvironment} pullEnvironmentEnvironment - Information about the merged environment. - Information about the merged environment.
 * @property {string} - The merged environment's unique ID.
 */
export type PullEnvironmentEnvironment = z.infer<typeof pullEnvironmentEnvironment>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const pullEnvironmentEnvironmentResponse: any = z.lazy(() => {
  return z
    .object({
      uid: z.string().optional(),
    })
    .transform((data) => ({
      uid: data['uid'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const pullEnvironmentEnvironmentRequest: any = z.lazy(() => {
  return z.object({ uid: z.string().nullish() }).transform((data) => ({
    uid: data['uid'],
  }));
});
