// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { environmentValues2, environmentValues2Request, environmentValues2Response } from './environment-values-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getEnvironmentEnvironment: any = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    owner: z.string().optional(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    values: z.array(environmentValues2).optional(),
    isPublic: z.boolean().optional(),
  });
});

/**
 *
 * @typedef  {GetEnvironmentEnvironment} getEnvironmentEnvironment
 * @property {string} - The environment's ID.
 * @property {string} - The environment's name.
 * @property {string} - The ID of environment's owner.
 * @property {string} - The date and time at which the environment was created.
 * @property {string} - The date and time at which the environment was last updated.
 * @property {EnvironmentValues2[]} - Information about the environment's variables.
 * @property {boolean} - If true, the environment is public and visible to all users.
 */
export type GetEnvironmentEnvironment = z.infer<typeof getEnvironmentEnvironment>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getEnvironmentEnvironmentResponse: any = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      name: z.string().optional(),
      owner: z.string().optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      values: z.array(environmentValues2Response).optional(),
      isPublic: z.boolean().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      owner: data['owner'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      values: data['values'],
      isPublic: data['isPublic'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getEnvironmentEnvironmentRequest: any = z.lazy(() => {
  return z
    .object({
      id: z.string().nullish(),
      name: z.string().nullish(),
      owner: z.string().nullish(),
      createdAt: z.string().nullish(),
      updatedAt: z.string().nullish(),
      values: z.array(environmentValues2Request).nullish(),
      isPublic: z.boolean().nullish(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      owner: data['owner'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      values: data['values'],
      isPublic: data['isPublic'],
    }));
});
