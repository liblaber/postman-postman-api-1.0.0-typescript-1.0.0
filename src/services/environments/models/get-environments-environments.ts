// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getEnvironmentsEnvironments = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  owner: z.string().optional(),
  uid: z.string().optional(),
  isPublic: z.boolean().optional(),
});

/**
 *
 * @typedef  {GetEnvironmentsEnvironments} getEnvironmentsEnvironments
 * @property {string} - The environment's ID.
 * @property {string} - The environment's name.
 * @property {string} - The date and time at which the environment was created.
 * @property {string} - The date and time at which the environment was last updated.
 * @property {string} - The environment owner's ID.
 * @property {string} - The environment's unique ID.
 * @property {boolean} - If true, the environment is public and visible to all users.
 */
export type GetEnvironmentsEnvironments = z.infer<typeof getEnvironmentsEnvironments>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getEnvironmentsEnvironmentsResponse = z
  .object({
    id: z.string().optional(),
    name: z.string().optional(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    owner: z.string().optional(),
    uid: z.string().optional(),
    isPublic: z.boolean().optional(),
  })
  .transform((data) => ({
    id: data['id'],
    name: data['name'],
    createdAt: data['createdAt'],
    updatedAt: data['updatedAt'],
    owner: data['owner'],
    uid: data['uid'],
    isPublic: data['isPublic'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getEnvironmentsEnvironmentsRequest = z
  .object({
    id: z.string().nullish(),
    name: z.string().nullish(),
    createdAt: z.string().nullish(),
    updatedAt: z.string().nullish(),
    owner: z.string().nullish(),
    uid: z.string().nullish(),
    isPublic: z.boolean().nullish(),
  })
  .transform((data) => ({
    id: data['id'],
    name: data['name'],
    createdAt: data['createdAt'],
    updatedAt: data['updatedAt'],
    owner: data['owner'],
    uid: data['uid'],
    isPublic: data['isPublic'],
  }));
