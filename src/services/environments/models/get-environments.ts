// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  getEnvironmentsEnvironments,
  getEnvironmentsEnvironmentsRequest,
  getEnvironmentsEnvironmentsResponse,
} from './get-environments-environments';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getEnvironments = z.object({
  environments: z.array(getEnvironmentsEnvironments).optional(),
});

/**
 *
 * @typedef  {GetEnvironments} getEnvironments
 * @property {GetEnvironmentsEnvironments[]}
 */
export type GetEnvironments = z.infer<typeof getEnvironments>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getEnvironmentsResponse = z
  .object({
    environments: z.array(getEnvironmentsEnvironmentsResponse).optional(),
  })
  .transform((data) => ({
    environments: data['environments'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getEnvironmentsRequest = z
  .object({ environments: z.array(getEnvironmentsEnvironmentsRequest).nullish() })
  .transform((data) => ({
    environments: data['environments'],
  }));
