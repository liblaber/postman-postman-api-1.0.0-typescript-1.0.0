// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  pullEnvironmentEnvironment,
  pullEnvironmentEnvironmentRequest,
  pullEnvironmentEnvironmentResponse,
} from './pull-environment-environment';

/**
 * The shape of the model inside the application code - what the users use
 */
export const pullEnvironmentOkResponse = z.object({
  environment: pullEnvironmentEnvironment.optional(),
});

/**
 *
 * @typedef  {PullEnvironmentOkResponse} pullEnvironmentOkResponse
 * @property {PullEnvironmentEnvironment} - Information about the merged environment.
 */
export type PullEnvironmentOkResponse = z.infer<typeof pullEnvironmentOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const pullEnvironmentOkResponseResponse = z
  .object({
    environment: pullEnvironmentEnvironmentResponse.optional(),
  })
  .transform((data) => ({
    environment: data['environment'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const pullEnvironmentOkResponseRequest = z
  .object({ environment: pullEnvironmentEnvironmentRequest.nullish() })
  .transform((data) => ({
    environment: data['environment'],
  }));
