// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  createWebhookWebhook1,
  createWebhookWebhook1Request,
  createWebhookWebhook1Response,
} from './create-webhook-webhook-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createWebhookRequest: any = z.lazy(() => {
  return z.object({
    webhook: createWebhookWebhook1.optional(),
  });
});

/**
 *
 * @typedef  {CreateWebhookRequest} createWebhookRequest
 * @property {CreateWebhookWebhook1}
 */
export type CreateWebhookRequest = z.infer<typeof createWebhookRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createWebhookRequestResponse: any = z.lazy(() => {
  return z
    .object({
      webhook: createWebhookWebhook1Response.optional(),
    })
    .transform((data) => ({
      webhook: data['webhook'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createWebhookRequestRequest: any = z.lazy(() => {
  return z.object({ webhook: createWebhookWebhook1Request.nullish() }).transform((data) => ({
    webhook: data['webhook'],
  }));
});
