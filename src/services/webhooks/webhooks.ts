// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import {
  CreateWebhookOkResponse,
  CreateWebhookRequest,
  createWebhookOkResponseResponse,
  createWebhookRequestRequest,
} from './models';
import { CreateWebhookParams } from './request-params';

export class WebhooksService extends BaseService {
  /**
   * Creates a webhook that triggers a collection with a custom payload. You can get the webhook's URL from the `webhookUrl` property in the endpoint's response.
   * @param {string} [workspace] - The workspace's ID.
   * @returns {Promise<HttpResponse<CreateWebhookOkResponse>>} Successful Response
   */
  async createWebhook(
    body: CreateWebhookRequest,
    params?: CreateWebhookParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateWebhookOkResponse>> {
    const path = '/webhooks';
    const options: any = {
      responseSchema: createWebhookOkResponseResponse,
      requestSchema: createWebhookRequestRequest,
      body: body as any,
      queryParams: {},
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.workspace) {
      options.queryParams['workspace'] = params?.workspace;
    }
    return this.client.post(path, options);
  }
}
