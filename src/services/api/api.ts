// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import {
  AddApiCollectionOkResponse,
  AddApiCollectionRequest,
  CreateApiOkResponse,
  CreateApiRequest,
  CreateApiSchemaOkResponse,
  CreateApiSchemaRequest,
  CreateApiVersionAcceptedResponse,
  CreateApiVersionRequest,
  CreateUpdateApiSchemaFileOkResponse,
  CreateUpdateApiSchemaFileRequest,
  GetApi,
  GetApiSchema,
  GetApiSchemaFileContents,
  GetApiSchemaFiles,
  GetApiVersion,
  GetApiVersions,
  GetApis,
  GetStatusOfAnAsyncTask,
  SyncCollectionWithSchema,
  UpdateApiOkResponse,
  UpdateApiRequest,
  UpdateApiVersionOkResponse,
  UpdateApiVersionRequest,
  addApiCollectionOkResponseResponse,
  addApiCollectionRequestRequest,
  createApiOkResponseResponse,
  createApiRequestRequest,
  createApiSchemaOkResponseResponse,
  createApiSchemaRequestRequest,
  createApiVersionAcceptedResponseResponse,
  createApiVersionRequestRequest,
  createUpdateApiSchemaFileOkResponseResponse,
  createUpdateApiSchemaFileRequestRequest,
  getApiResponse,
  getApiSchemaFileContentsResponse,
  getApiSchemaFilesResponse,
  getApiSchemaResponse,
  getApiVersionResponse,
  getApiVersionsResponse,
  getApisResponse,
  getStatusOfAnAsyncTaskResponse,
  syncCollectionWithSchemaResponse,
  updateApiOkResponseResponse,
  updateApiRequestRequest,
  updateApiVersionOkResponseResponse,
  updateApiVersionRequestRequest,
} from './models';
import {
  AddApiCollectionParams,
  CreateApiParams,
  CreateApiSchemaParams,
  CreateApiVersionParams,
  CreateUpdateApiSchemaFileParams,
  DeleteApiParams,
  DeleteApiSchemaFileParams,
  DeleteApiVersionParams,
  GetApiCollectionParams,
  GetApiParams,
  GetApiSchemaFileContentsParams,
  GetApiSchemaFilesParams,
  GetApiSchemaParams,
  GetApiVersionParams,
  GetApiVersionsParams,
  GetApisParams,
  GetStatusOfAnAsyncTaskParams,
  SyncCollectionWithSchemaParams,
  UpdateApiParams,
  UpdateApiVersionParams,
} from './request-params';
import {
  CommentCreateUpdate,
  CommentCreatedUpdated,
  CommentResponse,
  commentCreateUpdateRequest,
  commentCreatedUpdatedResponse,
  commentResponseResponse,
} from '../common';

export class ApiService extends BaseService {
  /**
   * Gets information about all APIs in a workspace.
   * @param {string} workspaceId - The workspace's ID.
   * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
   * @param {number} [createdBy] - Return only results created by the given user ID.
   * @param {string} [cursor] - The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.
   * @param {string} [description] - Return only APIs whose description includes the given value. Matching is not case-sensitive.
   * @param {number} [limit] - The maximum number of rows to return in the response.
   * @returns {Promise<HttpResponse<GetApis>>} Successful Response
   */
  async getApis(params: GetApisParams, requestConfig?: RequestConfig): Promise<HttpResponse<GetApis>> {
    const path = '/apis';
    const options: any = {
      responseSchema: getApisResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    if (params?.workspaceId) {
      options.queryParams['workspaceId'] = params?.workspaceId;
    }
    if (params?.createdBy) {
      options.queryParams['createdBy'] = params?.createdBy;
    }
    if (params?.cursor) {
      options.queryParams['cursor'] = params?.cursor;
    }
    if (params?.description) {
      options.queryParams['description'] = params?.description;
    }
    if (params?.limit) {
      options.queryParams['limit'] = params?.limit;
    }
    return this.client.get(path, options);
  }

  /**
   * Creates an API.
   * @param {string} workspaceId - The workspace's ID.
   * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
   * @returns {Promise<HttpResponse<CreateApiOkResponse>>} Successful Response
   */
  async createApi(
    body: CreateApiRequest,
    params: CreateApiParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateApiOkResponse>> {
    const path = '/apis';
    const options: any = {
      responseSchema: createApiOkResponseResponse,
      requestSchema: createApiRequestRequest,
      body: body as any,
      queryParams: {},
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    if (params?.workspaceId) {
      options.queryParams['workspaceId'] = params?.workspaceId;
    }
    return this.client.post(path, options);
  }

  /**
 * Gets information about an API.
**Note:**

- Git-connected APIs will only return the `versions` and `gitInfo` query responses. This is because schema and collection information is stored in the connected Git repository. The `gitInfo` object only lists the repository and folder locations of the files.
- API viewers can only use the `versions` option in the `include` query parameter.

 * @param {string} apiId - The API's ID.
 * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
 * @param {GetApiInclude[]} [include] - An array that contains additional resources to include in the response. Use this parameter to query for element links to the API, such as  collections and schemas:
- `collections` — Query for linked Postman collections.
- `versions` — Query for linked versions.
- `schemas` — Query for linked schemas.
- `gitInfo` — Query for information about the API's git-linked repository. This query only returns the linked repository and folder locations of the files. It does not return `collections` or `schemas` information.

**Note:**

API viewers can only use the `versions` option.

 * @returns {Promise<HttpResponse<GetApi>>} Successful Response
 */
  async getApi(apiId: string, params: GetApiParams, requestConfig?: RequestConfig): Promise<HttpResponse<GetApi>> {
    const path = this.client.buildPath('/apis/{apiId}', { apiId: apiId });
    const options: any = {
      responseSchema: getApiResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    if (params?.include) {
      options.queryParams['include'] = params?.include;
    }
    return this.client.get(path, options);
  }

  /**
   * Updates an API.
   * @param {string} apiId - The API's ID.
   * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
   * @returns {Promise<HttpResponse<UpdateApiOkResponse>>} Successful Response
   */
  async updateApi(
    apiId: string,
    body: UpdateApiRequest,
    params: UpdateApiParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<UpdateApiOkResponse>> {
    const path = this.client.buildPath('/apis/{apiId}', { apiId: apiId });
    const options: any = {
      responseSchema: updateApiOkResponseResponse,
      requestSchema: updateApiRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    return this.client.put(path, options);
  }

  /**
   * Deletes an API.
   * @param {string} apiId - The API's ID.
   * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
   * @returns {Promise<HttpResponse<any>>} No Content
   */
  async deleteApi(
    apiId: string,
    params: DeleteApiParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<undefined>> {
    const path = this.client.buildPath('/apis/{apiId}', { apiId: apiId });
    const options: any = {
      responseSchema: z.undefined(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    return this.client.delete(path, options);
  }

  /**
 * Adds a collection to an API. To do this, use the following `operationType` values:
- `COPY_COLLECTION` — Copies a collection from the workspace and adds it to an API.
- `CREATE_NEW` — Creates a new collection by providing the new collection's content.
- `GENERATE_FROM_SCHEMA` — Generates the collection from an API schema.
    - `options` — An object that contains advanced creation options and their values. You can find a complete list of properties and their values in Postman's [OpenAPI 3.0 to Postman Collection v2.1.0 Converter OPTIONS documentation](https://github.com/postmanlabs/openapi-to-postman/blob/develop/OPTIONS.md). These properties are case-sensitive.

 * @param {string} apiId - The API's ID.
 * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
 * @returns {Promise<HttpResponse<AddApiCollectionOkResponse>>} Created
 */
  async addApiCollection(
    apiId: string,
    body: AddApiCollectionRequest,
    params: AddApiCollectionParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<AddApiCollectionOkResponse>> {
    const path = this.client.buildPath('/apis/{apiId}/collections', { apiId: apiId });
    const options: any = {
      responseSchema: addApiCollectionOkResponseResponse,
      requestSchema: addApiCollectionRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    return this.client.post(path, options);
  }

  /**
 * Gets a collection attached to an API. You can use the `versionId` query parameter to get a collection published in a version.
**Note:**

The `versionId` query parameter is a required parameter for API viewers.

 * @param {string} apiId - The API's ID.
 * @param {string} collectionId - The collection's unique ID.
 * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
 * @param {string} [versionId] - The API's version ID.
 * @returns {Promise<HttpResponse<any>>} Successful Response
 */
  async getApiCollection(
    apiId: string,
    collectionId: string,
    params: GetApiCollectionParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const path = this.client.buildPath('/apis/{apiId}/collections/{collectionId}', {
      apiId: apiId,
      collectionId: collectionId,
    });
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    if (params?.versionId) {
      options.queryParams['versionId'] = params?.versionId;
    }
    return this.client.get(path, options);
  }

  /**
 * Syncs a collection attached to an API with the API schema.
This is an asynchronous endpoint that returns an HTTP `202 Accepted` response. The response contains a polling link to the `/apis/{apiId}/tasks/{taskId}` endpoint in the `Location` header.

**Note:**

This endpoint only supports the OpenAPI 3 schema type.

 * @param {string} apiId - The API's ID.
 * @param {string} collectionId - The collection's unique ID.
 * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
 * @returns {Promise<HttpResponse<SyncCollectionWithSchema>>} Accepted
 */
  async syncCollectionWithSchema(
    apiId: string,
    collectionId: string,
    params: SyncCollectionWithSchemaParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<SyncCollectionWithSchema>> {
    const path = this.client.buildPath('/apis/{apiId}/collections/{collectionId}/sync-with-schema-tasks', {
      apiId: apiId,
      collectionId: collectionId,
    });
    const options: any = {
      responseSchema: syncCollectionWithSchemaResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    return this.client.put(path, options);
  }

  /**
   * Gets all comments left by users in an API.
   * @param {string} apiId - The API's ID.
   * @returns {Promise<HttpResponse<CommentResponse>>} Successful Response
   */
  async getApiComments(apiId: string, requestConfig?: RequestConfig): Promise<HttpResponse<CommentResponse>> {
    const path = this.client.buildPath('/apis/{apiId}/comments', { apiId: apiId });
    const options: any = {
      responseSchema: commentResponseResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
 * Creates a comment on an API.
**Note:**

This endpoint accepts a max of 10,000 characters.

 * @param {string} apiId - The API's ID.
 * @returns {Promise<HttpResponse<CommentCreatedUpdated>>} Created
 */
  async createApiComment(
    apiId: string,
    body: CommentCreateUpdate,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CommentCreatedUpdated>> {
    const path = this.client.buildPath('/apis/{apiId}/comments', { apiId: apiId });
    const options: any = {
      responseSchema: commentCreatedUpdatedResponse,
      requestSchema: commentCreateUpdateRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
 * Updates a comment on an API.
**Note:**

This endpoint accepts a max of 10,000 characters.

 * @param {string} apiId - The API's ID.
 * @param {number} commentId - The comment's ID.
 * @returns {Promise<HttpResponse<CommentCreatedUpdated>>} Successful Response
 */
  async updateApiComment(
    apiId: string,
    commentId: number,
    body: CommentCreateUpdate,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CommentCreatedUpdated>> {
    const path = this.client.buildPath('/apis/{apiId}/comments/{commentId}', { apiId: apiId, commentId: commentId });
    const options: any = {
      responseSchema: commentCreatedUpdatedResponse,
      requestSchema: commentCreateUpdateRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
 * Deletes a comment from an API. On success, this returns an HTTP `204 No Content` response.
**Note:**

Deleting the first comment of a thread deletes all the comments in the thread.

 * @param {string} apiId - The API's ID.
 * @param {number} commentId - The comment's ID.
 * @returns {Promise<HttpResponse<any>>} No Content
 */
  async deleteApiComment(
    apiId: string,
    commentId: number,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<undefined>> {
    const path = this.client.buildPath('/apis/{apiId}/comments/{commentId}', { apiId: apiId, commentId: commentId });
    const options: any = {
      responseSchema: z.undefined(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.delete(path, options);
  }

  /**
   * Creates a schema for an API.
   * @param {string} apiId - The API's ID.
   * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
   * @returns {Promise<HttpResponse<CreateApiSchemaOkResponse>>} Created
   */
  async createApiSchema(
    apiId: string,
    body: CreateApiSchemaRequest,
    params: CreateApiSchemaParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateApiSchemaOkResponse>> {
    const path = this.client.buildPath('/apis/{apiId}/schemas', { apiId: apiId });
    const options: any = {
      responseSchema: createApiSchemaOkResponseResponse,
      requestSchema: createApiSchemaRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    return this.client.post(path, options);
  }

  /**
 * Gets information about API schema. You can use the `versionId` query parameter to get a schema published in an API version.
You can use this API to do the following:

- Get a schema's metadata.
- Get all the files in a schema. This only returns the first file in the schema. The endpoint response contains a link to the next set of response results.
- Get a schema's contents in multi-file or bundled format.

**Note:**

The `versionId` query parameter is a required parameter for API viewers.

 * @param {string} apiId - The API's ID.
 * @param {string} schemaId - The API schema's ID.
 * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
 * @param {string} [versionId] - The API's version ID.
 * @param {boolean} [bundled] - If true, return the schema in a bundled format.
 * @returns {Promise<HttpResponse<GetApiSchema>>} Successful Response
 */
  async getApiSchema(
    apiId: string,
    schemaId: string,
    params: GetApiSchemaParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetApiSchema>> {
    const path = this.client.buildPath('/apis/{apiId}/schemas/{schemaId}', { apiId: apiId, schemaId: schemaId });
    const options: any = {
      responseSchema: getApiSchemaResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    if (params?.versionId) {
      options.queryParams['versionId'] = params?.versionId;
    }
    if (params?.bundled) {
      options.queryParams['bundled'] = params?.bundled;
    }
    return this.client.get(path, options);
  }

  /**
 * Gets the files in an API schema. You can use the `versionId` query parameter to get schema files published in an API version.
**Note:**

The `versionId` query parameter is a required parameter for API viewers.

 * @param {string} apiId - The API's ID.
 * @param {string} schemaId - The API schema's ID.
 * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
 * @param {string} [versionId] - The API's version ID.
 * @param {number} [limit] - The maximum number of rows to return in the response.
 * @param {string} [cursor] - The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.
 * @returns {Promise<HttpResponse<GetApiSchemaFiles>>} Successful Response
 */
  async getApiSchemaFiles(
    apiId: string,
    schemaId: string,
    params: GetApiSchemaFilesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetApiSchemaFiles>> {
    const path = this.client.buildPath('/apis/{apiId}/schemas/{schemaId}/files', { apiId: apiId, schemaId: schemaId });
    const options: any = {
      responseSchema: getApiSchemaFilesResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    if (params?.versionId) {
      options.queryParams['versionId'] = params?.versionId;
    }
    if (params?.limit) {
      options.queryParams['limit'] = params?.limit;
    }
    if (params?.cursor) {
      options.queryParams['cursor'] = params?.cursor;
    }
    return this.client.get(path, options);
  }

  /**
 * Gets an API schema file contents at the defined path. You can use the `versionId` query parameter to get schema file contents published in an API version.
**Note:**

The `versionId` query parameter is a required parameter for API viewers.

 * @param {string} apiId - The API's ID.
 * @param {string} schemaId - The API schema's ID.
 * @param {string} filePath - The path to the schema file.
 * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
 * @param {string} [versionId] - The API's version ID.
 * @returns {Promise<HttpResponse<GetApiSchemaFileContents>>} Successful Response
 */
  async getApiSchemaFileContents(
    apiId: string,
    schemaId: string,
    filePath: string,
    params: GetApiSchemaFileContentsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetApiSchemaFileContents>> {
    const path = this.client.buildPath('/apis/{apiId}/schemas/{schemaId}/files/{file-path}', {
      apiId: apiId,
      schemaId: schemaId,
      'file-path': filePath,
    });
    const options: any = {
      responseSchema: getApiSchemaFileContentsResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    if (params?.versionId) {
      options.queryParams['versionId'] = params?.versionId;
    }
    return this.client.get(path, options);
  }

  /**
 * Creates or updates an API schema file.
**Note:**

- If the provided file path exists, the file will be updated with the new contents.
- If the provided file path does not exist, then a new schema file will be created.
- If the file path contains a `/` (forward slash) character, then a folder is created. For example, if the file path is the `dir/schema.json` value, then a `dir` folder is created with the `schema.json` file inside.

 * @param {string} apiId - The API's ID.
 * @param {string} schemaId - The API schema's ID.
 * @param {string} filePath - The path to the schema file.
 * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
 * @returns {Promise<HttpResponse<CreateUpdateApiSchemaFileOkResponse>>} Successful Response
 */
  async createUpdateApiSchemaFile(
    apiId: string,
    schemaId: string,
    filePath: string,
    body: CreateUpdateApiSchemaFileRequest,
    params: CreateUpdateApiSchemaFileParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateUpdateApiSchemaFileOkResponse>> {
    const path = this.client.buildPath('/apis/{apiId}/schemas/{schemaId}/files/{file-path}', {
      apiId: apiId,
      schemaId: schemaId,
      'file-path': filePath,
    });
    const options: any = {
      responseSchema: createUpdateApiSchemaFileOkResponseResponse,
      requestSchema: createUpdateApiSchemaFileRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    return this.client.put(path, options);
  }

  /**
   * Deletes a file in an API schema.
   * @param {string} apiId - The API's ID.
   * @param {string} schemaId - The API schema's ID.
   * @param {string} filePath - The path to the schema file.
   * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
   * @returns {Promise<HttpResponse<any>>} Deleted
   */
  async deleteApiSchemaFile(
    apiId: string,
    schemaId: string,
    filePath: string,
    params: DeleteApiSchemaFileParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<undefined>> {
    const path = this.client.buildPath('/apis/{apiId}/schemas/{schemaId}/files/{file-path}', {
      apiId: apiId,
      schemaId: schemaId,
      'file-path': filePath,
    });
    const options: any = {
      responseSchema: z.undefined(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    return this.client.delete(path, options);
  }

  /**
   * Gets the status of an asynchronous task.
   * @param {string} apiId - The API's ID.
   * @param {string} taskId - The task's ID.
   * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
   * @returns {Promise<HttpResponse<GetStatusOfAnAsyncTask>>} Successful Response
   */
  async getStatusOfAnAsyncTask(
    apiId: string,
    taskId: string,
    params: GetStatusOfAnAsyncTaskParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetStatusOfAnAsyncTask>> {
    const path = this.client.buildPath('/apis/{apiId}/tasks/{taskId}', { apiId: apiId, taskId: taskId });
    const options: any = {
      responseSchema: getStatusOfAnAsyncTaskResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    return this.client.get(path, options);
  }

  /**
   * Gets all the published versions of an API.
   * @param {string} apiId - The API's ID.
   * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
   * @param {string} [cursor] - The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.
   * @param {number} [limit] - The maximum number of rows to return in the response.
   * @returns {Promise<HttpResponse<GetApiVersions>>} Successful Response
   */
  async getApiVersions(
    apiId: string,
    params: GetApiVersionsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetApiVersions>> {
    const path = this.client.buildPath('/apis/{apiId}/versions', { apiId: apiId });
    const options: any = {
      responseSchema: getApiVersionsResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    if (params?.cursor) {
      options.queryParams['cursor'] = params?.cursor;
    }
    if (params?.limit) {
      options.queryParams['limit'] = params?.limit;
    }
    return this.client.get(path, options);
  }

  /**
 * Creates a new API version asynchronously and immediately returns an HTTP `202 Accepted` response. The response contains a polling link to the task status API in the `Location` header.
This endpoint is equivalent to publishing a version in Postman app, which is the snapshot of API collections and schema at a given point in time.

 * @param {string} apiId - The API's ID.
 * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
 * @returns {Promise<HttpResponse<CreateApiVersionAcceptedResponse>>} Accepted
 */
  async createApiVersion(
    apiId: string,
    body: CreateApiVersionRequest,
    params: CreateApiVersionParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateApiVersionAcceptedResponse>> {
    const path = this.client.buildPath('/apis/{apiId}/versions', { apiId: apiId });
    const options: any = {
      responseSchema: createApiVersionAcceptedResponseResponse,
      requestSchema: createApiVersionRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    return this.client.post(path, options);
  }

  /**
 * Gets information about an API version.
**Note:**

- For API editors, this endpoint returns an HTTP `302 Found` status code when the version status is pending. It also returns the `/apis/{apiId}/tasks/{taskId}` task status response header.
- For API viewers, this endpoint returns an HTTP `404 Not Found` when the version status is pending.

 * @param {string} apiId - The API's ID.
 * @param {string} versionId - The API's version ID.
 * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
 * @returns {Promise<HttpResponse<GetApiVersion>>} Successful Response
 */
  async getApiVersion(
    apiId: string,
    versionId: string,
    params: GetApiVersionParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetApiVersion>> {
    const path = this.client.buildPath('/apis/{apiId}/versions/{versionId}', { apiId: apiId, versionId: versionId });
    const options: any = {
      responseSchema: getApiVersionResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    return this.client.get(path, options);
  }

  /**
 * Updates an API version.
**Note:**

This endpoint returns an HTTP `404 Not Found` response when an API version is pending publication.

 * @param {string} apiId - The API's ID.
 * @param {string} versionId - The API's version ID.
 * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
 * @returns {Promise<HttpResponse<UpdateApiVersionOkResponse>>} Successful Response
 */
  async updateApiVersion(
    apiId: string,
    versionId: string,
    body: UpdateApiVersionRequest,
    params: UpdateApiVersionParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<UpdateApiVersionOkResponse>> {
    const path = this.client.buildPath('/apis/{apiId}/versions/{versionId}', { apiId: apiId, versionId: versionId });
    const options: any = {
      responseSchema: updateApiVersionOkResponseResponse,
      requestSchema: updateApiVersionRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    return this.client.put(path, options);
  }

  /**
 * Deletes an API version.
**Note:**

This endpoint returns an HTTP `404 Not Found` response when an API version is pending publication.

 * @param {string} apiId - The API's ID.
 * @param {string} versionId - The API's version ID.
 * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
 * @returns {Promise<HttpResponse<any>>} No Content
 */
  async deleteApiVersion(
    apiId: string,
    versionId: string,
    params: DeleteApiVersionParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<undefined>> {
    const path = this.client.buildPath('/apis/{apiId}/versions/{versionId}', { apiId: apiId, versionId: versionId });
    const options: any = {
      responseSchema: z.undefined(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    return this.client.delete(path, options);
  }
}
