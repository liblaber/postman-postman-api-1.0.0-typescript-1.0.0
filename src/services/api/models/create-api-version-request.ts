// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { createApiVersion1, createApiVersion1Request, createApiVersion1Response } from './create-api-version-1';
import { createApiVersion2, createApiVersion2Request, createApiVersion2Response } from './create-api-version-2';
import { createApiVersion3, createApiVersion3Request, createApiVersion3Response } from './create-api-version-3';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createApiVersionRequest = z.union([createApiVersion1, createApiVersion2, createApiVersion3]);

/**
 *
 * @typedef  {CreateApiVersionRequest} createApiVersionRequest
 * @property {CreateApiVersion1} - Information about the API version.
 * @property {CreateApiVersion2} - Information about the API version.
 * @property {CreateApiVersion3} - Information about the API version.
 */
export type CreateApiVersionRequest = z.infer<typeof createApiVersionRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createApiVersionRequestResponse = z.union([
  createApiVersion1Response,
  createApiVersion2Response,
  createApiVersion3Response,
]);

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createApiVersionRequestRequest = z.union([
  createApiVersion1Request,
  createApiVersion2Request,
  createApiVersion3Request,
]);
