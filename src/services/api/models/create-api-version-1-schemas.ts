// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createApiVersion1Schemas = z.object({
  id: z.string().optional(),
});

/**
 * Information about the schema.
 * @typedef  {CreateApiVersion1Schemas} createApiVersion1Schemas - Information about the schema. - Information about the schema.
 * @property {string} - The schema's ID.
 */
export type CreateApiVersion1Schemas = z.infer<typeof createApiVersion1Schemas>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createApiVersion1SchemasResponse = z
  .object({
    id: z.string().optional(),
  })
  .transform((data) => ({
    id: data['id'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createApiVersion1SchemasRequest = z.object({ id: z.string().nullish() }).transform((data) => ({
  id: data['id'],
}));
