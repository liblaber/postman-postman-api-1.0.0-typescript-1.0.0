// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { getApiSchema1, getApiSchema1Request, getApiSchema1Response } from './get-api-schema-1';
import { getApiSchema2, getApiSchema2Request, getApiSchema2Response } from './get-api-schema-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getApiSchema: any = z.lazy(() => {
  return z.union([getApiSchema1, getApiSchema2]);
});

/**
 *
 * @typedef  {GetApiSchema} getApiSchema
 * @property {GetApiSchema1} - Information about the schema.
 * @property {GetApiSchema2} - Information about the schema.
 */
export type GetApiSchema = z.infer<typeof getApiSchema>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getApiSchemaResponse: any = z.lazy(() => {
  return z.union([getApiSchema1Response, getApiSchema2Response]);
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getApiSchemaRequest: any = z.lazy(() => {
  return z.union([getApiSchema1Request, getApiSchema2Request]);
});
