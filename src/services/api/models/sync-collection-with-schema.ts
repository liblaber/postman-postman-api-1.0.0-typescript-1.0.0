// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const syncCollectionWithSchema = z.lazy(() => {
  return z.object({
    taskId: z.string().optional(),
  });
});

/**
 *
 * @typedef  {SyncCollectionWithSchema} syncCollectionWithSchema
 * @property {string} - The created task ID. You can use this ID to track the status of syncing an API collection with an API schema.
 */
export type SyncCollectionWithSchema = z.infer<typeof syncCollectionWithSchema>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const syncCollectionWithSchemaResponse = z.lazy(() => {
  return z
    .object({
      taskId: z.string().optional(),
    })
    .transform((data) => ({
      taskId: data['taskId'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const syncCollectionWithSchemaRequest = z.lazy(() => {
  return z.object({ taskId: z.string().nullish() }).transform((data) => ({
    taskId: data['taskId'],
  }));
});
