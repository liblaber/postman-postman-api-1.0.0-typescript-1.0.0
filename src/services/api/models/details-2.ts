// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { error, errorRequest, errorResponse } from './error';

/**
 * The shape of the model inside the application code - what the users use
 */
export const details2: any = z.lazy(() => {
  return z.object({
    error: error.optional(),
  });
});

/**
 * Information about the error that occurred during the task's processing.
 * @typedef  {Details2} details2 - Information about the error that occurred during the task's processing. - Information about the error that occurred during the task's processing.
 * @property {Error}
 */
export type Details2 = z.infer<typeof details2>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const details2Response: any = z.lazy(() => {
  return z
    .object({
      error: errorResponse.optional(),
    })
    .transform((data) => ({
      error: data['error'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const details2Request: any = z.lazy(() => {
  return z.object({ error: errorRequest.nullish() }).transform((data) => ({
    error: data['error'],
  }));
});
