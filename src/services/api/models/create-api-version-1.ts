// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  createApiVersion1Schemas,
  createApiVersion1SchemasRequest,
  createApiVersion1SchemasResponse,
} from './create-api-version-1-schemas';
import {
  createApiVersion1Collections,
  createApiVersion1CollectionsRequest,
  createApiVersion1CollectionsResponse,
} from './create-api-version-1-collections';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createApiVersion1: any = z.lazy(() => {
  return z.object({
    name: z.string(),
    schemas: z.array(createApiVersion1Schemas),
    collections: z.array(createApiVersion1Collections),
    releaseNotes: z.string().optional(),
  });
});

/**
 * Information about the API version.
 * @typedef  {CreateApiVersion1} createApiVersion1 - Information about the API version. - Information about the API version.
 * @property {string} - The version's name.
 * @property {CreateApiVersion1Schemas[]} - A list of the version's schemas.
 * @property {CreateApiVersion1Collections[]} - A list of the version's collections.
 * @property {string} - Information about the API version release. For example, changelog notes.
 */
export type CreateApiVersion1 = z.infer<typeof createApiVersion1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createApiVersion1Response: any = z.lazy(() => {
  return z
    .object({
      name: z.string(),
      schemas: z.array(createApiVersion1SchemasResponse),
      collections: z.array(createApiVersion1CollectionsResponse),
      releaseNotes: z.string().optional(),
    })
    .transform((data) => ({
      name: data['name'],
      schemas: data['schemas'],
      collections: data['collections'],
      releaseNotes: data['releaseNotes'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createApiVersion1Request: any = z.lazy(() => {
  return z
    .object({
      name: z.string().nullish(),
      schemas: z.array(createApiVersion1SchemasRequest).nullish(),
      collections: z.array(createApiVersion1CollectionsRequest).nullish(),
      releaseNotes: z.string().nullish(),
    })
    .transform((data) => ({
      name: data['name'],
      schemas: data['schemas'],
      collections: data['collections'],
      releaseNotes: data['releaseNotes'],
    }));
});
