// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { dataInfo, dataInfoRequest, dataInfoResponse } from './data-info';

/**
 * The shape of the model inside the application code - what the users use
 */
export const addApiCollection3Data: any = z.lazy(() => {
  return z.object({
    info: dataInfo.optional(),
    item: z.array(z.any()).optional(),
  });
});

/**
 * Information about the collection's contents, such as requests and responses. For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
 * @typedef  {AddApiCollection3Data} addApiCollection3Data - Information about the collection's contents, such as requests and responses. For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). - Information about the collection's contents, such as requests and responses. For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
 * @property {DataInfo} - Information about the collection.
 * @property {any[]} - Information about the requests and responses in the collection. For a complete list of values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
 */
export type AddApiCollection3Data = z.infer<typeof addApiCollection3Data>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const addApiCollection3DataResponse: any = z.lazy(() => {
  return z
    .object({
      info: dataInfoResponse.optional(),
      item: z.array(z.any()).optional(),
    })
    .transform((data) => ({
      info: data['info'],
      item: data['item'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const addApiCollection3DataRequest: any = z.lazy(() => {
  return z.object({ info: dataInfoRequest.nullish(), item: z.array(z.any()).nullish() }).transform((data) => ({
    info: data['info'],
    item: data['item'],
  }));
});
