// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { getApiSchema1Files, getApiSchema1FilesRequest, getApiSchema1FilesResponse } from './get-api-schema-1-files';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getApiSchema1 = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    type: z.string().optional(),
    files: getApiSchema1Files.optional(),
    createdAt: z.string().optional(),
    createdBy: z.string().optional(),
    updatedAt: z.string().optional(),
    updatedBy: z.string().optional(),
  });
});

/**
 * Information about the schema.
 * @typedef  {GetApiSchema1} getApiSchema1 - Information about the schema. - Information about the schema.
 * @property {string} - The schema's ID.
 * @property {string} - The schema's type.
 * @property {GetApiSchema1Files} - Information about the schema's files. The response is paginated and limited to one page.
 * @property {string} - The date and time at which the schema was created.
 * @property {string} - The user ID of the user that created the schema.
 * @property {string} - The date and time at which the schema was last updated.
 * @property {string} - The user ID of the user that last updated the schema.
 */
export type GetApiSchema1 = z.infer<typeof getApiSchema1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getApiSchema1Response = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      type: z.string().optional(),
      files: getApiSchema1FilesResponse.optional(),
      createdAt: z.string().optional(),
      createdBy: z.string().optional(),
      updatedAt: z.string().optional(),
      updatedBy: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      type: data['type'],
      files: data['files'],
      createdAt: data['createdAt'],
      createdBy: data['createdBy'],
      updatedAt: data['updatedAt'],
      updatedBy: data['updatedBy'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getApiSchema1Request = z.lazy(() => {
  return z
    .object({
      id: z.string().nullish(),
      type: z.string().nullish(),
      files: getApiSchema1FilesRequest.nullish(),
      createdAt: z.string().nullish(),
      createdBy: z.string().nullish(),
      updatedAt: z.string().nullish(),
      updatedBy: z.string().nullish(),
    })
    .transform((data) => ({
      id: data['id'],
      type: data['type'],
      files: data['files'],
      createdAt: data['createdAt'],
      createdBy: data['createdBy'],
      updatedAt: data['updatedAt'],
      updatedBy: data['updatedBy'],
    }));
});
