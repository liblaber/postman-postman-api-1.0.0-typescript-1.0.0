// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createApiRequest = z.lazy(() => {
  return z.object({
    name: z.string(),
    summary: z.string().optional(),
    description: z.string().optional(),
  });
});

/**
 * Information about the API.
 * @typedef  {CreateApiRequest} createApiRequest - Information about the API. - Information about the API.
 * @property {string} - The API's name.
 * @property {string} - The API's short summary.
 * @property {string} - The API's description. This supports Markdown formatting.
 */
export type CreateApiRequest = z.infer<typeof createApiRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createApiRequestResponse = z.lazy(() => {
  return z
    .object({
      name: z.string(),
      summary: z.string().optional(),
      description: z.string().optional(),
    })
    .transform((data) => ({
      name: data['name'],
      summary: data['summary'],
      description: data['description'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createApiRequestRequest = z.lazy(() => {
  return z
    .object({ name: z.string().nullish(), summary: z.string().nullish(), description: z.string().nullish() })
    .transform((data) => ({
      name: data['name'],
      summary: data['summary'],
      description: data['description'],
    }));
});
