// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const addApiCollection1Data = z.lazy(() => {
  return z.object({
    collectionId: z.string().optional(),
  });
});

/**
 *
 * @typedef  {AddApiCollection1Data} addApiCollection1Data
 * @property {string} - The collection ID to copy to the API.
 */
export type AddApiCollection1Data = z.infer<typeof addApiCollection1Data>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const addApiCollection1DataResponse = z.lazy(() => {
  return z
    .object({
      collectionId: z.string().optional(),
    })
    .transform((data) => ({
      collectionId: data['collectionId'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const addApiCollection1DataRequest = z.lazy(() => {
  return z.object({ collectionId: z.string().nullish() }).transform((data) => ({
    collectionId: data['collectionId'],
  }));
});
