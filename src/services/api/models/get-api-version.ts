// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { version, versionRequest, versionResponse } from './version';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getApiVersion = z.object({
  version: version.optional(),
});

/**
 *
 * @typedef  {GetApiVersion} getApiVersion
 * @property {Version} - Information about the API version.
 */
export type GetApiVersion = z.infer<typeof getApiVersion>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getApiVersionResponse = z
  .object({
    version: versionResponse.optional(),
  })
  .transform((data) => ({
    version: data['version'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getApiVersionRequest = z.object({ version: versionRequest.nullish() }).transform((data) => ({
  version: data['version'],
}));
