// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { getApi1, getApi1Request, getApi1Response } from './get-api-1';
import { getApi2, getApi2Request, getApi2Response } from './get-api-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getApi: any = z.lazy(() => {
  return z.union([getApi1, getApi2]);
});

/**
 *
 * @typedef  {GetApi} getApi
 * @property {GetApi1} - The API's base data schema.
 * @property {GetApi2}
 */
export type GetApi = z.infer<typeof getApi>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getApiResponse: any = z.lazy(() => {
  return z.union([getApi1Response, getApi2Response]);
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getApiRequest: any = z.lazy(() => {
  return z.union([getApi1Request, getApi2Request]);
});
