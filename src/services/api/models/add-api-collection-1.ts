// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  addApiCollection1Data,
  addApiCollection1DataRequest,
  addApiCollection1DataResponse,
} from './add-api-collection-1-data';
import { addApiCollection1OperationType } from './add-api-collection-1-operation-type';

/**
 * The shape of the model inside the application code - what the users use
 */
export const addApiCollection1 = z.object({
  data: addApiCollection1Data.optional(),
  operationType: addApiCollection1OperationType.optional(),
});

/**
 *
 * @typedef  {AddApiCollection1} addApiCollection1
 * @property {AddApiCollection1Data}
 * @property {AddApiCollection1OperationType} - The `COPY_COLLECTION` method.
 */
export type AddApiCollection1 = z.infer<typeof addApiCollection1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const addApiCollection1Response = z
  .object({
    data: addApiCollection1DataResponse.optional(),
    operationType: addApiCollection1OperationType.optional(),
  })
  .transform((data) => ({
    data: data['data'],
    operationType: data['operationType'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const addApiCollection1Request = z
  .object({ data: addApiCollection1DataRequest.nullish(), operationType: addApiCollection1OperationType.nullish() })
  .transform((data) => ({
    data: data['data'],
    operationType: data['operationType'],
  }));
