// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateApiVersionRequest = z.object({
  name: z.string(),
  releaseNotes: z.string().optional(),
});

/**
 * Information about the API version.
 * @typedef  {UpdateApiVersionRequest} updateApiVersionRequest - Information about the API version. - Information about the API version.
 * @property {string} - The version's name.
 * @property {string} - The version's Markdown-supported release notes.
 */
export type UpdateApiVersionRequest = z.infer<typeof updateApiVersionRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateApiVersionRequestResponse = z
  .object({
    name: z.string(),
    releaseNotes: z.string().optional(),
  })
  .transform((data) => ({
    name: data['name'],
    releaseNotes: data['releaseNotes'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateApiVersionRequestRequest = z
  .object({ name: z.string().nullish(), releaseNotes: z.string().nullish() })
  .transform((data) => ({
    name: data['name'],
    releaseNotes: data['releaseNotes'],
  }));
