// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { filesData, filesDataRequest, filesDataResponse } from './files-data';
import { filesMeta, filesMetaRequest, filesMetaResponse } from './files-meta';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getApiSchema1Files = z.object({
  data: z.array(filesData).optional(),
  meta: filesMeta.optional(),
});

/**
 * Information about the schema's files. The response is paginated and limited to one page.
 * @typedef  {GetApiSchema1Files} getApiSchema1Files - Information about the schema's files. The response is paginated and limited to one page. - Information about the schema's files. The response is paginated and limited to one page.
 * @property {FilesData[]} - A list of the schema files.
 * @property {FilesMeta}
 */
export type GetApiSchema1Files = z.infer<typeof getApiSchema1Files>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getApiSchema1FilesResponse = z
  .object({
    data: z.array(filesDataResponse).optional(),
    meta: filesMetaResponse.optional(),
  })
  .transform((data) => ({
    data: data['data'],
    meta: data['meta'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getApiSchema1FilesRequest = z
  .object({ data: z.array(filesDataRequest).nullish(), meta: filesMetaRequest.nullish() })
  .transform((data) => ({
    data: data['data'],
    meta: data['meta'],
  }));
