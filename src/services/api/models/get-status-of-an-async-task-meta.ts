// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getStatusOfAnAsyncTaskMeta = z.lazy(() => {
  return z.object({
    url: z.string().optional(),
    model: z.string().optional(),
    action: z.string().optional(),
  });
});

/**
 * The response's non-standard meta information.
 * @typedef  {GetStatusOfAnAsyncTaskMeta} getStatusOfAnAsyncTaskMeta - The response's non-standard meta information. - The response's non-standard meta information.
 * @property {string} - The endpoint URL that created the task.
 * @property {MetaModel} - The model for which the task is performing the operation.
 * @property {Action} - The task's action.
 */
export type GetStatusOfAnAsyncTaskMeta = z.infer<typeof getStatusOfAnAsyncTaskMeta>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getStatusOfAnAsyncTaskMetaResponse = z.lazy(() => {
  return z
    .object({
      url: z.string().optional(),
      model: z.string().optional(),
      action: z.string().optional(),
    })
    .transform((data) => ({
      url: data['url'],
      model: data['model'],
      action: data['action'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getStatusOfAnAsyncTaskMetaRequest = z.lazy(() => {
  return z
    .object({ url: z.string().nullish(), model: z.string().nullish(), action: z.string().nullish() })
    .transform((data) => ({
      url: data['url'],
      model: data['model'],
      action: data['action'],
    }));
});
