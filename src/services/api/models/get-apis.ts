// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { getApisApis, getApisApisRequest, getApisApisResponse } from './get-apis-apis';
import { getApisMeta, getApisMetaRequest, getApisMetaResponse } from './get-apis-meta';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getApis: any = z.lazy(() => {
  return z.object({
    apis: z.array(getApisApis).optional(),
    meta: getApisMeta.optional(),
  });
});

/**
 * Information about the API schema.
 * @typedef  {GetApis} getApis - Information about the API schema. - Information about the API schema.
 * @property {GetApisApis[]}
 * @property {GetApisMeta} - The response's meta information for paginated results.
 */
export type GetApis = z.infer<typeof getApis>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getApisResponse: any = z.lazy(() => {
  return z
    .object({
      apis: z.array(getApisApisResponse).optional(),
      meta: getApisMetaResponse.optional(),
    })
    .transform((data) => ({
      apis: data['apis'],
      meta: data['meta'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getApisRequest: any = z.lazy(() => {
  return z
    .object({ apis: z.array(getApisApisRequest).nullish(), meta: getApisMetaRequest.nullish() })
    .transform((data) => ({
      apis: data['apis'],
      meta: data['meta'],
    }));
});
