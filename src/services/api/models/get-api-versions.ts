// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { getApiVersionsMeta, getApiVersionsMetaRequest, getApiVersionsMetaResponse } from './get-api-versions-meta';
import {
  getApiVersionsVersions,
  getApiVersionsVersionsRequest,
  getApiVersionsVersionsResponse,
} from './get-api-versions-versions';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getApiVersions: any = z.lazy(() => {
  return z.object({
    meta: getApiVersionsMeta.optional(),
    versions: z.array(getApiVersionsVersions).optional(),
  });
});

/**
 * Information about the API's versions.
 * @typedef  {GetApiVersions} getApiVersions - Information about the API's versions. - Information about the API's versions.
 * @property {GetApiVersionsMeta} - The response's meta information for paginated results.
 * @property {GetApiVersionsVersions[]}
 */
export type GetApiVersions = z.infer<typeof getApiVersions>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getApiVersionsResponse: any = z.lazy(() => {
  return z
    .object({
      meta: getApiVersionsMetaResponse.optional(),
      versions: z.array(getApiVersionsVersionsResponse).optional(),
    })
    .transform((data) => ({
      meta: data['meta'],
      versions: data['versions'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getApiVersionsRequest: any = z.lazy(() => {
  return z
    .object({ meta: getApiVersionsMetaRequest.nullish(), versions: z.array(getApiVersionsVersionsRequest).nullish() })
    .transform((data) => ({
      meta: data['meta'],
      versions: data['versions'],
    }));
});
