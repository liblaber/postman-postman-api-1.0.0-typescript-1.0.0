// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  getApiSchemaFilesMeta,
  getApiSchemaFilesMetaRequest,
  getApiSchemaFilesMetaResponse,
} from './get-api-schema-files-meta';
import {
  getApiSchemaFilesFiles,
  getApiSchemaFilesFilesRequest,
  getApiSchemaFilesFilesResponse,
} from './get-api-schema-files-files';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getApiSchemaFiles: any = z.lazy(() => {
  return z.object({
    meta: getApiSchemaFilesMeta.optional(),
    files: z.array(getApiSchemaFilesFiles).optional(),
  });
});

/**
 * Information about the schema files and its meta information.
 * @typedef  {GetApiSchemaFiles} getApiSchemaFiles - Information about the schema files and its meta information. - Information about the schema files and its meta information.
 * @property {GetApiSchemaFilesMeta} - The schema's non-standard meta information.
 * @property {GetApiSchemaFilesFiles[]} - The schema's files.
 */
export type GetApiSchemaFiles = z.infer<typeof getApiSchemaFiles>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getApiSchemaFilesResponse: any = z.lazy(() => {
  return z
    .object({
      meta: getApiSchemaFilesMetaResponse.optional(),
      files: z.array(getApiSchemaFilesFilesResponse).optional(),
    })
    .transform((data) => ({
      meta: data['meta'],
      files: data['files'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getApiSchemaFilesRequest: any = z.lazy(() => {
  return z
    .object({ meta: getApiSchemaFilesMetaRequest.nullish(), files: z.array(getApiSchemaFilesFilesRequest).nullish() })
    .transform((data) => ({
      meta: data['meta'],
      files: data['files'],
    }));
});
