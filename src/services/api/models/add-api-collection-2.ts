// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const addApiCollection2 = z.lazy(() => {
  return z.object({
    name: z.string().optional(),
    operationType: z.string().optional(),
    options: z.any().optional(),
  });
});

/**
 *
 * @typedef  {AddApiCollection2} addApiCollection2
 * @property {string} - The collection's name.
 * @property {AddApiCollection2OperationType} - The `GENERATE_FROM_SCHEMA` method.
 * @property {any} - The advanced creation options for collections and their values. For a complete list of properties and their values, see Postman's [OpenAPI 3.0 to Postman Collection v2.1.0 Converter OPTIONS documentation](https://github.com/postmanlabs/openapi-to-postman/blob/develop/OPTIONS.md). These properties are case-sensitive.
 */
export type AddApiCollection2 = z.infer<typeof addApiCollection2>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const addApiCollection2Response = z.lazy(() => {
  return z
    .object({
      name: z.string().optional(),
      operationType: z.string().optional(),
      options: z.any().optional(),
    })
    .transform((data) => ({
      name: data['name'],
      operationType: data['operationType'],
      options: data['options'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const addApiCollection2Request = z.lazy(() => {
  return z
    .object({ name: z.string().nullish(), operationType: z.string().nullish(), options: z.any().nullish() })
    .transform((data) => ({
      name: data['name'],
      operationType: data['operationType'],
      options: data['options'],
    }));
});
