// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createUpdateApiSchemaFileRoot: any = z.lazy(() => {
  return z.object({
    enabled: z.boolean().optional(),
  });
});

/**
 * Information about the schema's root file. This tag only applies to protobuf specifications.
 * @typedef  {CreateUpdateApiSchemaFileRoot} createUpdateApiSchemaFileRoot - Information about the schema's root file. This tag only applies to protobuf specifications. - Information about the schema's root file. This tag only applies to protobuf specifications.
 * @property {boolean} - If true, tag the file as the root file.
 */
export type CreateUpdateApiSchemaFileRoot = z.infer<typeof createUpdateApiSchemaFileRoot>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createUpdateApiSchemaFileRootResponse: any = z.lazy(() => {
  return z
    .object({
      enabled: z.boolean().optional(),
    })
    .transform((data) => ({
      enabled: data['enabled'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createUpdateApiSchemaFileRootRequest: any = z.lazy(() => {
  return z.object({ enabled: z.boolean().nullish() }).transform((data) => ({
    enabled: data['enabled'],
  }));
});
