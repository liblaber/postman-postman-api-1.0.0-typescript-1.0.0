// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import {
  GetAccountInvoices,
  InvoicesAccountInfo,
  getAccountInvoicesResponse,
  invoicesAccountInfoResponse,
} from './models';
import { GetAccountInvoicesParams } from './request-params';

export class BillingService extends BaseService {
  /**
   * Gets Postman billing account details for the given team.
   * @returns {Promise<HttpResponse<InvoicesAccountInfo>>} Successful Response
   */
  async getAccounts(requestConfig?: RequestConfig): Promise<HttpResponse<InvoicesAccountInfo>> {
    const path = '/accounts';
    const options: any = {
      responseSchema: invoicesAccountInfoResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Gets all invoices for a Postman billing account filtered by the status of the invoice.
   * @param {string} accountId - The account's ID.
   * @param {GetAccountInvoicesStatus} status - The account's status.
   * @returns {Promise<HttpResponse<GetAccountInvoices>>} Successful Response
   */
  async getAccountInvoices(
    accountId: string,
    params: GetAccountInvoicesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetAccountInvoices>> {
    const path = this.client.buildPath('/accounts/{accountId}/invoices', { accountId: accountId });
    const options: any = {
      responseSchema: getAccountInvoicesResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.status) {
      options.queryParams['status'] = params?.status;
    }
    return this.client.get(path, options);
  }
}
