// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { slots, slotsRequest, slotsResponse } from './slots';

/**
 * The shape of the model inside the application code - what the users use
 */
export const invoicesAccountInfo: any = z.lazy(() => {
  return z.object({
    billingEmail: z.string().optional(),
    id: z.number().optional(),
    state: z.string().optional(),
    teamId: z.number().optional(),
    salesChannel: z.string().optional(),
    slots: slots.optional(),
  });
});

/**
 * Information about the account.
 * @typedef  {InvoicesAccountInfo} invoicesAccountInfo - Information about the account. - Information about the account.
 * @property {string} - The email address to which invoices are sent.
 * @property {number} - The account's ID.
 * @property {string} - The account's current state:
- `FREE`
- `PAID`
- `EXPIRED_TRIAL`
- `OVERDUE`
- `SUSPENDED`
- `BLOCKED`
- `PAYMENT_DISPUTED`

 * @property {number} - The team's ID associated with the account.
 * @property {SalesChannel} - The sales channel from which the account was created:
- `SELF_SERVE` — The user purchased the account plan.
- `SALES_SERVE` — The account was purchased through the Postman sales team process.

 * @property {Slots} - Information about the team's slots.
 */
export type InvoicesAccountInfo = z.infer<typeof invoicesAccountInfo>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const invoicesAccountInfoResponse: any = z.lazy(() => {
  return z
    .object({
      billingEmail: z.string().optional(),
      id: z.number().optional(),
      state: z.string().optional(),
      teamId: z.number().optional(),
      salesChannel: z.string().optional(),
      slots: slotsResponse.optional(),
    })
    .transform((data) => ({
      billingEmail: data['billingEmail'],
      id: data['id'],
      state: data['state'],
      teamId: data['teamId'],
      salesChannel: data['salesChannel'],
      slots: data['slots'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const invoicesAccountInfoRequest: any = z.lazy(() => {
  return z
    .object({
      billingEmail: z.string().nullish(),
      id: z.number().nullish(),
      state: z.string().nullish(),
      teamId: z.number().nullish(),
      salesChannel: z.string().nullish(),
      slots: slotsRequest.nullish(),
    })
    .transform((data) => ({
      billingEmail: data['billingEmail'],
      id: data['id'],
      state: data['state'],
      teamId: data['teamId'],
      salesChannel: data['salesChannel'],
      slots: data['slots'],
    }));
});
