// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const totalAmount: any = z.lazy(() => {
  return z.object({
    value: z.number().optional(),
    currency: z.string().optional(),
  });
});

/**
 * Information about the invoice's total billed amount.
 * @typedef  {TotalAmount} totalAmount - Information about the invoice's total billed amount. - Information about the invoice's total billed amount.
 * @property {number} - The amount billed.
 * @property {string} - The currency of the billed amount. Currently only supports the `USD` value.
 */
export type TotalAmount = z.infer<typeof totalAmount>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const totalAmountResponse: any = z.lazy(() => {
  return z
    .object({
      value: z.number().optional(),
      currency: z.string().optional(),
    })
    .transform((data) => ({
      value: data['value'],
      currency: data['currency'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const totalAmountRequest: any = z.lazy(() => {
  return z.object({ value: z.number().nullish(), currency: z.string().nullish() }).transform((data) => ({
    value: data['value'],
    currency: data['currency'],
  }));
});
