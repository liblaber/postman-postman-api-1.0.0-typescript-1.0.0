// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { web, webRequest, webResponse } from './web';

/**
 * The shape of the model inside the application code - what the users use
 */
export const links = z.lazy(() => {
  return z.object({
    web: web.optional(),
  });
});

/**
 * A [JSON API spec](https://jsonapi.org/format/#document-links) object containing hypermedia links.
 * @typedef  {Links} links - A [JSON API spec](https://jsonapi.org/format/#document-links) object containing hypermedia links. - A [JSON API spec](https://jsonapi.org/format/#document-links) object containing hypermedia links.
 * @property {Web} - An object containing web-based account references.
 */
export type Links = z.infer<typeof links>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const linksResponse = z.lazy(() => {
  return z
    .object({
      web: webResponse.optional(),
    })
    .transform((data) => ({
      web: data['web'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const linksRequest = z.lazy(() => {
  return z.object({ web: webRequest.nullish() }).transform((data) => ({
    web: data['web'],
  }));
});
