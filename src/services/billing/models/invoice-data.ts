// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { totalAmount, totalAmountRequest, totalAmountResponse } from './total-amount';
import { links, linksRequest, linksResponse } from './links';

/**
 * The shape of the model inside the application code - what the users use
 */
export const invoiceData = z.object({
  id: z.string().optional(),
  status: z.string().optional(),
  issuedAt: z.string().optional(),
  totalAmount: totalAmount.optional(),
  links: links.optional(),
});

/**
 * Information about the invoice.
 * @typedef  {InvoiceData} invoiceData - Information about the invoice. - Information about the invoice.
 * @property {string} - The invoice's ID.
 * @property {string} - The invoice's status.
 * @property {string} - The date on which the invoice was issued.
 * @property {TotalAmount} - Information about the invoice's total billed amount.
 * @property {Links} - A [JSON API spec](https://jsonapi.org/format/#document-links) object containing hypermedia links.
 */
export type InvoiceData = z.infer<typeof invoiceData>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const invoiceDataResponse = z
  .object({
    id: z.string().optional(),
    status: z.string().optional(),
    issuedAt: z.string().optional(),
    totalAmount: totalAmountResponse.optional(),
    links: linksResponse.optional(),
  })
  .transform((data) => ({
    id: data['id'],
    status: data['status'],
    issuedAt: data['issuedAt'],
    totalAmount: data['totalAmount'],
    links: data['links'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const invoiceDataRequest = z
  .object({
    id: z.string().nullish(),
    status: z.string().nullish(),
    issuedAt: z.string().nullish(),
    totalAmount: totalAmountRequest.nullish(),
    links: linksRequest.nullish(),
  })
  .transform((data) => ({
    id: data['id'],
    status: data['status'],
    issuedAt: data['issuedAt'],
    totalAmount: data['totalAmount'],
    links: data['links'],
  }));
