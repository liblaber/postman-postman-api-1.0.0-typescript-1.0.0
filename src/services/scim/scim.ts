// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import {
  CreateScimGroupCreatedResponse,
  CreateScimGroupRequest,
  CreateScimUserCreatedResponse,
  CreateScimUserRequest,
  GetScimGroupResource,
  GetScimGroupResources,
  GetScimResourceTypes,
  GetScimServiceProviderConfig,
  GetScimUserResources,
  ScimUpdateGroupOkResponse,
  ScimUpdateGroupRequest,
  UpdateScimUser,
  UpdateScimUserState,
  createScimGroupCreatedResponseResponse,
  createScimGroupRequestRequest,
  createScimUserCreatedResponseResponse,
  createScimUserRequestRequest,
  getScimGroupResourceResponse,
  getScimGroupResourcesResponse,
  getScimResourceTypesResponse,
  getScimServiceProviderConfigResponse,
  getScimUserResourcesResponse,
  scimUpdateGroupOkResponseResponse,
  scimUpdateGroupRequestRequest,
  updateScimUserRequest,
  updateScimUserStateRequest,
} from './models';
import { GetScimGroupResourcesParams, GetScimUserResourcesParams } from './request-params';
import { GetScimUserResourceOkResponse, getScimUserResourceOkResponseResponse } from '../common';

export class ScimService extends BaseService {
  /**
 * Gets information about all Postman team members.
 * @param {number} [startIndex] - The index entry by which to begin the list of returned results.
 * @param {number} [count] - Limit the number of results returned in a single response.
 * @param {string} [filter] - Filter results by a specific word or phrase. This query parameter only supports the `displayName` filter and has the following requirements:
- Filter values are case-sensitive.
- Special characters and spaces must be URL encoded.

 * @returns {Promise<HttpResponse<GetScimGroupResources>>} Successful Response
 */
  async getScimGroupResources(
    params?: GetScimGroupResourcesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetScimGroupResources>> {
    const path = '/scim/v2/Groups';
    const options: any = {
      responseSchema: getScimGroupResourcesResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.startIndex) {
      options.queryParams['startIndex'] = params?.startIndex;
    }
    if (params?.count) {
      options.queryParams['count'] = params?.count;
    }
    if (params?.filter) {
      options.queryParams['filter'] = params?.filter;
    }
    return this.client.get(path, options);
  }

  /**
 * Creates a new user group in Postman and creates a new account for each group member.
Each account is added to your Postman team and authentication is activated for each user. If an existing Postman account uses an email that matches a group member's email ID, an [email invite](https://postman.postman.co/docs/administration/managing-your-team/managing-your-team/#invites) to join your Postman team is sent to that user. Once the user accepts the invite, they'll be added to your team.

By default, the system assigns new users the developer role. You can [update user roles in Postman](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#managing-team-roles).

 * @returns {Promise<HttpResponse<CreateScimGroupCreatedResponse>>} Created
 */
  async createScimGroup(
    body: CreateScimGroupRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateScimGroupCreatedResponse>> {
    const path = '/scim/v2/Groups';
    const options: any = {
      responseSchema: createScimGroupCreatedResponseResponse,
      requestSchema: createScimGroupRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   * Gets information about a Postman group within the team.
   * @param {string} groupId - The group's ID.
   * @returns {Promise<HttpResponse<GetScimGroupResource>>} Successful Response
   */
  async getScimGroupResource(
    groupId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetScimGroupResource>> {
    const path = this.client.buildPath('/scim/v2/Groups/{groupId}', { groupId: groupId });
    const options: any = {
      responseSchema: getScimGroupResourceResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
 * Updates a group's information. Using this endpoint you can:
- Update a group's name.
- Add or remove members from a Postman group.

 * @param {string} groupId - The group's ID.
 * @returns {Promise<HttpResponse<ScimUpdateGroupOkResponse>>} Successful Response
 */
  async scimUpdateGroup(
    groupId: string,
    body: ScimUpdateGroupRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ScimUpdateGroupOkResponse>> {
    const path = this.client.buildPath('/scim/v2/Groups/{groupId}', { groupId: groupId });
    const options: any = {
      responseSchema: scimUpdateGroupOkResponseResponse,
      requestSchema: scimUpdateGroupRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.patch(path, options);
  }

  /**
 * Deletes a group in Postman.
User accounts that were in the deleted group are deactivated in Postman if the app is assigned to the user only with the deleted group.

User accounts and the data corresponding to them are not deleted. To permanently delete user accounts and their data, [contact Postman support](https://www.postman.com/support/).

 * @param {string} groupId - The group's ID.
 * @returns {Promise<HttpResponse<any>>} Group Deleted
 */
  async deleteScimGroup(groupId: string, requestConfig?: RequestConfig): Promise<HttpResponse<undefined>> {
    const path = this.client.buildPath('/scim/v2/Groups/{groupId}', { groupId: groupId });
    const options: any = {
      responseSchema: z.undefined(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.delete(path, options);
  }

  /**
   * Gets all the resource types supported by Postman's SCIM API.
   * @returns {Promise<HttpResponse<GetScimResourceTypes[]>>} Successful Response
   */
  async getScimResourceTypes(requestConfig?: RequestConfig): Promise<HttpResponse<GetScimResourceTypes[]>> {
    const path = '/scim/v2/ResourceTypes';
    const options: any = {
      responseSchema: z.array(getScimResourceTypesResponse),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Gets the Postman SCIM API configuration information. This includes a list of supported operations.
   * @returns {Promise<HttpResponse<GetScimServiceProviderConfig>>} Successful Response
   */
  async getScimServiceProviderConfig(
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetScimServiceProviderConfig>> {
    const path = '/scim/v2/ServiceProviderConfig';
    const options: any = {
      responseSchema: getScimServiceProviderConfigResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
 * Gets information about all Postman team members.
 * @param {number} [startIndex] - The index entry by which to begin the list of returned results.
 * @param {number} [count] - Limit the number of results returned in a single response.
 * @param {string} [filter] - Filter results by a specific word or phrase. This query parameter only supports the `userName` filter and has the following requirements:
- Filter values are case-sensitive.
- Special characters and spaces must be URL encoded.

 * @returns {Promise<HttpResponse<GetScimUserResources>>} Successful Response
 */
  async getScimUserResources(
    params?: GetScimUserResourcesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetScimUserResources>> {
    const path = '/scim/v2/Users';
    const options: any = {
      responseSchema: getScimUserResourcesResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.startIndex) {
      options.queryParams['startIndex'] = params?.startIndex;
    }
    if (params?.count) {
      options.queryParams['count'] = params?.count;
    }
    if (params?.filter) {
      options.queryParams['filter'] = params?.filter;
    }
    return this.client.get(path, options);
  }

  /**
 * Creates a new user account in Postman and adds the user to your organization's Postman team. If the account does not already exist, this also activates the user so they can authenticate in to your Postman team.
If the account already exists, the system sends the user an [email invite](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#inviting-users) to join the Postman team. The user joins the team once they accept the invite.

By default, the system assigns new users the developer role. You can [update user roles in Postman](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#managing-team-roles).

 * @returns {Promise<HttpResponse<CreateScimUserCreatedResponse>>} Created
 */
  async createScimUser(
    body: CreateScimUserRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateScimUserCreatedResponse>> {
    const path = '/scim/v2/Users';
    const options: any = {
      responseSchema: createScimUserCreatedResponseResponse,
      requestSchema: createScimUserRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   * Gets information about a Postman team member.
   * @param {string} userId - The user's SCIM ID.
   * @returns {Promise<HttpResponse<GetScimUserResourceOkResponse>>} Successful Response
   */
  async getScimUserResource(
    userId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetScimUserResourceOkResponse>> {
    const path = this.client.buildPath('/scim/v2/Users/{userId}', { userId: userId });
    const options: any = {
      responseSchema: getScimUserResourceOkResponseResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
 * Updates a user's first and last name in Postman.
**Note:**

You can only use the SCIM API to update a user's first and last name. You cannot update any other user attributes with the API.

 * @param {string} userId - The user's SCIM ID.
 * @returns {Promise<HttpResponse<GetScimUserResourceOkResponse>>} Successful Response
 */
  async updateScimUser(
    userId: string,
    body: UpdateScimUser,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetScimUserResourceOkResponse>> {
    const path = this.client.buildPath('/scim/v2/Users/{userId}', { userId: userId });
    const options: any = {
      responseSchema: getScimUserResourceOkResponseResponse,
      requestSchema: updateScimUserRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
 * Updates a user's active state in Postman.
**Reactivating a user**

By setting the `active` property from `false` to `true`, this reactivates an account. This allows the account to authenticate in to Postman and adds the account back on to your Postman team.

 * @param {string} userId - The user's SCIM ID.
 * @returns {Promise<HttpResponse<GetScimUserResourceOkResponse>>} Successful Response
 */
  async updateScimUserState(
    userId: string,
    body: UpdateScimUserState,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetScimUserResourceOkResponse>> {
    const path = this.client.buildPath('/scim/v2/Users/{userId}', { userId: userId });
    const options: any = {
      responseSchema: getScimUserResourceOkResponseResponse,
      requestSchema: updateScimUserStateRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.patch(path, options);
  }
}
