// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  scimUserResourceName1,
  scimUserResourceName1Request,
  scimUserResourceName1Response,
} from './scim-user-resource-name-1';
import {
  scimUserResourceMeta1,
  scimUserResourceMeta1Request,
  scimUserResourceMeta1Response,
} from './scim-user-resource-meta-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const resources: any = z.lazy(() => {
  return z.object({
    schemas: z.array(z.string()).optional(),
    id: z.string().optional(),
    userName: z.string().optional(),
    name: scimUserResourceName1.optional(),
    externalId: z.string().optional(),
    active: z.boolean().optional(),
    meta: scimUserResourceMeta1.optional(),
  });
});

/**
 * The SCIM user resource object.
 * @typedef  {Resources} resources - The SCIM user resource object. - The SCIM user resource object.
 * @property {string[]} - The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
 * @property {string} - The team member's SCIM ID.
 * @property {string} - The team member's SCIM username.
 * @property {ScimUserResourceName1} - Information about the Postman team member.
 * @property {string} - The team member's external ID.
 * @property {boolean} - If true, the team member is active.
 * @property {ScimUserResourceMeta1} - The response's non-standard meta information.
 */
export type Resources = z.infer<typeof resources>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const resourcesResponse: any = z.lazy(() => {
  return z
    .object({
      schemas: z.array(z.string()).optional(),
      id: z.string().optional(),
      userName: z.string().optional(),
      name: scimUserResourceName1Response.optional(),
      externalId: z.string().optional(),
      active: z.boolean().optional(),
      meta: scimUserResourceMeta1Response.optional(),
    })
    .transform((data) => ({
      schemas: data['schemas'],
      id: data['id'],
      userName: data['userName'],
      name: data['name'],
      externalId: data['externalId'],
      active: data['active'],
      meta: data['meta'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const resourcesRequest: any = z.lazy(() => {
  return z
    .object({
      schemas: z.array(z.string()).nullish(),
      id: z.string().nullish(),
      userName: z.string().nullish(),
      name: scimUserResourceName1Request.nullish(),
      externalId: z.string().nullish(),
      active: z.boolean().nullish(),
      meta: scimUserResourceMeta1Request.nullish(),
    })
    .transform((data) => ({
      schemas: data['schemas'],
      id: data['id'],
      userName: data['userName'],
      name: data['name'],
      externalId: data['externalId'],
      active: data['active'],
      meta: data['meta'],
    }));
});
