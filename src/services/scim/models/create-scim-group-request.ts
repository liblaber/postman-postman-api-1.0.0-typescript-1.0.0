// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  createScimGroupMembers1,
  createScimGroupMembers1Request,
  createScimGroupMembers1Response,
} from './create-scim-group-members-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createScimGroupRequest = z.lazy(() => {
  return z.object({
    schemas: z.array(z.string()).optional(),
    displayName: z.string().optional(),
    members: z.array(createScimGroupMembers1).optional(),
  });
});

/**
 *
 * @typedef  {CreateScimGroupRequest} createScimGroupRequest
 * @property {string[]} - The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
 * @property {string} - The group's display name.
 * @property {CreateScimGroupMembers1[]}
 */
export type CreateScimGroupRequest = z.infer<typeof createScimGroupRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createScimGroupRequestResponse = z.lazy(() => {
  return z
    .object({
      schemas: z.array(z.string()).optional(),
      displayName: z.string().optional(),
      members: z.array(createScimGroupMembers1Response).optional(),
    })
    .transform((data) => ({
      schemas: data['schemas'],
      displayName: data['displayName'],
      members: data['members'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createScimGroupRequestRequest = z.lazy(() => {
  return z
    .object({
      schemas: z.array(z.string()).nullish(),
      displayName: z.string().nullish(),
      members: z.array(createScimGroupMembers1Request).nullish(),
    })
    .transform((data) => ({
      schemas: data['schemas'],
      displayName: data['displayName'],
      members: data['members'],
    }));
});
