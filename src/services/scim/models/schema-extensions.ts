// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const schemaExtensions = z.lazy(() => {
  return z.object({
    schema: z.string().optional(),
    required: z.boolean().optional(),
  });
});

/**
 *
 * @typedef  {SchemaExtensions} schemaExtensions
 * @property {string} - The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
 * @property {boolean} - If true, the resource must include this schema extension.
 */
export type SchemaExtensions = z.infer<typeof schemaExtensions>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaExtensionsResponse = z.lazy(() => {
  return z
    .object({
      schema: z.string().optional(),
      required: z.boolean().optional(),
    })
    .transform((data) => ({
      schema: data['schema'],
      required: data['required'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const schemaExtensionsRequest = z.lazy(() => {
  return z.object({ schema: z.string().nullish(), required: z.boolean().nullish() }).transform((data) => ({
    schema: data['schema'],
    required: data['required'],
  }));
});
