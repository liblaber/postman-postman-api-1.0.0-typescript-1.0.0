// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const filter = z.object({
  maxResults: z.number().optional(),
  supported: z.boolean().optional(),
});

/**
 * Information about the filter configuration.
 * @typedef  {Filter} filter - Information about the filter configuration. - Information about the filter configuration.
 * @property {number} - The total number of maximum results allowed for filter operations.
 * @property {boolean} - If true, the feature is supported.
 */
export type Filter = z.infer<typeof filter>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const filterResponse = z
  .object({
    maxResults: z.number().optional(),
    supported: z.boolean().optional(),
  })
  .transform((data) => ({
    maxResults: data['maxResults'],
    supported: data['supported'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const filterRequest = z
  .object({ maxResults: z.number().nullish(), supported: z.boolean().nullish() })
  .transform((data) => ({
    maxResults: data['maxResults'],
    supported: data['supported'],
  }));
