// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { operationsValue1, operationsValue1Request, operationsValue1Response } from './operations-value-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const scimUpdateGroupOperations: any = z.lazy(() => {
  return z.object({
    op: z.string().optional(),
    path: z.string().optional(),
    value: operationsValue1.optional(),
  });
});

/**
 *
 * @typedef  {ScimUpdateGroupOperations} scimUpdateGroupOperations
 * @property {OperationsOp1} - The operation to perform.
 * @property {string} - The operation's path. Include this value when you update a group's members.
 * @property {OperationsValue1} - The performed operation's value.
 */
export type ScimUpdateGroupOperations = z.infer<typeof scimUpdateGroupOperations>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const scimUpdateGroupOperationsResponse: any = z.lazy(() => {
  return z
    .object({
      op: z.string().optional(),
      path: z.string().optional(),
      value: operationsValue1Response.optional(),
    })
    .transform((data) => ({
      op: data['op'],
      path: data['path'],
      value: data['value'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const scimUpdateGroupOperationsRequest: any = z.lazy(() => {
  return z
    .object({ op: z.string().nullish(), path: z.string().nullish(), value: operationsValue1Request.nullish() })
    .transform((data) => ({
      op: data['op'],
      path: data['path'],
      value: data['value'],
    }));
});
