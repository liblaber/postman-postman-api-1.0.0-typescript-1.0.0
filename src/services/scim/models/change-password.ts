// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const changePassword = z.object({
  supported: z.boolean().optional(),
});

/**
 * Information about the change password configuration.
 * @typedef  {ChangePassword} changePassword - Information about the change password configuration. - Information about the change password configuration.
 * @property {boolean} - If true, the feature is supported.
 */
export type ChangePassword = z.infer<typeof changePassword>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const changePasswordResponse = z
  .object({
    supported: z.boolean().optional(),
  })
  .transform((data) => ({
    supported: data['supported'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const changePasswordRequest = z.object({ supported: z.boolean().nullish() }).transform((data) => ({
  supported: data['supported'],
}));
