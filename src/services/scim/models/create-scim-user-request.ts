// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  createScimUserName1,
  createScimUserName1Request,
  createScimUserName1Response,
} from './create-scim-user-name-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createScimUserRequest = z.object({
  schemas: z.array(z.string()).optional(),
  userName: z.string().optional(),
  active: z.boolean().optional(),
  externalId: z.string().optional(),
  groups: z.array(z.string()).optional(),
  locale: z.string().optional(),
  name: createScimUserName1.optional(),
});

/**
 *
 * @typedef  {CreateScimUserRequest} createScimUserRequest
 * @property {string[]} - The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
 * @property {string} - The user's username.
 * @property {boolean} - If true, activates the user. This lets them authenticate in to your Postman team.
 * @property {string} - The user's external ID.
 * @property {string[]} - A list of groups to assign the user to.
 * @property {string} - The user's [IETF language tag](https://datatracker.ietf.org/doc/html/rfc5646).
 * @property {CreateScimUserName1} - Information about the user's name.
 */
export type CreateScimUserRequest = z.infer<typeof createScimUserRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createScimUserRequestResponse = z
  .object({
    schemas: z.array(z.string()).optional(),
    userName: z.string().optional(),
    active: z.boolean().optional(),
    externalId: z.string().optional(),
    groups: z.array(z.string()).optional(),
    locale: z.string().optional(),
    name: createScimUserName1Response.optional(),
  })
  .transform((data) => ({
    schemas: data['schemas'],
    userName: data['userName'],
    active: data['active'],
    externalId: data['externalId'],
    groups: data['groups'],
    locale: data['locale'],
    name: data['name'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createScimUserRequestRequest = z
  .object({
    schemas: z.array(z.string()).nullish(),
    userName: z.string().nullish(),
    active: z.boolean().nullish(),
    externalId: z.string().nullish(),
    groups: z.array(z.string()).nullish(),
    locale: z.string().nullish(),
    name: createScimUserName1Request.nullish(),
  })
  .transform((data) => ({
    schemas: data['schemas'],
    userName: data['userName'],
    active: data['active'],
    externalId: data['externalId'],
    groups: data['groups'],
    locale: data['locale'],
    name: data['name'],
  }));
