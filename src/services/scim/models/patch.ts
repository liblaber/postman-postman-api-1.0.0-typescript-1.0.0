// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const patch = z.object({
  supported: z.boolean().optional(),
});

/**
 * Information about patch configuration.
 * @typedef  {Patch} patch - Information about patch configuration. - Information about patch configuration.
 * @property {boolean} - If true, the feature is supported.
 */
export type Patch = z.infer<typeof patch>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const patchResponse = z
  .object({
    supported: z.boolean().optional(),
  })
  .transform((data) => ({
    supported: data['supported'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const patchRequest = z.object({ supported: z.boolean().nullish() }).transform((data) => ({
  supported: data['supported'],
}));
