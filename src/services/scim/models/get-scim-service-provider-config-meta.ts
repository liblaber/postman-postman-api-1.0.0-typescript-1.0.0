// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getScimServiceProviderConfigMeta = z.object({
  resourceType: z.string().optional(),
  location: z.string().optional(),
});

/**
 * The response's non-standard meta information.
 * @typedef  {GetScimServiceProviderConfigMeta} getScimServiceProviderConfigMeta - The response's non-standard meta information. - The response's non-standard meta information.
 * @property {string}
 * @property {string}
 */
export type GetScimServiceProviderConfigMeta = z.infer<typeof getScimServiceProviderConfigMeta>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getScimServiceProviderConfigMetaResponse = z
  .object({
    resourceType: z.string().optional(),
    location: z.string().optional(),
  })
  .transform((data) => ({
    resourceType: data['resourceType'],
    location: data['location'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getScimServiceProviderConfigMetaRequest = z
  .object({ resourceType: z.string().nullish(), location: z.string().nullish() })
  .transform((data) => ({
    resourceType: data['resourceType'],
    location: data['location'],
  }));
