// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  scimGroupResourceMembers,
  scimGroupResourceMembersRequest,
  scimGroupResourceMembersResponse,
} from './scim-group-resource-members';
import {
  scimGroupResourceMeta,
  scimGroupResourceMetaRequest,
  scimGroupResourceMetaResponse,
} from './scim-group-resource-meta';

/**
 * The shape of the model inside the application code - what the users use
 */
export const scimGroupResource = z.lazy(() => {
  return z.object({
    schemas: z.array(z.string()).optional(),
    id: z.string().optional(),
    displayName: z.string().optional(),
    members: z.array(scimGroupResourceMembers).optional(),
    externalId: z.string().optional(),
    meta: scimGroupResourceMeta.optional(),
  });
});

/**
 * The SCIM group resource object.
 * @typedef  {ScimGroupResource} scimGroupResource - The SCIM group resource object. - The SCIM group resource object.
 * @property {string[]} - The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
 * @property {string} - The group's SCIM ID.
 * @property {string} - The group's display name.
 * @property {ScimGroupResourceMembers[]} - A list of the group's members.
 * @property {string} - The group's external ID.
 * @property {ScimGroupResourceMeta} - The response's non-standard meta information.
 */
export type ScimGroupResource = z.infer<typeof scimGroupResource>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const scimGroupResourceResponse = z.lazy(() => {
  return z
    .object({
      schemas: z.array(z.string()).optional(),
      id: z.string().optional(),
      displayName: z.string().optional(),
      members: z.array(scimGroupResourceMembersResponse).optional(),
      externalId: z.string().optional(),
      meta: scimGroupResourceMetaResponse.optional(),
    })
    .transform((data) => ({
      schemas: data['schemas'],
      id: data['id'],
      displayName: data['displayName'],
      members: data['members'],
      externalId: data['externalId'],
      meta: data['meta'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const scimGroupResourceRequest = z.lazy(() => {
  return z
    .object({
      schemas: z.array(z.string()).nullish(),
      id: z.string().nullish(),
      displayName: z.string().nullish(),
      members: z.array(scimGroupResourceMembersRequest).nullish(),
      externalId: z.string().nullish(),
      meta: scimGroupResourceMetaRequest.nullish(),
    })
    .transform((data) => ({
      schemas: data['schemas'],
      id: data['id'],
      displayName: data['displayName'],
      members: data['members'],
      externalId: data['externalId'],
      meta: data['meta'],
    }));
});
