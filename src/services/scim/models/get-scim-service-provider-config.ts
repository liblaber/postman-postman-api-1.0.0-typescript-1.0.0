// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { patch, patchRequest, patchResponse } from './patch';
import { bulk, bulkRequest, bulkResponse } from './bulk';
import { filter, filterRequest, filterResponse } from './filter';
import { changePassword, changePasswordRequest, changePasswordResponse } from './change-password';
import {
  getScimServiceProviderConfigSort,
  getScimServiceProviderConfigSortRequest,
  getScimServiceProviderConfigSortResponse,
} from './get-scim-service-provider-config-sort';
import {
  authenticationSchemes,
  authenticationSchemesRequest,
  authenticationSchemesResponse,
} from './authentication-schemes';
import { etag, etagRequest, etagResponse } from './etag';
import {
  getScimServiceProviderConfigMeta,
  getScimServiceProviderConfigMetaRequest,
  getScimServiceProviderConfigMetaResponse,
} from './get-scim-service-provider-config-meta';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getScimServiceProviderConfig = z.object({
  schemas: z.array(z.string()).optional(),
  documentationUri: z.string().optional(),
  patch: patch.optional(),
  bulk: bulk.optional(),
  filter: filter.optional(),
  changePassword: changePassword.optional(),
  sort: getScimServiceProviderConfigSort.optional(),
  authenticationSchemes: z.array(authenticationSchemes).optional(),
  etag: etag.optional(),
  meta: getScimServiceProviderConfigMeta.optional(),
});

/**
 * Information about Postman's SCIM API configurations and supported operations.
 * @typedef  {GetScimServiceProviderConfig} getScimServiceProviderConfig - Information about Postman's SCIM API configurations and supported operations. - Information about Postman's SCIM API configurations and supported operations.
 * @property {string[]} - The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
 * @property {string} - A link to the URI's documentation.
 * @property {Patch} - Information about patch configuration.
 * @property {Bulk} - Information about bulk configuration.
 * @property {Filter} - Information about the filter configuration.
 * @property {ChangePassword} - Information about the change password configuration.
 * @property {GetScimServiceProviderConfigSort} - Information about the sort configuration.
 * @property {AuthenticationSchemes[]} - A list of authentication schemes.
 * @property {Etag} - Information about the [entity tag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) (Etag) HTTP response header configuration.
 * @property {GetScimServiceProviderConfigMeta} - The response's non-standard meta information.
 */
export type GetScimServiceProviderConfig = z.infer<typeof getScimServiceProviderConfig>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getScimServiceProviderConfigResponse = z
  .object({
    schemas: z.array(z.string()).optional(),
    documentationUri: z.string().optional(),
    patch: patchResponse.optional(),
    bulk: bulkResponse.optional(),
    filter: filterResponse.optional(),
    changePassword: changePasswordResponse.optional(),
    sort: getScimServiceProviderConfigSortResponse.optional(),
    authenticationSchemes: z.array(authenticationSchemesResponse).optional(),
    etag: etagResponse.optional(),
    meta: getScimServiceProviderConfigMetaResponse.optional(),
  })
  .transform((data) => ({
    schemas: data['schemas'],
    documentationUri: data['documentationUri'],
    patch: data['patch'],
    bulk: data['bulk'],
    filter: data['filter'],
    changePassword: data['changePassword'],
    sort: data['sort'],
    authenticationSchemes: data['authenticationSchemes'],
    etag: data['etag'],
    meta: data['meta'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getScimServiceProviderConfigRequest = z
  .object({
    schemas: z.array(z.string()).nullish(),
    documentationUri: z.string().nullish(),
    patch: patchRequest.nullish(),
    bulk: bulkRequest.nullish(),
    filter: filterRequest.nullish(),
    changePassword: changePasswordRequest.nullish(),
    sort: getScimServiceProviderConfigSortRequest.nullish(),
    authenticationSchemes: z.array(authenticationSchemesRequest).nullish(),
    etag: etagRequest.nullish(),
    meta: getScimServiceProviderConfigMetaRequest.nullish(),
  })
  .transform((data) => ({
    schemas: data['schemas'],
    documentationUri: data['documentationUri'],
    patch: data['patch'],
    bulk: data['bulk'],
    filter: data['filter'],
    changePassword: data['changePassword'],
    sort: data['sort'],
    authenticationSchemes: data['authenticationSchemes'],
    etag: data['etag'],
    meta: data['meta'],
  }));
