// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { operationsValue2, operationsValue2Request, operationsValue2Response } from './operations-value-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateScimUserStateOperations: any = z.lazy(() => {
  return z.object({
    op: z.string().optional(),
    value: operationsValue2.optional(),
  });
});

/**
 *
 * @typedef  {UpdateScimUserStateOperations} updateScimUserStateOperations
 * @property {OperationsOp2} - The operation to perform.
 * @property {OperationsValue2} - The performed operation's value.
 */
export type UpdateScimUserStateOperations = z.infer<typeof updateScimUserStateOperations>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateScimUserStateOperationsResponse: any = z.lazy(() => {
  return z
    .object({
      op: z.string().optional(),
      value: operationsValue2Response.optional(),
    })
    .transform((data) => ({
      op: data['op'],
      value: data['value'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateScimUserStateOperationsRequest: any = z.lazy(() => {
  return z.object({ op: z.string().nullish(), value: operationsValue2Request.nullish() }).transform((data) => ({
    op: data['op'],
    value: data['value'],
  }));
});
