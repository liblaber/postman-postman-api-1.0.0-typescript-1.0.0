// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateScimUserName: any = z.lazy(() => {
  return z.object({
    givenName: z.string().optional(),
    familyName: z.string().optional(),
  });
});

/**
 * Information about the user's name.
 * @typedef  {UpdateScimUserName} updateScimUserName - Information about the user's name. - Information about the user's name.
 * @property {string} - The user's first name.
 * @property {string} - The user's last name.
 */
export type UpdateScimUserName = z.infer<typeof updateScimUserName>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateScimUserNameResponse: any = z.lazy(() => {
  return z
    .object({
      givenName: z.string().optional(),
      familyName: z.string().optional(),
    })
    .transform((data) => ({
      givenName: data['givenName'],
      familyName: data['familyName'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateScimUserNameRequest: any = z.lazy(() => {
  return z.object({ givenName: z.string().nullish(), familyName: z.string().nullish() }).transform((data) => ({
    givenName: data['givenName'],
    familyName: data['familyName'],
  }));
});
