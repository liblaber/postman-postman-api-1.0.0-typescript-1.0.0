// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { GetMocks, getMocksResponse } from './models/get-mocks';
import { CreateMockParams, GetMockCallLogsParams, GetMocksParams } from './request-params';
import { CreateMock, createMockRequest } from './models/create-mock';
import { MockCreateUpdate, mockCreateUpdateResponse } from './models/mock-create-update';
import { GetMock, getMockResponse } from './models/get-mock';
import { UpdateMock, updateMockRequest } from './models/update-mock';
import { DeleteMock, deleteMockResponse } from './models/delete-mock';
import { GetMockCallLogs, getMockCallLogsResponse } from './models/get-mock-call-logs';
import { PublishMock, publishMockResponse } from './models/publish-mock';
import { UnpublishMock, unpublishMockResponse } from './models/unpublish-mock';
import { GetMockServerResponses, getMockServerResponsesResponse } from './models/get-mock-server-responses';
import { CreateMockServerResponse, createMockServerResponseRequest } from './models/create-mock-server-response';
import { UpdateMockServerResponse, updateMockServerResponseRequest } from './models/update-mock-server-response';
import { DeleteMockServerResponse, deleteMockServerResponseResponse } from './models/delete-mock-server-response';

export class MocksService extends BaseService {
  /**
 * Gets all mock servers. By default, this endpoint returns only mock servers you created across all workspaces.
**Note:**

If you pass both the `teamId` and `workspace` query parameters, this endpoint only accepts the `workspace` query.

 * @param {string} [teamId] - Return only results that belong to the given team ID.
 * @param {string} [workspace] - Return only results found in the given workspace.
 * @returns {Promise<HttpResponse<GetMocks>>} Successful Response
 */
  async getMocks(params?: GetMocksParams, requestConfig?: RequestConfig): Promise<HttpResponse<GetMocks>> {
    const request = new RequestBuilder<GetMocks>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/mocks')
      .setRequestSchema(z.any())
      .setResponseSchema(getMocksResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'teamId',
        value: params?.teamId,
      })
      .addQueryParam({
        key: 'workspace',
        value: params?.workspace,
      })
      .build();
    return this.client.call<GetMocks>(request);
  }

  /**
 * Creates a mock server in a collection.
**Note:**

- If you do not include the `workspaceId` query parameter, the system creates the mock server in your [Personal
workspace](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/).
- You cannot create mocks for collections added to an API definition.

 * @param {string} [workspaceId] - The workspace's ID.
 * @returns {Promise<HttpResponse<MockCreateUpdate>>} Successful Response
 */
  async createMock(
    body: CreateMock,
    params?: CreateMockParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<MockCreateUpdate>> {
    const request = new RequestBuilder<MockCreateUpdate>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('POST')
      .setPath('/mocks')
      .setRequestSchema(createMockRequest)
      .setResponseSchema(mockCreateUpdateResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'workspaceId',
        value: params?.workspaceId,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<MockCreateUpdate>(request);
  }

  /**
   * Gets information about a mock server.
   * @param {string} mockId - The mock's ID.
   * @returns {Promise<HttpResponse<GetMock>>} Successful Response
   */
  async getMock(mockId: string, requestConfig?: RequestConfig): Promise<HttpResponse<GetMock>> {
    const request = new RequestBuilder<GetMock>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/mocks/{mockId}')
      .setRequestSchema(z.any())
      .setResponseSchema(getMockResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'mockId',
        value: mockId,
      })
      .build();
    return this.client.call<GetMock>(request);
  }

  /**
   * Updates a mock server.
   * @param {string} mockId - The mock's ID.
   * @returns {Promise<HttpResponse<MockCreateUpdate>>} Successful Response
   */
  async updateMock(
    mockId: string,
    body: UpdateMock,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<MockCreateUpdate>> {
    const request = new RequestBuilder<MockCreateUpdate>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('PUT')
      .setPath('/mocks/{mockId}')
      .setRequestSchema(updateMockRequest)
      .setResponseSchema(mockCreateUpdateResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'mockId',
        value: mockId,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<MockCreateUpdate>(request);
  }

  /**
   * Deletes a mock server.
   * @param {string} mockId - The mock's ID.
   * @returns {Promise<HttpResponse<DeleteMock>>} Successful Response
   */
  async deleteMock(mockId: string, requestConfig?: RequestConfig): Promise<HttpResponse<DeleteMock>> {
    const request = new RequestBuilder<DeleteMock>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('DELETE')
      .setPath('/mocks/{mockId}')
      .setRequestSchema(z.any())
      .setResponseSchema(deleteMockResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'mockId',
        value: mockId,
      })
      .build();
    return this.client.call<DeleteMock>(request);
  }

  /**
 * Gets a mock server's call logs. You can get a maximum of 6.5MB of call logs or a total of 100 call logs, whichever limit is met first in one API call.
Call logs contain exchanged request and response data made to mock servers. The logs provide visibility into how the mock servers are being used. You can log data to debug, test, analyze, and more, depending upon the use case.

 * @param {string} mockId - The mock's ID.
 * @param {number} [limit] - The maximum number of rows to return in the response.
 * @param {string} [cursor] - The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.
 * @param {string} [until] - Return only results created until this given time, in [ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) format. This value cannot be earlier than the `since` value.
 * @param {string} [since] - Return only results created since the given time, in [ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) format. This value cannot be later than the `until` value.
 * @param {number} [responseStatusCode] - Return only call logs that match the given HTTP response status code.
 * @param {string} [responseType] - Return only call logs that match the given response type. Matching is not case-sensitive.
 * @param {string} [requestMethod] - Return only call logs that match the given HTTP method. Matching is not case-sensitive.
 * @param {string} [requestPath] - Return only call logs that match the given request path. Matching is not case-sensitive.
 * @param {GetMockCallLogsSort} [sort] - Sort the results by the given value. If you use this query parameter, you must also use the `direction` parameter.
 * @param {AscDesc} [direction] - Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive. If you use this query parameter, you must also use the `sort` parameter.
 * @param {string} [include] - Include call log records with header and body data. This query parameter accepts the `request.headers`, `request.body`, `response.headers`, and `response.body` values. For multiple include types, comma-separate each value.
 * @returns {Promise<HttpResponse<GetMockCallLogs>>} Successful Response
 */
  async getMockCallLogs(
    mockId: string,
    params?: GetMockCallLogsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetMockCallLogs>> {
    const request = new RequestBuilder<GetMockCallLogs>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/mocks/{mockId}/call-logs')
      .setRequestSchema(z.any())
      .setResponseSchema(getMockCallLogsResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'mockId',
        value: mockId,
      })
      .addQueryParam({
        key: 'limit',
        value: params?.limit,
      })
      .addQueryParam({
        key: 'cursor',
        value: params?.cursor,
      })
      .addQueryParam({
        key: 'until',
        value: params?.until,
      })
      .addQueryParam({
        key: 'since',
        value: params?.since,
      })
      .addQueryParam({
        key: 'responseStatusCode',
        value: params?.responseStatusCode,
      })
      .addQueryParam({
        key: 'responseType',
        value: params?.responseType,
      })
      .addQueryParam({
        key: 'requestMethod',
        value: params?.requestMethod,
      })
      .addQueryParam({
        key: 'requestPath',
        value: params?.requestPath,
      })
      .addQueryParam({
        key: 'sort',
        value: params?.sort,
      })
      .addQueryParam({
        key: 'direction',
        value: params?.direction,
      })
      .addQueryParam({
        key: 'include',
        value: params?.include,
      })
      .build();
    return this.client.call<GetMockCallLogs>(request);
  }

  /**
   * Publishes a mock server. Publishing a mock server sets its **Access Control** configuration setting to public.
   * @param {string} mockId - The mock's ID.
   * @returns {Promise<HttpResponse<PublishMock>>} Successful Response
   */
  async publishMock(mockId: string, requestConfig?: RequestConfig): Promise<HttpResponse<PublishMock>> {
    const request = new RequestBuilder<PublishMock>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('POST')
      .setPath('/mocks/{mockId}/publish')
      .setRequestSchema(z.any())
      .setResponseSchema(publishMockResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'mockId',
        value: mockId,
      })
      .build();
    return this.client.call<PublishMock>(request);
  }

  /**
   * Unpublishes a mock server. Unpublishing a mock server sets its **Access Control** configuration setting to private.
   * @param {string} mockId - The mock's ID.
   * @returns {Promise<HttpResponse<UnpublishMock>>} Successful Response
   */
  async unpublishMock(mockId: string, requestConfig?: RequestConfig): Promise<HttpResponse<UnpublishMock>> {
    const request = new RequestBuilder<UnpublishMock>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('DELETE')
      .setPath('/mocks/{mockId}/unpublish')
      .setRequestSchema(z.any())
      .setResponseSchema(unpublishMockResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'mockId',
        value: mockId,
      })
      .build();
    return this.client.call<UnpublishMock>(request);
  }

  /**
   * Gets all of a mock server's server responses.
   * @param {string} mockId - The mock's ID.
   * @returns {Promise<HttpResponse<GetMockServerResponses[]>>} Successful Response
   */
  async getMockServerResponses(
    mockId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetMockServerResponses[]>> {
    const request = new RequestBuilder<GetMockServerResponses[]>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/mocks/{mockId}/server-responses')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(getMockServerResponsesResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'mockId',
        value: mockId,
      })
      .build();
    return this.client.call<GetMockServerResponses[]>(request);
  }

  /**
 * Creates a server response. Server responses let you simulate 5xx server-level responses, such as 500 or 503.
Server-level responses are agnostic to application-level logic. Server responses let you simulate this behavior on a mock server. You do not need to define each error for all exposed paths on the mock server.

If you set a server response as active, then all the calls to the mock server return with that active server response.

**Note:**

You can create multiple server responses for a mock server, but only one mock server can be set as active.

 * @param {string} mockId - The mock's ID.
 * @returns {Promise<HttpResponse<any>>} Successful Response
 */
  async createMockServerResponse(
    mockId: string,
    body: CreateMockServerResponse,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const request = new RequestBuilder<any>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('POST')
      .setPath('/mocks/{mockId}/server-responses')
      .setRequestSchema(createMockServerResponseRequest)
      .setResponseSchema(z.any())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'mockId',
        value: mockId,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<any>(request);
  }

  /**
   * Gets information about a server response.
   * @param {string} mockId - The mock's ID.
   * @param {string} serverResponseId - The server response's ID.
   * @returns {Promise<HttpResponse<any>>} Successful Response
   */
  async getMockServerResponse(
    mockId: string,
    serverResponseId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const request = new RequestBuilder<any>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/mocks/{mockId}/server-responses/{serverResponseId}')
      .setRequestSchema(z.any())
      .setResponseSchema(z.any())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'mockId',
        value: mockId,
      })
      .addPathParam({
        key: 'serverResponseId',
        value: serverResponseId,
      })
      .build();
    return this.client.call<any>(request);
  }

  /**
   * Updates a server response.
   * @param {string} mockId - The mock's ID.
   * @param {string} serverResponseId - The server response's ID.
   * @returns {Promise<HttpResponse<any>>} Successful Response
   */
  async updateMockServerResponse(
    mockId: string,
    serverResponseId: string,
    body: UpdateMockServerResponse,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const request = new RequestBuilder<any>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('PUT')
      .setPath('/mocks/{mockId}/server-responses/{serverResponseId}')
      .setRequestSchema(updateMockServerResponseRequest)
      .setResponseSchema(z.any())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'mockId',
        value: mockId,
      })
      .addPathParam({
        key: 'serverResponseId',
        value: serverResponseId,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<any>(request);
  }

  /**
   * Deletes a mock server's server response.
   * @param {string} mockId - The mock's ID.
   * @param {string} serverResponseId - The server response's ID.
   * @returns {Promise<HttpResponse<DeleteMockServerResponse>>} Successful Response
   */
  async deleteMockServerResponse(
    mockId: string,
    serverResponseId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<DeleteMockServerResponse>> {
    const request = new RequestBuilder<DeleteMockServerResponse>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('DELETE')
      .setPath('/mocks/{mockId}/server-responses/{serverResponseId}')
      .setRequestSchema(z.any())
      .setResponseSchema(deleteMockServerResponseResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'mockId',
        value: mockId,
      })
      .addPathParam({
        key: 'serverResponseId',
        value: serverResponseId,
      })
      .build();
    return this.client.call<DeleteMockServerResponse>(request);
  }
}
