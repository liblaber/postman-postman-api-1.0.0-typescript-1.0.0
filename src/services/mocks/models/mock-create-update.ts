// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  mockCreateUpdateMock,
  mockCreateUpdateMockRequest,
  mockCreateUpdateMockResponse,
} from './mock-create-update-mock';

/**
 * The shape of the model inside the application code - what the users use
 */
export const mockCreateUpdate: any = z.lazy(() => {
  return z.object({
    mock: mockCreateUpdateMock.optional(),
  });
});

/**
 *
 * @typedef  {MockCreateUpdate} mockCreateUpdate
 * @property {MockCreateUpdateMock} - Information about the mock server.
 */
export type MockCreateUpdate = z.infer<typeof mockCreateUpdate>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const mockCreateUpdateResponse: any = z.lazy(() => {
  return z
    .object({
      mock: mockCreateUpdateMockResponse.optional(),
    })
    .transform((data) => ({
      mock: data['mock'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const mockCreateUpdateRequest: any = z.lazy(() => {
  return z.object({ mock: mockCreateUpdateMockRequest.nullish() }).transform((data) => ({
    mock: data['mock'],
  }));
});
