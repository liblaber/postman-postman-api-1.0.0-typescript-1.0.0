// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const mockCreateUpdateMock = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    owner: z.string().optional(),
    uid: z.string().optional(),
    collection: z.string().optional(),
    mockUrl: z.string().optional(),
    config: z.any().optional(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    environment: z.string().optional(),
  });
});

/**
 * Information about the mock server.
 * @typedef  {MockCreateUpdateMock} mockCreateUpdateMock - Information about the mock server. - Information about the mock server.
 * @property {string} - The mock server's ID.
 * @property {string} - The ID of mock server's owner.
 * @property {string} - The mock server's unique ID.
 * @property {string} - The unique ID of the mock's associated collection.
 * @property {string} - The mock server URL.
 * @property {any} - Information about the mock server's configuration.
 * @property {string} - The date and time at which the mock server was created.
 * @property {string} - The date and time at which the mock server was last updated.
 * @property {string} - The unique ID of the mock's associated environment.
 */
export type MockCreateUpdateMock = z.infer<typeof mockCreateUpdateMock>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const mockCreateUpdateMockResponse = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      owner: z.string().optional(),
      uid: z.string().optional(),
      collection: z.string().optional(),
      mockUrl: z.string().optional(),
      config: z.any().optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      environment: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      owner: data['owner'],
      uid: data['uid'],
      collection: data['collection'],
      mockUrl: data['mockUrl'],
      config: data['config'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      environment: data['environment'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const mockCreateUpdateMockRequest = z.lazy(() => {
  return z
    .object({
      id: z.string().nullish(),
      owner: z.string().nullish(),
      uid: z.string().nullish(),
      collection: z.string().nullish(),
      mockUrl: z.string().nullish(),
      config: z.any().nullish(),
      createdAt: z.string().nullish(),
      updatedAt: z.string().nullish(),
      environment: z.string().nullish(),
    })
    .transform((data) => ({
      id: data['id'],
      owner: data['owner'],
      uid: data['uid'],
      collection: data['collection'],
      mockUrl: data['mockUrl'],
      config: data['config'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      environment: data['environment'],
    }));
});
