// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { callLogsRequest1, callLogsRequest1Request, callLogsRequest1Response } from './call-logs-request-1';
import { callLogsResponse1, callLogsResponse1Request, callLogsResponse1Response } from './call-logs-response-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const callLogs: any = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    responseName: z.string().optional(),
    servedAt: z.string().optional(),
    request: callLogsRequest1.optional(),
    response: callLogsResponse1.optional(),
  });
});

/**
 * Information about the mock server's server responses.
 * @typedef  {CallLogs} callLogs - Information about the mock server's server responses. - Information about the mock server's server responses.
 * @property {string} - The server response's ID.
 * @property {string} - The server response's name.
 * @property {string} - The date and time at which the server response was served.
 * @property {CallLogsRequest1} - The server response's request information.
 * @property {CallLogsResponse1} - The server response's response information.
 */
export type CallLogs = z.infer<typeof callLogs>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const callLogsResponse: any = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      responseName: z.string().optional(),
      servedAt: z.string().optional(),
      request: callLogsRequest1Response.optional(),
      response: callLogsResponse1Response.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      responseName: data['responseName'],
      servedAt: data['servedAt'],
      request: data['request'],
      response: data['response'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const callLogsRequest: any = z.lazy(() => {
  return z
    .object({
      id: z.string().nullish(),
      responseName: z.string().nullish(),
      servedAt: z.string().nullish(),
      request: callLogsRequest1Request.nullish(),
      response: callLogsResponse1Request.nullish(),
    })
    .transform((data) => ({
      id: data['id'],
      responseName: data['responseName'],
      servedAt: data['servedAt'],
      request: data['request'],
      response: data['response'],
    }));
});
