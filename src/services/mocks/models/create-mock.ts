// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { createMockMock, createMockMockRequest, createMockMockResponse } from './create-mock-mock';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createMock = z.lazy(() => {
  return z.object({
    mock: createMockMock.optional(),
  });
});

/**
 *
 * @typedef  {CreateMock} createMock
 * @property {CreateMockMock}
 */
export type CreateMock = z.infer<typeof createMock>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createMockResponse = z.lazy(() => {
  return z
    .object({
      mock: createMockMockResponse.optional(),
    })
    .transform((data) => ({
      mock: data['mock'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createMockRequest = z.lazy(() => {
  return z.object({ mock: createMockMockRequest.nullish() }).transform((data) => ({
    mock: data['mock'],
  }));
});
