// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { mocksConfig, mocksConfigRequest, mocksConfigResponse } from './mocks-config';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getMocksMocks: any = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    owner: z.string().optional(),
    uid: z.string().optional(),
    collection: z.string().optional(),
    mockUrl: z.string().optional(),
    config: mocksConfig.optional(),
    createdAt: z.string().optional(),
    environment: z.string().optional(),
    isPublic: z.boolean().optional(),
    name: z.string().optional(),
    updatedAt: z.string().optional(),
  });
});

/**
 * Information about the mock servers.
 * @typedef  {GetMocksMocks} getMocksMocks - Information about the mock servers. - Information about the mock servers.
 * @property {string} - The mock server's ID.
 * @property {string} - The ID of mock server's owner.
 * @property {string} - The mock server's unique ID.
 * @property {string} - The unique ID of the mock's associated collection.
 * @property {string} - The mock server URL.
 * @property {MocksConfig} - Information about the mock server's configuration.
 * @property {string} - The date and time at which the mock server was created.
 * @property {string} - The mock server's associated environment ID.
 * @property {boolean} - If true, the mock server is public and visible to all users. This field does not indicate the mock server's access control status.
 * @property {string} - The mock server's name.
 * @property {string} - The date and time at which the mock server was last updated.
 */
export type GetMocksMocks = z.infer<typeof getMocksMocks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getMocksMocksResponse: any = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      owner: z.string().optional(),
      uid: z.string().optional(),
      collection: z.string().optional(),
      mockUrl: z.string().optional(),
      config: mocksConfigResponse.optional(),
      createdAt: z.string().optional(),
      environment: z.string().optional(),
      isPublic: z.boolean().optional(),
      name: z.string().optional(),
      updatedAt: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      owner: data['owner'],
      uid: data['uid'],
      collection: data['collection'],
      mockUrl: data['mockUrl'],
      config: data['config'],
      createdAt: data['createdAt'],
      environment: data['environment'],
      isPublic: data['isPublic'],
      name: data['name'],
      updatedAt: data['updatedAt'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getMocksMocksRequest: any = z.lazy(() => {
  return z
    .object({
      id: z.string().nullish(),
      owner: z.string().nullish(),
      uid: z.string().nullish(),
      collection: z.string().nullish(),
      mockUrl: z.string().nullish(),
      config: mocksConfigRequest.nullish(),
      createdAt: z.string().nullish(),
      environment: z.string().nullish(),
      isPublic: z.boolean().nullish(),
      name: z.string().nullish(),
      updatedAt: z.string().nullish(),
    })
    .transform((data) => ({
      id: data['id'],
      owner: data['owner'],
      uid: data['uid'],
      collection: data['collection'],
      mockUrl: data['mockUrl'],
      config: data['config'],
      createdAt: data['createdAt'],
      environment: data['environment'],
      isPublic: data['isPublic'],
      name: data['name'],
      updatedAt: data['updatedAt'],
    }));
});
