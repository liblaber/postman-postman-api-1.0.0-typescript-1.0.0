// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const mockConfig2 = z.object({
  serverResponseId: z.string().optional(),
});

/**
 * The mock server's configuration settings.
 * @typedef  {MockConfig2} mockConfig2 - The mock server's configuration settings. - The mock server's configuration settings.
 * @property {string} - The server response ID. This sets the given server response as the default response for each request.

To deactivate a server response, pass a null value.

 */
export type MockConfig2 = z.infer<typeof mockConfig2>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const mockConfig2Response = z
  .object({
    serverResponseId: z.string().optional(),
  })
  .transform((data) => ({
    serverResponseId: data['serverResponseId'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const mockConfig2Request = z.object({ serverResponseId: z.string().nullish() }).transform((data) => ({
  serverResponseId: data['serverResponseId'],
}));
