// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { description, descriptionRequest, descriptionResponse } from './description';

/**
 * The shape of the model inside the application code - what the users use
 */
export const responseHeaders: any = z.lazy(() => {
  return z.object({
    description: description.optional(),
    key: z.string().optional(),
    value: z.string().optional(),
  });
});

/**
 * The response's headers.
 * @typedef  {ResponseHeaders} responseHeaders - The response's headers. - The response's headers.
 * @property {Description} - The response header's description information.
 * @property {string} - The response header's name.
 * @property {string} - The response header's value.
 */
export type ResponseHeaders = z.infer<typeof responseHeaders>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const responseHeadersResponse: any = z.lazy(() => {
  return z
    .object({
      description: descriptionResponse.optional(),
      key: z.string().optional(),
      value: z.string().optional(),
    })
    .transform((data) => ({
      description: data['description'],
      key: data['key'],
      value: data['value'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const responseHeadersRequest: any = z.lazy(() => {
  return z
    .object({ description: descriptionRequest.nullish(), key: z.string().nullish(), value: z.string().nullish() })
    .transform((data) => ({
      description: data['description'],
      key: data['key'],
      value: data['value'],
    }));
});
