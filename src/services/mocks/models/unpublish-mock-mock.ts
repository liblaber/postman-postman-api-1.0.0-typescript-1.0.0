// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const unpublishMockMock = z.object({
  id: z.string().optional(),
});

/**
 *
 * @typedef  {UnpublishMockMock} unpublishMockMock
 * @property {string} - The mock server's ID.
 */
export type UnpublishMockMock = z.infer<typeof unpublishMockMock>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const unpublishMockMockResponse = z
  .object({
    id: z.string().optional(),
  })
  .transform((data) => ({
    id: data['id'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const unpublishMockMockRequest = z.object({ id: z.string().nullish() }).transform((data) => ({
  id: data['id'],
}));
