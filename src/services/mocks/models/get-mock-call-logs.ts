// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { callLogs, callLogsRequest, callLogsResponse } from './call-logs';
import {
  getMockCallLogsMeta,
  getMockCallLogsMetaRequest,
  getMockCallLogsMetaResponse,
} from './get-mock-call-logs-meta';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getMockCallLogs = z.lazy(() => {
  return z.object({
    callLogs: z.array(callLogs).optional(),
    meta: getMockCallLogsMeta.optional(),
  });
});

/**
 *
 * @typedef  {GetMockCallLogs} getMockCallLogs
 * @property {CallLogs[]}
 * @property {GetMockCallLogsMeta} - The response's non-standard meta information.
 */
export type GetMockCallLogs = z.infer<typeof getMockCallLogs>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getMockCallLogsResponse = z.lazy(() => {
  return z
    .object({
      'call-logs': z.array(callLogsResponse).optional(),
      meta: getMockCallLogsMetaResponse.optional(),
    })
    .transform((data) => ({
      callLogs: data['call-logs'],
      meta: data['meta'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getMockCallLogsRequest = z.lazy(() => {
  return z
    .object({ callLogs: z.array(callLogsRequest).nullish(), meta: getMockCallLogsMetaRequest.nullish() })
    .transform((data) => ({
      'call-logs': data['callLogs'],
      meta: data['meta'],
    }));
});
