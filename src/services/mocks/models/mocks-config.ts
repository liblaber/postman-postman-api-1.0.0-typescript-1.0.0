// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { delay, delayRequest, delayResponse } from './delay';

/**
 * The shape of the model inside the application code - what the users use
 */
export const mocksConfig = z.lazy(() => {
  return z.object({
    delay: delay.optional().nullable(),
    headers: z.array(z.string()).optional(),
    matchBody: z.boolean().optional(),
    matchQueryParams: z.boolean().optional(),
    matchWildcards: z.boolean().optional(),
    serverResponseId: z.string().optional(),
  });
});

/**
 * Information about the mock server's configuration.
 * @typedef  {MocksConfig} mocksConfig - Information about the mock server's configuration. - Information about the mock server's configuration.
 * @property {Delay} - Information about the mock server's simulated network delay settings. This returns a null value if there are no configured network delay settings.
 * @property {string[]} - A list of the mock server's headers.
 * @property {boolean} - If true, match the request body.
 * @property {boolean} - If true, match query parameters.
 * @property {boolean} - If true, use wildcard variable matching.
 * @property {string} - The ID of mock server's default response for requests. All calls to the mock server will return the defined response.
 */
export type MocksConfig = z.infer<typeof mocksConfig>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const mocksConfigResponse = z.lazy(() => {
  return z
    .object({
      delay: delayResponse.optional().nullable(),
      headers: z.array(z.string()).optional(),
      matchBody: z.boolean().optional(),
      matchQueryParams: z.boolean().optional(),
      matchWildcards: z.boolean().optional(),
      serverResponseId: z.string().optional(),
    })
    .transform((data) => ({
      delay: data['delay'],
      headers: data['headers'],
      matchBody: data['matchBody'],
      matchQueryParams: data['matchQueryParams'],
      matchWildcards: data['matchWildcards'],
      serverResponseId: data['serverResponseId'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const mocksConfigRequest = z.lazy(() => {
  return z
    .object({
      delay: delayRequest.nullish(),
      headers: z.array(z.string()).nullish(),
      matchBody: z.boolean().nullish(),
      matchQueryParams: z.boolean().nullish(),
      matchWildcards: z.boolean().nullish(),
      serverResponseId: z.string().nullish(),
    })
    .transform((data) => ({
      delay: data['delay'],
      headers: data['headers'],
      matchBody: data['matchBody'],
      matchQueryParams: data['matchQueryParams'],
      matchWildcards: data['matchWildcards'],
      serverResponseId: data['serverResponseId'],
    }));
});
