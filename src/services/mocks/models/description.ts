// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const description = z.lazy(() => {
  return z.object({
    content: z.string().optional(),
    type: z.string().optional(),
  });
});

/**
 * The response header's description information.
 * @typedef  {Description} description - The response header's description information. - The response header's description information.
 * @property {string} - The response header description's content.
 * @property {string} - The response header description's media type.
 */
export type Description = z.infer<typeof description>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const descriptionResponse = z.lazy(() => {
  return z
    .object({
      content: z.string().optional(),
      type: z.string().optional(),
    })
    .transform((data) => ({
      content: data['content'],
      type: data['type'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const descriptionRequest = z.lazy(() => {
  return z.object({ content: z.string().nullish(), type: z.string().nullish() }).transform((data) => ({
    content: data['content'],
    type: data['type'],
  }));
});
