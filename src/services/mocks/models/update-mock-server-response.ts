// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  updateMockServerResponseServerResponse,
  updateMockServerResponseServerResponseRequest,
  updateMockServerResponseServerResponseResponse,
} from './update-mock-server-response-server-response';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateMockServerResponse = z.object({
  serverResponse: updateMockServerResponseServerResponse.optional(),
});

/**
 *
 * @typedef  {UpdateMockServerResponse} updateMockServerResponse
 * @property {UpdateMockServerResponseServerResponse}
 */
export type UpdateMockServerResponse = z.infer<typeof updateMockServerResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateMockServerResponseResponse = z
  .object({
    serverResponse: updateMockServerResponseServerResponseResponse.optional(),
  })
  .transform((data) => ({
    serverResponse: data['serverResponse'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateMockServerResponseRequest = z
  .object({ serverResponse: updateMockServerResponseServerResponseRequest.nullish() })
  .transform((data) => ({
    serverResponse: data['serverResponse'],
  }));
