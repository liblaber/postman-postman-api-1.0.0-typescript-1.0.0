// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { requestHeaders, requestHeadersRequest, requestHeadersResponse } from './request-headers';
import { requestBody, requestBodyRequest, requestBodyResponse } from './request-body';

/**
 * The shape of the model inside the application code - what the users use
 */
export const callLogsRequest1: any = z.lazy(() => {
  return z.object({
    method: z.string().optional(),
    path: z.string().optional(),
    headers: requestHeaders.optional(),
    body: requestBody.optional(),
  });
});

/**
 * The server response's request information.
 * @typedef  {CallLogsRequest1} callLogsRequest1 - The server response's request information. - The server response's request information.
 * @property {string} - The request method.
 * @property {string} - The request's path.
 * @property {RequestHeaders} - The request's headers.
 * @property {RequestBody} - The request's body information.
 */
export type CallLogsRequest1 = z.infer<typeof callLogsRequest1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const callLogsRequest1Response: any = z.lazy(() => {
  return z
    .object({
      method: z.string().optional(),
      path: z.string().optional(),
      headers: requestHeadersResponse.optional(),
      body: requestBodyResponse.optional(),
    })
    .transform((data) => ({
      method: data['method'],
      path: data['path'],
      headers: data['headers'],
      body: data['body'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const callLogsRequest1Request: any = z.lazy(() => {
  return z
    .object({
      method: z.string().nullish(),
      path: z.string().nullish(),
      headers: requestHeadersRequest.nullish(),
      body: requestBodyRequest.nullish(),
    })
    .transform((data) => ({
      method: data['method'],
      path: data['path'],
      headers: data['headers'],
      body: data['body'],
    }));
});
