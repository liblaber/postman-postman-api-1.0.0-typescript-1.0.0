// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  serverResponseHeaders1,
  serverResponseHeaders1Request,
  serverResponseHeaders1Response,
} from './server-response-headers-1';
import { serverResponseLanguage1 } from './server-response-language-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const createMockServerResponseServerResponse = z.object({
  name: z.string(),
  statusCode: z.number(),
  headers: z.array(serverResponseHeaders1).optional(),
  language: serverResponseLanguage1.optional(),
  body: z.string().optional(),
});

/**
 *
 * @typedef  {CreateMockServerResponseServerResponse} createMockServerResponseServerResponse
 * @property {string} - The server response's name.
 * @property {number} - The server response's 5xx HTTP response code. This property only accepts 5xx values.
 * @property {ServerResponseHeaders1[]} - The server response's request headers, such as Content-Type, Accept, encoding, and other information.
 * @property {ServerResponseLanguage1} - The server response's body language type.
 * @property {string} - The server response's body that returns when calling the mock server.
 */
export type CreateMockServerResponseServerResponse = z.infer<typeof createMockServerResponseServerResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const createMockServerResponseServerResponseResponse = z
  .object({
    name: z.string(),
    statusCode: z.number(),
    headers: z.array(serverResponseHeaders1Response).optional(),
    language: serverResponseLanguage1.optional(),
    body: z.string().optional(),
  })
  .transform((data) => ({
    name: data['name'],
    statusCode: data['statusCode'],
    headers: data['headers'],
    language: data['language'],
    body: data['body'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const createMockServerResponseServerResponseRequest = z
  .object({
    name: z.string().nullish(),
    statusCode: z.number().nullish(),
    headers: z.array(serverResponseHeaders1Request).nullish(),
    language: serverResponseLanguage1.nullish(),
    body: z.string().nullish(),
  })
  .transform((data) => ({
    name: data['name'],
    statusCode: data['statusCode'],
    headers: data['headers'],
    language: data['language'],
    body: data['body'],
  }));
