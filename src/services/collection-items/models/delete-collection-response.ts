// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  deleteCollectionResponseData,
  deleteCollectionResponseDataRequest,
  deleteCollectionResponseDataResponse,
} from './delete-collection-response-data';

/**
 * The shape of the model inside the application code - what the users use
 */
export const deleteCollectionResponse: any = z.lazy(() => {
  return z.object({
    modelId: z.string().optional(),
    meta: z.any().optional(),
    data: deleteCollectionResponseData.optional(),
    revision: z.number().optional(),
  });
});

/**
 *
 * @typedef  {DeleteCollectionResponse} deleteCollectionResponse
 * @property {string} - The response's ID.
 * @property {any} - A Postman-specific response that contains information about the internal performed operation.
 * @property {DeleteCollectionResponseData} - The response's information.
 * @property {number} - An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
 */
export type DeleteCollectionResponse = z.infer<typeof deleteCollectionResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const deleteCollectionResponseResponse: any = z.lazy(() => {
  return z
    .object({
      model_id: z.string().optional(),
      meta: z.any().optional(),
      data: deleteCollectionResponseDataResponse.optional(),
      revision: z.number().optional(),
    })
    .transform((data) => ({
      modelId: data['model_id'],
      meta: data['meta'],
      data: data['data'],
      revision: data['revision'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const deleteCollectionResponseRequest: any = z.lazy(() => {
  return z
    .object({
      modelId: z.string().nullish(),
      meta: z.any().nullish(),
      data: deleteCollectionResponseDataRequest.nullish(),
      revision: z.number().nullish(),
    })
    .transform((data) => ({
      model_id: data['modelId'],
      meta: data['meta'],
      data: data['data'],
      revision: data['revision'],
    }));
});
