// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const updateCollectionResponse = z.object({
  data: z.any().optional(),
  meta: z.any().optional(),
  modelId: z.string().optional(),
});

/**
 *
 * @typedef  {UpdateCollectionResponse} updateCollectionResponse
 * @property {any} - Information about the updated response. For a complete list of request properties, refer to the `definitions.request` property in the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).
 * @property {any} - A Postman-specific response that contains information about the internal performed operation.
 * @property {string} - The request's ID.
 */
export type UpdateCollectionResponse = z.infer<typeof updateCollectionResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const updateCollectionResponseResponse = z
  .object({
    data: z.any().optional(),
    meta: z.any().optional(),
    model_id: z.string().optional(),
  })
  .transform((data) => ({
    data: data['data'],
    meta: data['meta'],
    modelId: data['model_id'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const updateCollectionResponseRequest = z
  .object({ data: z.any().nullish(), meta: z.any().nullish(), modelId: z.string().nullish() })
  .transform((data) => ({
    data: data['data'],
    meta: data['meta'],
    model_id: data['modelId'],
  }));
