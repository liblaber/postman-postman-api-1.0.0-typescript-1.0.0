// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getCollectionFolder = z.object({
  modelId: z.string().optional(),
  meta: z.any().optional(),
  data: z.any().optional(),
});

/**
 *
 * @typedef  {GetCollectionFolder} getCollectionFolder
 * @property {string} - The folder's ID.
 * @property {any} - A Postman-specific response that contains information about the internal performed operation.
 * @property {any} - Information about the folder. For a complete list of properties, refer to the `definitions.folder` property in the [collection.json schema file](https://schema.postman.com/collection/json/v1.0.0/draft-07/collection.json).
 */
export type GetCollectionFolder = z.infer<typeof getCollectionFolder>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionFolderResponse = z
  .object({
    model_id: z.string().optional(),
    meta: z.any().optional(),
    data: z.any().optional(),
  })
  .transform((data) => ({
    modelId: data['model_id'],
    meta: data['meta'],
    data: data['data'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getCollectionFolderRequest = z
  .object({ modelId: z.string().nullish(), meta: z.any().nullish(), data: z.any().nullish() })
  .transform((data) => ({
    model_id: data['modelId'],
    meta: data['meta'],
    data: data['data'],
  }));
