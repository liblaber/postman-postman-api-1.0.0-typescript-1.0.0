// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  deleteCollectionRequestData,
  deleteCollectionRequestDataRequest,
  deleteCollectionRequestDataResponse,
} from './delete-collection-request-data';

/**
 * The shape of the model inside the application code - what the users use
 */
export const deleteCollectionRequest = z.object({
  modelId: z.string().optional(),
  meta: z.any().optional(),
  data: deleteCollectionRequestData.optional(),
  revision: z.number().optional(),
});

/**
 *
 * @typedef  {DeleteCollectionRequest} deleteCollectionRequest
 * @property {string} - The request's ID.
 * @property {any} - A Postman-specific response that contains information about the internal performed operation.
 * @property {DeleteCollectionRequestData} - The request's information.
 * @property {number} - An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.
 */
export type DeleteCollectionRequest = z.infer<typeof deleteCollectionRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const deleteCollectionRequestResponse = z
  .object({
    model_id: z.string().optional(),
    meta: z.any().optional(),
    data: deleteCollectionRequestDataResponse.optional(),
    revision: z.number().optional(),
  })
  .transform((data) => ({
    modelId: data['model_id'],
    meta: data['meta'],
    data: data['data'],
    revision: data['revision'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const deleteCollectionRequestRequest = z
  .object({
    modelId: z.string().nullish(),
    meta: z.any().nullish(),
    data: deleteCollectionRequestDataRequest.nullish(),
    revision: z.number().nullish(),
  })
  .transform((data) => ({
    model_id: data['modelId'],
    meta: data['meta'],
    data: data['data'],
    revision: data['revision'],
  }));
