// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const deleteCollectionRequestData = z.object({
  id: z.string().optional(),
  owner: z.string().optional(),
});

/**
 * The request's information.
 * @typedef  {DeleteCollectionRequestData} deleteCollectionRequestData - The request's information. - The request's information.
 * @property {string} - The request's ID.
 * @property {string} - The user ID of the request's owner.
 */
export type DeleteCollectionRequestData = z.infer<typeof deleteCollectionRequestData>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const deleteCollectionRequestDataResponse = z
  .object({
    id: z.string().optional(),
    owner: z.string().optional(),
  })
  .transform((data) => ({
    id: data['id'],
    owner: data['owner'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const deleteCollectionRequestDataRequest = z
  .object({ id: z.string().nullish(), owner: z.string().nullish() })
  .transform((data) => ({
    id: data['id'],
    owner: data['owner'],
  }));
