// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const deleteCollectionResponseData: any = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    owner: z.string().optional(),
  });
});

/**
 * The response's information.
 * @typedef  {DeleteCollectionResponseData} deleteCollectionResponseData - The response's information. - The response's information.
 * @property {string} - The response's ID.
 * @property {string} - The user ID of the request's owner.
 */
export type DeleteCollectionResponseData = z.infer<typeof deleteCollectionResponseData>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const deleteCollectionResponseDataResponse: any = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      owner: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      owner: data['owner'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const deleteCollectionResponseDataRequest: any = z.lazy(() => {
  return z.object({ id: z.string().nullish(), owner: z.string().nullish() }).transform((data) => ({
    id: data['id'],
    owner: data['owner'],
  }));
});
