// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import {
  CreateCollectionFolder,
  CreateCollectionRequestOkResponse,
  CreateCollectionResponse,
  DeleteCollectionFolder,
  DeleteCollectionRequest,
  DeleteCollectionResponse,
  GetCollectionFolder,
  GetCollectionRequest,
  GetCollectionResponse,
  UpdateCollectionFolder,
  UpdateCollectionRequest,
  UpdateCollectionResponse,
  createCollectionFolderResponse,
  createCollectionRequestOkResponseResponse,
  createCollectionResponseResponse,
  deleteCollectionFolderResponse,
  deleteCollectionRequestResponse,
  deleteCollectionResponseResponse,
  getCollectionFolderResponse,
  getCollectionRequestResponse,
  getCollectionResponseResponse,
  updateCollectionFolderResponse,
  updateCollectionRequestResponse,
  updateCollectionResponseResponse,
} from './models';
import {
  CreateCollectionRequestParams,
  CreateCollectionResponseParams,
  GetCollectionFolderParams,
  GetCollectionRequestParams,
  GetCollectionResponseParams,
} from './request-params';

export class CollectionItemsService extends BaseService {
  /**
 * Creates a folder in a collection. For a complete list of properties, refer to "Folder" in the [collection.json schema file](https://schema.postman.com/collection/json/v2.1.0/draft-07/collection.json).
You can use this endpoint to to import requests and responses into a newly-created folder. To do this, include the `requests` field and the list of request objects in the request body. For more information, see the provided example.

**Note:**

It is recommended that you pass the `name` property in the request body. If you do not, the system uses a null value. As a result, this creates a folder with a blank name.

 * @param {string} collectionId - The collection's ID.
 * @returns {Promise<HttpResponse<CreateCollectionFolder>>} Successful Response
 */
  async createCollectionFolder(
    collectionId: string,
    body: any,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateCollectionFolder>> {
    const path = this.client.buildPath('/collections/{collectionId}/folders', { collectionId: collectionId });
    const options: any = {
      responseSchema: createCollectionFolderResponse,
      requestSchema: z.any(),
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
 * Creates a request in a collection. For a complete list of properties, see the [Collection Format Request documentation](https://learning.postman.com/collection-format/reference/request/).
**Note:**

It is recommended that you pass the `name` property in the request body. If you do not, the system uses a null value. As a result, this creates a request with a blank name.

 * @param {string} collectionId - The collection's ID.
 * @param {string} [folderId] - The folder ID in which to create the request. By default, the system will create the request at the collection level.
 * @returns {Promise<HttpResponse<CreateCollectionRequestOkResponse>>} Successful Response
 */
  async createCollectionRequest(
    collectionId: string,
    body: any,
    params?: CreateCollectionRequestParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateCollectionRequestOkResponse>> {
    const path = this.client.buildPath('/collections/{collectionId}/requests', { collectionId: collectionId });
    const options: any = {
      responseSchema: createCollectionRequestOkResponseResponse,
      requestSchema: z.any(),
      body: body as any,
      queryParams: {},
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.folderId) {
      options.queryParams['folderId'] = params?.folderId;
    }
    return this.client.post(path, options);
  }

  /**
 * Creates a request response in a collection. For a complete list of request body properties, see the [Collection Format Response documentation](https://learning.postman.com/collection-format/reference/response/#reference-diagram).
**Note:**

It is recommended that you pass the `name` property in the request body. If you do not, the system uses a null value. As a result, this creates a response with a blank name.

 * @param {string} collectionId - The collection's ID.
 * @param {string} requestId - The parent request's ID.
 * @returns {Promise<HttpResponse<CreateCollectionResponse>>} Successful Response
 */
  async createCollectionResponse(
    collectionId: string,
    body: any,
    params: CreateCollectionResponseParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CreateCollectionResponse>> {
    const path = this.client.buildPath('/collections/{collectionId}/responses', { collectionId: collectionId });
    const options: any = {
      responseSchema: createCollectionResponseResponse,
      requestSchema: z.any(),
      body: body as any,
      queryParams: {},
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.requestId) {
      options.queryParams['requestId'] = params?.requestId;
    }
    return this.client.post(path, options);
  }

  /**
   * Gets information about a folder in a collection.
   * @param {string} folderId - The folder's ID.
   * @param {string} collectionId - The collection's ID.
   * @param {boolean} [ids] - If true, returns only properties that contain ID values in the response.
   * @param {boolean} [uid] - If true, returns all IDs in UID format (`userId`-`id`).
   * @param {boolean} [populate] - If true, returns all of the collection item's contents.
   * @returns {Promise<HttpResponse<GetCollectionFolder>>} Successful Response
   */
  async getCollectionFolder(
    folderId: string,
    collectionId: string,
    params?: GetCollectionFolderParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetCollectionFolder>> {
    const path = this.client.buildPath('/collections/{collectionId}/folders/{folderId}', {
      folderId: folderId,
      collectionId: collectionId,
    });
    const options: any = {
      responseSchema: getCollectionFolderResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.ids) {
      options.queryParams['ids'] = params?.ids;
    }
    if (params?.uid) {
      options.queryParams['uid'] = params?.uid;
    }
    if (params?.populate) {
      options.queryParams['populate'] = params?.populate;
    }
    return this.client.get(path, options);
  }

  /**
 * Updates a folder in a collection. For a complete list of properties, refer to "Folder" in the [collection.json schema file](https://schema.postman.com/collection/json/v2.1.0/draft-07/collection.json).
**Note:**

This endpoint acts like a PATCH method. It only updates the values that you pass in the request body (for example, the `name` property). The endpoint does not update the entire resource.

 * @param {string} folderId - The folder's ID.
 * @param {string} collectionId - The collection's ID.
 * @returns {Promise<HttpResponse<UpdateCollectionFolder>>} Successful Response
 */
  async updateCollectionFolder(
    folderId: string,
    collectionId: string,
    body: any,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<UpdateCollectionFolder>> {
    const path = this.client.buildPath('/collections/{collectionId}/folders/{folderId}', {
      folderId: folderId,
      collectionId: collectionId,
    });
    const options: any = {
      responseSchema: updateCollectionFolderResponse,
      requestSchema: z.any(),
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
   * Deletes a folder in a collection.
   * @param {string} folderId - The folder's ID.
   * @param {string} collectionId - The collection's ID.
   * @returns {Promise<HttpResponse<DeleteCollectionFolder>>} Successful Response
   */
  async deleteCollectionFolder(
    folderId: string,
    collectionId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<DeleteCollectionFolder>> {
    const path = this.client.buildPath('/collections/{collectionId}/folders/{folderId}', {
      folderId: folderId,
      collectionId: collectionId,
    });
    const options: any = {
      responseSchema: deleteCollectionFolderResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.delete(path, options);
  }

  /**
   * Gets information about a request in a collection.
   * @param {string} requestId - The request's ID.
   * @param {string} collectionId - The collection's ID.
   * @param {boolean} [ids] - If true, returns only properties that contain ID values in the response.
   * @param {boolean} [uid] - If true, returns all IDs in UID format (`userId`-`id`).
   * @param {boolean} [populate] - If true, returns all of the collection item's contents.
   * @returns {Promise<HttpResponse<GetCollectionRequest>>} Successful Response
   */
  async getCollectionRequest(
    requestId: string,
    collectionId: string,
    params?: GetCollectionRequestParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetCollectionRequest>> {
    const path = this.client.buildPath('/collections/{collectionId}/requests/{requestId}', {
      requestId: requestId,
      collectionId: collectionId,
    });
    const options: any = {
      responseSchema: getCollectionRequestResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.ids) {
      options.queryParams['ids'] = params?.ids;
    }
    if (params?.uid) {
      options.queryParams['uid'] = params?.uid;
    }
    if (params?.populate) {
      options.queryParams['populate'] = params?.populate;
    }
    return this.client.get(path, options);
  }

  /**
 * Updates a request in a collection. For a complete list of properties, see the [Collection Format Request documentation](https://learning.postman.com/collection-format/reference/request/).
**Note:**

- You must pass a collection ID (`12ece9e1-2abf-4edc-8e34-de66e74114d2`), not a collection(`12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2`), in this endpoint.
- This endpoint does not support changing the folder of a request.

 * @param {string} requestId - The request's ID.
 * @param {string} collectionId - The collection's ID.
 * @returns {Promise<HttpResponse<UpdateCollectionRequest>>} Successful Response
 */
  async updateCollectionRequest(
    requestId: string,
    collectionId: string,
    body: any,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<UpdateCollectionRequest>> {
    const path = this.client.buildPath('/collections/{collectionId}/requests/{requestId}', {
      requestId: requestId,
      collectionId: collectionId,
    });
    const options: any = {
      responseSchema: updateCollectionRequestResponse,
      requestSchema: z.any(),
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
   * Deletes a request in a collection.
   * @param {string} requestId - The request's ID.
   * @param {string} collectionId - The collection's ID.
   * @returns {Promise<HttpResponse<DeleteCollectionRequest>>} Successful Response
   */
  async deleteCollectionRequest(
    requestId: string,
    collectionId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<DeleteCollectionRequest>> {
    const path = this.client.buildPath('/collections/{collectionId}/requests/{requestId}', {
      requestId: requestId,
      collectionId: collectionId,
    });
    const options: any = {
      responseSchema: deleteCollectionRequestResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.delete(path, options);
  }

  /**
   * Gets information about a response in a collection.
   * @param {string} responseId - The response's ID.
   * @param {string} collectionId - The collection's ID.
   * @param {boolean} [ids] - If true, returns only properties that contain ID values in the response.
   * @param {boolean} [uid] - If true, returns all IDs in UID format (`userId`-`id`).
   * @param {boolean} [populate] - If true, returns all of the collection item's contents.
   * @returns {Promise<HttpResponse<GetCollectionResponse>>} Successful Response
   */
  async getCollectionResponse(
    responseId: string,
    collectionId: string,
    params?: GetCollectionResponseParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetCollectionResponse>> {
    const path = this.client.buildPath('/collections/{collectionId}/responses/{responseId}', {
      responseId: responseId,
      collectionId: collectionId,
    });
    const options: any = {
      responseSchema: getCollectionResponseResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.ids) {
      options.queryParams['ids'] = params?.ids;
    }
    if (params?.uid) {
      options.queryParams['uid'] = params?.uid;
    }
    if (params?.populate) {
      options.queryParams['populate'] = params?.populate;
    }
    return this.client.get(path, options);
  }

  /**
 * Updates a response in a collection. For a complete list of properties, see the [Collection Format Response documentation](https://learning.postman.com/collection-format/reference/response/#reference-diagram).
**Note:**

- You must pass a collection ID (`12ece9e1-2abf-4edc-8e34-de66e74114d2`), not a collection UID (`12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2`), in this endpoint.
- This endpoint acts like a PATCH method. It only updates the values that you pass in the request body (for example, the `name` property). The endpoint does not update the entire resource.

 * @param {string} responseId - The response's ID.
 * @param {string} collectionId - The collection's ID.
 * @returns {Promise<HttpResponse<UpdateCollectionResponse>>} Successful Response
 */
  async updateCollectionResponse(
    responseId: string,
    collectionId: string,
    body: any,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<UpdateCollectionResponse>> {
    const path = this.client.buildPath('/collections/{collectionId}/responses/{responseId}', {
      responseId: responseId,
      collectionId: collectionId,
    });
    const options: any = {
      responseSchema: updateCollectionResponseResponse,
      requestSchema: z.any(),
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
   * Deletes a response in a collection.
   * @param {string} responseId - The response's ID.
   * @param {string} collectionId - The collection's ID.
   * @returns {Promise<HttpResponse<DeleteCollectionResponse>>} Successful Response
   */
  async deleteCollectionResponse(
    responseId: string,
    collectionId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<DeleteCollectionResponse>> {
    const path = this.client.buildPath('/collections/{collectionId}/responses/{responseId}', {
      responseId: responseId,
      collectionId: collectionId,
    });
    const options: any = {
      responseSchema: deleteCollectionResponseResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.delete(path, options);
  }
}
