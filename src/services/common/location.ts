// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { position } from './position';

/**
 * The shape of the model inside the application code - what the users use
 */
export const location = z.object({
  id: z.string().optional(),
  model: z.string().optional(),
  position: position,
});

/**
 * The transferred items' placement in the target destination:
- For `start` or `end` — Do not include the `model` and `id` values.
- For `before` or `after` — Include the `model` and `id` properties.

 * @typedef  {Location} location - The transferred items' placement in the target destination:
- For `start` or `end` — Do not include the `model` and `id` values.
- For `before` or `after` — Include the `model` and `id` properties.
 - The transferred items' placement in the target destination:
- For `start` or `end` — Do not include the `model` and `id` values.
- For `before` or `after` — Include the `model` and `id` properties.

 * @property {string} - For `before` or `after` positions, the model's UID.
 * @property {string} - For `before` or `after` positions, the type of item (model) that the transferred item will be positioned by. One of: `folder`, `request`, or `response.`

 * @property {Position} - The transferred item's position within the destination object.
 */
export type Location = z.infer<typeof location>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locationResponse = z
  .object({
    id: z.string().optional(),
    model: z.string().optional(),
    position: position,
  })
  .transform((data) => ({
    id: data['id'],
    model: data['model'],
    position: data['position'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locationRequest = z
  .object({ id: z.string().nullish(), model: z.string().nullish(), position: position.nullish() })
  .transform((data) => ({
    id: data['id'],
    model: data['model'],
    position: data['position'],
  }));
