// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const transferCollectionItems200Error = z.object({
  ids: z.array(z.string()).optional(),
});

/**
 *
 * @typedef  {TransferCollectionItems200Error} transferCollectionItems200Error
 * @property {string[]} - A list of the transferred collection request, response, or folder UIDs.
 */
export type TransferCollectionItems200Error = z.infer<typeof transferCollectionItems200Error>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const transferCollectionItems200ErrorResponse = z
  .object({
    ids: z.array(z.string()).optional(),
  })
  .transform((data) => ({
    ids: data['ids'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const transferCollectionItems200ErrorRequest = z
  .object({ ids: z.array(z.string()).nullish() })
  .transform((data) => ({
    ids: data['ids'],
  }));
