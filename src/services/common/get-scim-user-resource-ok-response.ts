// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  scimUserResourceName2,
  scimUserResourceName2Request,
  scimUserResourceName2Response,
} from './scim-user-resource-name-2';
import {
  scimUserResourceMeta2,
  scimUserResourceMeta2Request,
  scimUserResourceMeta2Response,
} from './scim-user-resource-meta-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getScimUserResourceOkResponse = z.object({
  schemas: z.array(z.string()).optional(),
  id: z.string().optional(),
  userName: z.string().optional(),
  name: scimUserResourceName2.optional(),
  externalId: z.string().optional(),
  active: z.boolean().optional(),
  meta: scimUserResourceMeta2.optional(),
});

/**
 *
 * @typedef  {GetScimUserResourceOkResponse} getScimUserResourceOkResponse
 * @property {string[]} - The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).
 * @property {string} - The team member's SCIM ID.
 * @property {string} - The team member's SCIM username.
 * @property {ScimUserResourceName2} - Information about the Postman team member.
 * @property {string} - The team member's external ID.
 * @property {boolean} - If true, the team member is active.
 * @property {ScimUserResourceMeta2} - The response's non-standard meta information.
 */
export type GetScimUserResourceOkResponse = z.infer<typeof getScimUserResourceOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getScimUserResourceOkResponseResponse = z
  .object({
    schemas: z.array(z.string()).optional(),
    id: z.string().optional(),
    userName: z.string().optional(),
    name: scimUserResourceName2Response.optional(),
    externalId: z.string().optional(),
    active: z.boolean().optional(),
    meta: scimUserResourceMeta2Response.optional(),
  })
  .transform((data) => ({
    schemas: data['schemas'],
    id: data['id'],
    userName: data['userName'],
    name: data['name'],
    externalId: data['externalId'],
    active: data['active'],
    meta: data['meta'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getScimUserResourceOkResponseRequest = z
  .object({
    schemas: z.array(z.string()).nullish(),
    id: z.string().nullish(),
    userName: z.string().nullish(),
    name: scimUserResourceName2Request.nullish(),
    externalId: z.string().nullish(),
    active: z.boolean().nullish(),
    meta: scimUserResourceMeta2Request.nullish(),
  })
  .transform((data) => ({
    schemas: data['schemas'],
    id: data['id'],
    userName: data['userName'],
    name: data['name'],
    externalId: data['externalId'],
    active: data['active'],
    meta: data['meta'],
  }));
