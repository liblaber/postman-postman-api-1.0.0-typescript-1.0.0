// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { userName, userNameRequest, userNameResponse } from './user-name';

/**
 * The shape of the model inside the application code - what the users use
 */
export const commentCreateUpdateTags = z.object({
  userName: userName.optional(),
});

/**
 * Information about users tagged in the `body` comment.
 * @typedef  {CommentCreateUpdateTags} commentCreateUpdateTags - Information about users tagged in the `body` comment. - Information about users tagged in the `body` comment.
 * @property {UserName} - An object that contains information about the tagged user. The object's name is the user's Postman username. For example, `@user-postman`.
 */
export type CommentCreateUpdateTags = z.infer<typeof commentCreateUpdateTags>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const commentCreateUpdateTagsResponse = z
  .object({
    userName: userNameResponse.optional(),
  })
  .transform((data) => ({
    userName: data['userName'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const commentCreateUpdateTagsRequest = z.object({ userName: userNameRequest.nullish() }).transform((data) => ({
  userName: data['userName'],
}));
