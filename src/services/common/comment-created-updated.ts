// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  commentCreatedUpdatedData,
  commentCreatedUpdatedDataRequest,
  commentCreatedUpdatedDataResponse,
} from './comment-created-updated-data';

/**
 * The shape of the model inside the application code - what the users use
 */
export const commentCreatedUpdated: any = z.lazy(() => {
  return z.object({
    data: commentCreatedUpdatedData.optional(),
  });
});

/**
 *
 * @typedef  {CommentCreatedUpdated} commentCreatedUpdated
 * @property {CommentCreatedUpdatedData}
 */
export type CommentCreatedUpdated = z.infer<typeof commentCreatedUpdated>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const commentCreatedUpdatedResponse: any = z.lazy(() => {
  return z
    .object({
      data: commentCreatedUpdatedDataResponse.optional(),
    })
    .transform((data) => ({
      data: data['data'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const commentCreatedUpdatedRequest: any = z.lazy(() => {
  return z.object({ data: commentCreatedUpdatedDataRequest.nullish() }).transform((data) => ({
    data: data['data'],
  }));
});
