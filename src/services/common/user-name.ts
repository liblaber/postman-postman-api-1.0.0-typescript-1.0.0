// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const userName: any = z.lazy(() => {
  return z.object({
    type: z.string(),
    id: z.number(),
  });
});

/**
 * An object that contains information about the tagged user. The object's name is the user's Postman username. For example, `@user-postman`.
 * @typedef  {UserName} userName - An object that contains information about the tagged user. The object's name is the user's Postman username. For example, `@user-postman`. - An object that contains information about the tagged user. The object's name is the user's Postman username. For example, `@user-postman`.
 * @property {UserNameType} - The `user` value.
 * @property {number} - The user's ID.
 */
export type UserName = z.infer<typeof userName>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const userNameResponse: any = z.lazy(() => {
  return z
    .object({
      type: z.string(),
      id: z.number(),
    })
    .transform((data) => ({
      type: data['type'],
      id: data['id'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const userNameRequest: any = z.lazy(() => {
  return z.object({ type: z.string().nullish(), id: z.number().nullish() }).transform((data) => ({
    type: data['type'],
    id: data['id'],
  }));
});
