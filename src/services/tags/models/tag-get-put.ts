// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { tagGetPutTags, tagGetPutTagsRequest, tagGetPutTagsResponse } from './tag-get-put-tags';

/**
 * The shape of the model inside the application code - what the users use
 */
export const tagGetPut = z.lazy(() => {
  return z.object({
    tags: z.array(tagGetPutTags).max(5).optional(),
  });
});

/**
 *
 * @typedef  {TagGetPut} tagGetPut
 * @property {TagGetPutTags[]} - A list of associated tags.
 */
export type TagGetPut = z.infer<typeof tagGetPut>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const tagGetPutResponse = z.lazy(() => {
  return z
    .object({
      tags: z.array(tagGetPutTagsResponse).max(5).optional(),
    })
    .transform((data) => ({
      tags: data['tags'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const tagGetPutRequest = z.lazy(() => {
  return z.object({ tags: z.array(tagGetPutTagsRequest).nullish() }).transform((data) => ({
    tags: data['tags'],
  }));
});
