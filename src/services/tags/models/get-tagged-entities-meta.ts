// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getTaggedEntitiesMeta: any = z.lazy(() => {
  return z.object({
    count: z.number(),
    nextCursor: z.string().optional(),
  });
});

/**
 * The response's pagination information.
 * @typedef  {GetTaggedEntitiesMeta} getTaggedEntitiesMeta - The response's pagination information. - The response's pagination information.
 * @property {number} - The number of tagged elements returned in the response.
 * @property {string} - The pagination cursor that points to the next record in the results set.
 */
export type GetTaggedEntitiesMeta = z.infer<typeof getTaggedEntitiesMeta>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getTaggedEntitiesMetaResponse: any = z.lazy(() => {
  return z
    .object({
      count: z.number(),
      nextCursor: z.string().optional(),
    })
    .transform((data) => ({
      count: data['count'],
      nextCursor: data['nextCursor'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getTaggedEntitiesMetaRequest: any = z.lazy(() => {
  return z.object({ count: z.number().nullish(), nextCursor: z.string().nullish() }).transform((data) => ({
    count: data['count'],
    nextCursor: data['nextCursor'],
  }));
});
