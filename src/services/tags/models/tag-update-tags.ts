// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { tagUpdateTagsTags, tagUpdateTagsTagsRequest, tagUpdateTagsTagsResponse } from './tag-update-tags-tags';

/**
 * The shape of the model inside the application code - what the users use
 */
export const tagUpdateTags: any = z.lazy(() => {
  return z.object({
    tags: z.array(tagUpdateTagsTags).max(5),
  });
});

/**
 *
 * @typedef  {TagUpdateTags} tagUpdateTags
 * @property {TagUpdateTagsTags[]} - A list of the associated tags as slugs.
 */
export type TagUpdateTags = z.infer<typeof tagUpdateTags>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const tagUpdateTagsResponse: any = z.lazy(() => {
  return z
    .object({
      tags: z.array(tagUpdateTagsTagsResponse).max(5),
    })
    .transform((data) => ({
      tags: data['tags'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const tagUpdateTagsRequest: any = z.lazy(() => {
  return z.object({ tags: z.array(tagUpdateTagsTagsRequest).nullish() }).transform((data) => ({
    tags: data['tags'],
  }));
});
