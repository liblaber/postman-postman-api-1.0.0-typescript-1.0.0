// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { entitiesEntityType } from './entities-entity-type';

/**
 * The shape of the model inside the application code - what the users use
 */
export const entities = z.object({
  entityId: z.string().optional(),
  entityType: entitiesEntityType.optional(),
});

/**
 *
 * @typedef  {Entities} entities
 * @property {string} - The element's unique ID.
 * @property {EntitiesEntityType} - The type of Postman element.
 */
export type Entities = z.infer<typeof entities>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const entitiesResponse = z
  .object({
    entityId: z.string().optional(),
    entityType: entitiesEntityType.optional(),
  })
  .transform((data) => ({
    entityId: data['entityId'],
    entityType: data['entityType'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const entitiesRequest = z
  .object({ entityId: z.string().nullish(), entityType: entitiesEntityType.nullish() })
  .transform((data) => ({
    entityId: data['entityId'],
    entityType: data['entityType'],
  }));
