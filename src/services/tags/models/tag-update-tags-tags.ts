// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const tagUpdateTagsTags: any = z.lazy(() => {
  return z.object({
    slug: z
      .string()
      .min(2)
      .max(64)
      .regex(/^[a-z][a-z0-9-]*[a-z0-9]+$/),
  });
});

/**
 * Information about the tag.
 * @typedef  {TagUpdateTagsTags} tagUpdateTagsTags - Information about the tag. - Information about the tag.
 * @property {string} - The tag's ID within a team or individual (non-team) user scope.
 */
export type TagUpdateTagsTags = z.infer<typeof tagUpdateTagsTags>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const tagUpdateTagsTagsResponse: any = z.lazy(() => {
  return z
    .object({
      slug: z
        .string()
        .min(2)
        .max(64)
        .regex(/^[a-z][a-z0-9-]*[a-z0-9]+$/),
    })
    .transform((data) => ({
      slug: data['slug'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const tagUpdateTagsTagsRequest: any = z.lazy(() => {
  return z.object({ slug: z.string().nullish() }).transform((data) => ({
    slug: data['slug'],
  }));
});
