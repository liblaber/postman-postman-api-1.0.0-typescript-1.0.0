// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { TagGetPut, TagUpdateTags, tagGetPutResponse, tagUpdateTagsRequest } from '../common';
import { GetApiTagsParams, GetTaggedEntitiesParams, UpdateApiTagsParams } from './request-params';
import { GetTaggedEntities, getTaggedEntitiesResponse } from './models';

export class TagsService extends BaseService {
  /**
   * Gets all the tags associated with an API.
   * @param {string} apiId - The API's unique ID.
   * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
   * @returns {Promise<HttpResponse<TagGetPut>>} Success Response
   */
  async getApiTags(
    apiId: string,
    params: GetApiTagsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<TagGetPut>> {
    const path = this.client.buildPath('/apis/{apiId}/tags', { apiId: apiId });
    const options: any = {
      responseSchema: tagGetPutResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    return this.client.get(path, options);
  }

  /**
   * Updates an API's associated tags. This endpoint replaces all existing tags with those you pass in the request body.
   * @param {string} apiId - The API's unique ID.
   * @param {Accept} accept - The `application/vnd.api.v10+json` request header required to use the endpoint.
   * @returns {Promise<HttpResponse<TagGetPut>>} Success Response
   */
  async updateApiTags(
    apiId: string,
    body: TagUpdateTags,
    params: UpdateApiTagsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<TagGetPut>> {
    const path = this.client.buildPath('/apis/{apiId}/tags', { apiId: apiId });
    const options: any = {
      responseSchema: tagGetPutResponse,
      requestSchema: tagUpdateTagsRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.accept) {
      options.headers['Accept'] = params?.accept;
    }
    return this.client.put(path, options);
  }

  /**
   * Gets all the tags associated with a collection.
   * @param {string} collectionId - The collection's unique ID.
   * @returns {Promise<HttpResponse<TagGetPut>>} Success Response
   */
  async getCollectionTags(collectionId: string, requestConfig?: RequestConfig): Promise<HttpResponse<TagGetPut>> {
    const path = this.client.buildPath('/collections/{collectionId}/tags', { collectionId: collectionId });
    const options: any = {
      responseSchema: tagGetPutResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Updates a collection's associated tags. This endpoint replaces all existing tags with those you pass in the request body.
   * @param {string} collectionId - The collection's unique ID.
   * @returns {Promise<HttpResponse<TagGetPut>>} Success Response
   */
  async updateCollectionTags(
    collectionId: string,
    body: TagUpdateTags,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<TagGetPut>> {
    const path = this.client.buildPath('/collections/{collectionId}/tags', { collectionId: collectionId });
    const options: any = {
      responseSchema: tagGetPutResponse,
      requestSchema: tagUpdateTagsRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
 * Gets Postman elements (entities) by a given tag. Tags enable you to organize and search [workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#tagging-a-workspace), [APIs](https://learning.postman.com/docs/designing-and-developing-your-api/managing-apis/#tagging-apis), and [collections](https://learning.postman.com/docs/collections/using-collections/#tagging-a-collection) that contain shared tags.
**Note:**

Tagging is available on Postman [**Enterprise** plans](https://www.postman.com/pricing/).

 * @param {string} slug - The tag's ID within a team or individual (non-team) user scope.
 * @param {number} [limit] - The maximum number of tagged elements to return in a single call.
 * @param {AscDescDefaultDesc} [direction] - The ascending (`asc`) or descending (`desc`) order to sort the results by, based on the time of the entity's tagging.
 * @param {string} [cursor] - The cursor to get the next set of results in the paginated response. If you pass an invalid value, the API only returns the first set of results.
 * @param {GetTaggedEntitiesEntityType} [entityType] - Filter results for the given entity type.
 * @returns {Promise<HttpResponse<GetTaggedEntities>>} Successful Response
 */
  async getTaggedEntities(
    slug: string,
    params?: GetTaggedEntitiesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<GetTaggedEntities>> {
    const path = this.client.buildPath('/tags/{slug}/entities', { slug: slug });
    const options: any = {
      responseSchema: getTaggedEntitiesResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.limit) {
      options.queryParams['limit'] = params?.limit;
    }
    if (params?.direction) {
      options.queryParams['direction'] = params?.direction;
    }
    if (params?.cursor) {
      options.queryParams['cursor'] = params?.cursor;
    }
    if (params?.entityType) {
      options.queryParams['entityType'] = params?.entityType;
    }
    return this.client.get(path, options);
  }

  /**
   * Gets all the tags associated with a workspace.
   * @param {string} workspaceId - The workspace's ID.
   * @returns {Promise<HttpResponse<TagGetPut>>} Success Response
   */
  async getWorkspaceTags(workspaceId: string, requestConfig?: RequestConfig): Promise<HttpResponse<TagGetPut>> {
    const path = this.client.buildPath('/workspaces/{workspaceId}/tags', { workspaceId: workspaceId });
    const options: any = {
      responseSchema: tagGetPutResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Updates a workspace's associated tags. This endpoint replaces all existing tags with those you pass in the request body.
   * @param {string} workspaceId - The workspace's ID.
   * @returns {Promise<HttpResponse<TagGetPut>>} Success Response
   */
  async updateWorkspaceTags(
    workspaceId: string,
    body: TagUpdateTags,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<TagGetPut>> {
    const path = this.client.buildPath('/workspaces/{workspaceId}/tags', { workspaceId: workspaceId });
    const options: any = {
      responseSchema: tagGetPutResponse,
      requestSchema: tagUpdateTagsRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }
}
