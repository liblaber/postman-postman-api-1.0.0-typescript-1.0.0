// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import {
  PullRequestGet,
  PullRequestUpdate,
  PullRequestUpdated,
  pullRequestGetResponse,
  pullRequestUpdateRequest,
  pullRequestUpdatedResponse,
} from './models';

export class PullRequestsService extends BaseService {
  /**
   * Gets information about a pull request, such as the source and destination details, who reviewed the pull request, the merge's current status, and whether the element is accessible.
   * @param {string} pullRequestId - The pull request's ID.
   * @returns {Promise<HttpResponse<PullRequestGet>>} Successful Response
   */
  async getPullRequest(pullRequestId: string, requestConfig?: RequestConfig): Promise<HttpResponse<PullRequestGet>> {
    const path = this.client.buildPath('/pull-requests/{pullRequestId}', { pullRequestId: pullRequestId });
    const options: any = {
      responseSchema: pullRequestGetResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Updates an open pull request.
   * @param {string} pullRequestId - The pull request's ID.
   * @returns {Promise<HttpResponse<PullRequestUpdated>>} Successful Response
   */
  async updatePullRequest(
    pullRequestId: string,
    body: PullRequestUpdate,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PullRequestUpdated>> {
    const path = this.client.buildPath('/pull-requests/{pullRequestId}', { pullRequestId: pullRequestId });
    const options: any = {
      responseSchema: pullRequestUpdatedResponse,
      requestSchema: pullRequestUpdateRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }
}
