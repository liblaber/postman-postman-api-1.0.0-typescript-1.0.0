// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const destination = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  exists: z.boolean().optional(),
});

/**
 * Information about the pull request destination element.
 * @typedef  {Destination} destination - Information about the pull request destination element. - Information about the pull request destination element.
 * @property {string} - The destination element's ID.
 * @property {string} - The destination element's name.
 * @property {boolean} - If true, whether the element is present and not deleted.
 */
export type Destination = z.infer<typeof destination>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const destinationResponse = z
  .object({
    id: z.string().optional(),
    name: z.string().optional(),
    exists: z.boolean().optional(),
  })
  .transform((data) => ({
    id: data['id'],
    name: data['name'],
    exists: data['exists'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const destinationRequest = z
  .object({ id: z.string().nullish(), name: z.string().nullish(), exists: z.boolean().nullish() })
  .transform((data) => ({
    id: data['id'],
    name: data['name'],
    exists: data['exists'],
  }));
