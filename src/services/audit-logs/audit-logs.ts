// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { GetAuditLogs, getAuditLogsResponse } from './models/get-audit-logs';
import { GetAuditLogsParams } from './request-params';

export class AuditLogsService extends BaseService {
  /**
   * Gets a list of your team's generated audit events. For a complete list of all audit events, read our [Utilizing audit logs](https://learning.postman.com/docs/administration/audit-logs/) documentation.
   * @param {string} [since] - Return logs created after the given time, in `YYYY-MM-DD` format.
   * @param {string} [until] - Return logs created before the given time, in `YYYY-MM-DD` format.
   * @param {number} [limit] - The maximum number of audit events to return at once.
   * @param {string} [cursor] - The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.
   * @param {AscDescDefaultDesc} [orderBy] - Return the records in ascending (`asc`) or descending (`desc`) order.
   * @returns {Promise<HttpResponse<GetAuditLogs>>} Successful Response
   */
  async getAuditLogs(params?: GetAuditLogsParams, requestConfig?: RequestConfig): Promise<HttpResponse<GetAuditLogs>> {
    const request = new RequestBuilder<GetAuditLogs>()
      .setConfig(this.config)
      .setBaseUrl(this.config)
      .setMethod('GET')
      .setPath('/audit/logs')
      .setRequestSchema(z.any())
      .setResponseSchema(getAuditLogsResponse)
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'since',
        value: params?.since,
      })
      .addQueryParam({
        key: 'until',
        value: params?.until,
      })
      .addQueryParam({
        key: 'limit',
        value: params?.limit,
      })
      .addQueryParam({
        key: 'cursor',
        value: params?.cursor,
      })
      .addQueryParam({
        key: 'order_by',
        value: params?.orderBy,
      })
      .build();
    return this.client.call<GetAuditLogs>(request);
  }
}
