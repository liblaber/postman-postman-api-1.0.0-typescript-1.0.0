// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { Request } from '../../http/transport/request';
import { GetAuditLogs, getAuditLogsResponse } from './models/get-audit-logs';
import { GetAuditLogsParams } from './request-params';

export class AuditLogsService extends BaseService {
  /**
   * Gets a list of your team's generated audit events. For a complete list of all audit events, read our [Utilizing audit logs](https://learning.postman.com/docs/administration/audit-logs/) documentation.
   * @param {string} [since] - Return logs created after the given time, in `YYYY-MM-DD` format.
   * @param {string} [until] - Return logs created before the given time, in `YYYY-MM-DD` format.
   * @param {number} [limit] - The maximum number of audit events to return at once.
   * @param {string} [cursor] - The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.
   * @param {AscDescDefaultDesc} [orderBy] - Return the records in ascending (`asc`) or descending (`desc`) order.
   * @returns {Promise<HttpResponse<GetAuditLogs>>} Successful Response
   */
  async getAuditLogs(params?: GetAuditLogsParams, requestConfig?: RequestConfig): Promise<HttpResponse<GetAuditLogs>> {
    const request = new Request({
      method: 'GET',
      path: '/audit/logs',
      config: this.config,
      responseSchema: getAuditLogsResponse,
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addQueryParam('since', params?.since);
    request.addQueryParam('until', params?.until);
    request.addQueryParam('limit', params?.limit);
    request.addQueryParam('cursor', params?.cursor);
    request.addQueryParam('order_by', params?.orderBy);
    return this.client.call<GetAuditLogs>(request);
  }
}
