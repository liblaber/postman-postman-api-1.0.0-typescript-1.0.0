// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const actor = z.lazy(() => {
  return z.object({
    name: z.string().optional(),
    username: z.string().optional(),
    email: z.string().optional(),
    id: z.number().optional(),
    active: z.boolean().optional(),
  });
});

/**
 * Information about the user who preformed the audit event.
 * @typedef  {Actor} actor - Information about the user who preformed the audit event. - Information about the user who preformed the audit event.
 * @property {string} - The user's name.
 * @property {string} - The user's username.
 * @property {string} - The user's email address.
 * @property {number}
 * @property {boolean} - If true, the user is active. If false, the user is deactivated.
 */
export type Actor = z.infer<typeof actor>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const actorResponse = z.lazy(() => {
  return z
    .object({
      name: z.string().optional(),
      username: z.string().optional(),
      email: z.string().optional(),
      id: z.number().optional(),
      active: z.boolean().optional(),
    })
    .transform((data) => ({
      name: data['name'],
      username: data['username'],
      email: data['email'],
      id: data['id'],
      active: data['active'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const actorRequest = z.lazy(() => {
  return z
    .object({
      name: z.string().nullish(),
      username: z.string().nullish(),
      email: z.string().nullish(),
      id: z.number().nullish(),
      active: z.boolean().nullish(),
    })
    .transform((data) => ({
      name: data['name'],
      username: data['username'],
      email: data['email'],
      id: data['id'],
      active: data['active'],
    }));
});
